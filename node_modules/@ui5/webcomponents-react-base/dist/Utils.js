var deprecationNotice = function deprecationNotice(component, message) {
  if (process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'test') {
    var value = "*** ui5-webcomponents-react Deprecation Notice - ".concat(component, " ***\n"); // eslint-disable-next-line no-console

    console.warn("".concat(value).concat(message));
  }
};
var enrichEventWithDetails = function enrichEventWithDetails(event) {
  var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  if (event.hasOwnProperty('persist')) {
    // if there is a persist method, it's an SyntheticEvent so we need to persist it
    event.persist();
  }

  var shouldCreateNewDetails = event.detail === null || event.detail === undefined || typeof event.detail !== 'object';
  Object.defineProperty(event, 'detail', {
    value: shouldCreateNewDetails ? {} : event.detail,
    writable: true,
    configurable: true
  });
  Object.assign(event.detail, payload);
  return event;
};

// Copied from https://github.com/jashkenas/underscore/blob/master/modules/debounce.js (31th May 2021)
var now = Date.now || function () {
  return new Date().getTime();
};

/**
 * When a sequence of calls of the returned function ends, the argument
 * function is triggered. The end of a sequence is defined by the `wait`
 * parameter.
 */
var debounce = function debounce(func, wait) {
  var timeout;
  var previous;
  var args;
  var result;
  var context;

  var later = function later() {
    var passed = now() - previous;

    if (wait > passed) {
      timeout = setTimeout(later, wait - passed);
    } else {
      timeout = null;
      result = func.apply(context, args); // This check is needed because `func` can recursively invoke `debounced`.

      if (!timeout) args = context = null;
    }
  };

  var debounced = function debounced() {
    context = this;

    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }

    args = _args;
    previous = now();

    if (!timeout) {
      timeout = setTimeout(later, wait);
    }

    return result;
  };

  debounced.cancel = function () {
    clearTimeout(timeout);
    timeout = args = context = null;
  };

  return debounced;
};

export { debounce, deprecationNotice, enrichEventWithDetails };
//# sourceMappingURL=Utils.js.map
