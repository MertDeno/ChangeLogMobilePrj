import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { supportsTouch } from '@ui5/webcomponents-base/dist/Device.js';
export { isDesktop, isIE, isPhone, isSafari, isTablet, supportsTouch } from '@ui5/webcomponents-base/dist/Device.js';
import EventProviderWC from '@ui5/webcomponents-base/dist/EventProvider.js';

var EventProvider = new EventProviderWC();

// private helpers
var activeRangeSet;

var matchLegacyBySize = function matchLegacyBySize(from, to, unit, width) {
  var a = from < 0 || from <= width;
  var b = to < 0 || width <= to;
  return a && b;
};

var getQuery = function getQuery(from, to) {
  var unit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'px';
  var q = 'all';

  if (from > 0) {
    q = "".concat(q, " and (min-width:").concat(from).concat(unit, ")");
  }

  if (to > 0) {
    q = "".concat(q, " and (max-width:").concat(to).concat(unit, ")");
  }

  return q;
};

var getRangeInfo = function getRangeInfo(iRangeIdx) {
  var q = activeRangeSet.queries[iRangeIdx];
  var info = {
    from: q.from,
    unit: activeRangeSet.unit,
    name: activeRangeSet.names[iRangeIdx]
  };

  if (q.to >= 0) {
    info.to = q.to;
  }

  return info;
};

var matches = function matches(from, to, unit) {
  var q = getQuery(from, to, unit);
  var mm = window.matchMedia(q); // FF returns null when running within an iframe with display:none

  return mm && mm.matches;
};

var checkQueries = function checkQueries(infoOnly) {
  var matcher = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : matches;
  var aQueries = activeRangeSet.queries;
  var info = null;

  for (var i = 0, len = aQueries.length; i < len; i++) {
    var q = aQueries[i];

    if ((q !== activeRangeSet.currentquery || infoOnly) && matcher(q.from, q.to, activeRangeSet.unit)) {
      if (!infoOnly) {
        activeRangeSet.currentquery = q;
      }

      info = getRangeInfo(i);
    }
  }

  return info;
};

var handleChange = function handleChange() {
  if (activeRangeSet.timer) {
    clearTimeout(activeRangeSet.timer);
    activeRangeSet.timer = null;
  }

  activeRangeSet.timer = window.setTimeout(function () {
    var mParams = checkQueries(false);

    if (mParams) {
      EventProvider.fireEvent("media", mParams);
    }
  }, 0);
};

var DEFAULT_RANGE_SET = 'StdExt';

var initRangeSet = function initRangeSet() {
  if (activeRangeSet) {
    return;
  }

  var oConfig = {
    points: [600, 1024, 1440],
    unit: 'px',
    name: DEFAULT_RANGE_SET,
    names: ['Phone', 'Tablet', 'Desktop', 'LargeDesktop']
  };
  oConfig.queries = [];
  oConfig.timer = null;
  oConfig.currentquery = null;

  oConfig.listener = function () {
    return handleChange();
  };

  var rangeBorders = oConfig.points;

  for (var i = 0, len = rangeBorders.length; i <= len; i++) {
    var from = i === 0 ? 0 : rangeBorders[i - 1];
    var to = i === rangeBorders.length ? -1 : rangeBorders[i] - 1;
    var query = getQuery(from, to, oConfig.unit);
    var media = window.matchMedia(query);
    media.addEventListener('change', oConfig.listener);
    oConfig.queries.push({
      query: query,
      from: from,
      to: to,
      media: media
    });
  }

  activeRangeSet = oConfig;
  oConfig.listener();
}; // public API


var getCurrentRange = function getCurrentRange(width) {
  if (!activeRangeSet) {
    initRangeSet();
  }

  return checkQueries(true, isNaN(width) ? undefined : function (from, to, unit) {
    return matchLegacyBySize(from, to, unit, width);
  });
};
var attachMediaHandler = function attachMediaHandler(func) {
  if (!activeRangeSet) {
    initRangeSet();
  }

  EventProvider.attachEvent("media", func);
};
var detachMediaHandler = function detachMediaHandler(func) {
  EventProvider.detachEvent("media", func);
};

var getActualWindowSize = function getActualWindowSize() {
  return [window.innerWidth, window.innerHeight];
};

var iResizeTimeout;
var bOrientationChange = false;
var bResize = false;
var iOrientationTimeout;
var iClearFlagTimeout;

var _getActualWindowSize = getActualWindowSize(),
    _getActualWindowSize2 = _slicedToArray(_getActualWindowSize, 2),
    iWindowWidthOld = _getActualWindowSize2[0],
    iWindowHeightOld = _getActualWindowSize2[1];
var rInputTagRegex = /INPUT|TEXTAREA|SELECT/;
var internalWindowSize = {
  height: 0,
  width: 0
};
var internalOrientation = {
  landscape: false,
  portrait: false
}; // PRIVATE API

var isLandscape = function isLandscape() {
  return !!window.matchMedia('(orientation: landscape)').matches;
};

var setResizeInfo = function setResizeInfo() {
  internalWindowSize.width = getActualWindowSize()[0];
  internalWindowSize.height = getActualWindowSize()[1];
};

var setOrientationInfo = function setOrientationInfo() {
  internalOrientation.landscape = isLandscape();
  internalOrientation.portrait = !internalOrientation.landscape;
};

var clearFlags = function clearFlags() {
  bOrientationChange = false;
  bResize = false;
  iClearFlagTimeout = null;
};

var eventListenersInitialized = false;

var initEventListeners = function initEventListeners() {
  // Add handler for orientationchange and resize after initialization of Device API
  if (supportsTouch()) {
    // logic for mobile devices which support orientationchange (like ios, android)
    window.addEventListener('resize', handleMobileOrientationResizeChange, false);
    window.addEventListener('orientationchange', handleMobileOrientationResizeChange, false);
  } else {
    // desktop browsers and windows phone/tablet which not support orientationchange
    window.addEventListener('resize', handleResizeEvent, false);
  }

  setResizeInfo();
  setOrientationInfo();
  eventListenersInitialized = true;
}; // orientation change


var handleOrientationChange = function handleOrientationChange() {
  setOrientationInfo();
  EventProvider.fireEvent('orientation', {
    landscape: internalOrientation.landscape,
    portrait: internalOrientation.portrait
  });
};

var handleMobileTimeout = function handleMobileTimeout() {
  // with ios split view, the browser fires only resize event and no orientationchange
  // when changing the size of a split view
  // therefore the following if needs to be adapted with additional check of iPad with version greater or equal 9
  // (splitview was introduced with iOS 9)
  if (bResize && bOrientationChange) {
    handleOrientationChange();
    handleResizeChange();
    bOrientationChange = false;
    bResize = false;

    if (iClearFlagTimeout) {
      window.clearTimeout(iClearFlagTimeout);
      iClearFlagTimeout = null;
    }
  }

  iOrientationTimeout = null;
};

var handleMobileOrientationResizeChange = function handleMobileOrientationResizeChange(evt) {
  if (evt.type === 'resize') {
    if (rInputTagRegex.test(document.activeElement.tagName) && !bOrientationChange) {
      return;
    }

    var _getActualWindowSize3 = getActualWindowSize(),
        _getActualWindowSize4 = _slicedToArray(_getActualWindowSize3, 2),
        iWindowWidthNew = _getActualWindowSize4[0],
        iWindowHeightNew = _getActualWindowSize4[1];

    new Date().getTime(); // skip multiple resize events by only one orientationchange

    if (iWindowHeightNew === iWindowHeightOld && iWindowWidthNew === iWindowWidthOld) {
      return;
    }

    bResize = true; // on mobile devices opening the keyboard on some devices leads to a resize event
    // in this case only the height changes, not the width

    if (iWindowHeightOld !== iWindowHeightNew && iWindowWidthOld === iWindowWidthNew) {

      handleResizeChange();
    } else {
      iWindowWidthOld = iWindowWidthNew;
    }
    iWindowHeightOld = iWindowHeightNew;

    if (iClearFlagTimeout) {
      window.clearTimeout(iClearFlagTimeout);
      iClearFlagTimeout = null;
    } // Some Android build-in browser fires a resize event after the viewport is applied.
    // This resize event has to be dismissed otherwise when the next orientationchange event happens,
    // a UI5 resize event will be fired with the wrong window size.


    iClearFlagTimeout = window.setTimeout(clearFlags, 1200);
  } else if (evt.type === 'orientationchange') {
    bOrientationChange = true;
  }

  if (iOrientationTimeout) {
    clearTimeout(iOrientationTimeout);
    iOrientationTimeout = null;
  }

  iOrientationTimeout = window.setTimeout(handleMobileTimeout, 50);
}; // RESIZE ONLY WITHOUT ORIENTATION CHANGE


var handleResizeChange = function handleResizeChange() {
  setResizeInfo();
  EventProvider.fireEvent('resize', {
    height: internalWindowSize.height,
    width: internalWindowSize.width
  });
};

var handleResizeTimeout = function handleResizeTimeout() {
  handleResizeChange();
  iResizeTimeout = null;
};

var handleResizeEvent = function handleResizeEvent() {
  var wasL = internalOrientation.landscape;
  var isL = isLandscape();

  if (wasL !== isL) {
    handleOrientationChange();
  } // throttle resize events because most browsers throw one or more resize events per pixel
  // for every resize event inside the period from 150ms (starting from the first resize event),
  // we only fire one resize event after this period


  if (!iResizeTimeout) {
    iResizeTimeout = window.setTimeout(handleResizeTimeout, 150);
  }
}; // re-export everything from the web components device

var attachResizeHandler = function attachResizeHandler(fnFunction) {
  if (!eventListenersInitialized) {
    initEventListeners();
  }

  EventProvider.attachEvent('resize', fnFunction);
};
var detachResizeHandler = function detachResizeHandler(fnFunction) {
  EventProvider.detachEvent('resize', fnFunction);
}; // orientation change events

var getOrientation = function getOrientation() {
  return internalOrientation;
};
var attachOrientationChangeHandler = function attachOrientationChangeHandler(fnFunction) {
  if (!eventListenersInitialized) {
    initEventListeners();
  }

  EventProvider.attachEvent('orientation', fnFunction);
};
var detachOrientationChangeHandler = function detachOrientationChangeHandler(fnFunction) {
  EventProvider.detachEvent('orientation', fnFunction);
};

export { attachMediaHandler, attachOrientationChangeHandler, attachResizeHandler, detachMediaHandler, detachOrientationChangeHandler, detachResizeHandler, getCurrentRange, getOrientation };
//# sourceMappingURL=Device.js.map
