import _extends from '@babel/runtime/helpers/extends';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import { useSyncRef, useIsRTL } from '@ui5/webcomponents-react-base/dist/hooks';
import { BusyIndicator } from '@ui5/webcomponents-react/dist/BusyIndicator';
import { BusyIndicatorSize } from '@ui5/webcomponents-react/dist/BusyIndicatorSize';
import { FlexBox } from '@ui5/webcomponents-react/dist/FlexBox';
import { Label } from '@ui5/webcomponents-react/dist/Label';
import clsx from 'clsx';
import React, { useEffect, forwardRef } from 'react';
import { createUseStyles } from 'react-jss';
import { deprecationNotice } from '@ui5/webcomponents-react-base/dist/Utils';
import { isIE } from '@ui5/webcomponents-react-base/dist/Device';

var useDeprecationNoticeForTooltip = function useDeprecationNoticeForTooltip(component, tooltip) {
  useEffect(function () {
    if (tooltip) {
      deprecationNotice(component, '`tooltip` has been deprecated, please use the native `title` attribute instead.');
    }
  }, [tooltip]);
};

var styles = {
  filterItem: {
    marginBottom: '1rem',
    flexBasis: isIE() ? '13.125rem' : 'var(--_ui5wcr_filter_group_item_flex_basis)',
    maxWidth: isIE() ? '13.125rem' : 'calc(var(--_ui5wcr_filter_group_item_flex_basis))',
    flexGrow: 1,
    flexShrink: 0,
    '&[data-with-toolbar=false]': {
      maxWidth: isIE() ? '26.25rem' : 'calc(var(--_ui5wcr_filter_group_item_flex_basis) * 2)'
    }
  },
  filterItemDialog: {
    flexGrow: 1,
    overflow: 'hidden'
  },
  innerFilterItemContainer: {
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'start'
  },
  innerFilterItemContainerDialog: {
    display: 'grid',
    gridTemplateColumns: '20% calc(80% - 1rem)',
    '@media(max-width:700px)': {
      gridTemplateColumns: '100%'
    },
    gridTemplateRows: 'auto',
    gridRowGap: '0px',
    gridColumnGap: '1rem',
    '& :first-child': {
      maxWidth: '100%',
      placeSelf: 'center end',
      '@media(max-width:700px)': {
        placeSelf: 'center start'
      }
    },
    '& :last-child': {
      placeSelf: 'center auto',
      width: '100%'
    }
  },
  loadingContainer: {
    display: 'flex',
    width: '100%',
    height: '1.625rem',
    justifyContent: 'center'
  }
};
var styles$1 = styles;

var _excluded = ["groupName", "considerGroupName", "label", "labelTooltip", "required", "visible", "visibleInFilterBar", "children", "style", "loading", "className", "tooltip", "slot"];
var useStyles = createUseStyles(styles$1, {
  name: 'FilterGroupItem'
});
var emptyObject = {};

/**
 * Represents a filter belonging to the `FilterBar`.
 */
var FilterGroupItem = /*#__PURE__*/forwardRef(function (props, ref) {
  var classes = useStyles();

  var groupName = props.groupName,
      considerGroupName = props.considerGroupName,
      label = props.label,
      labelTooltip = props.labelTooltip,
      required = props.required,
      visible = props.visible,
      visibleInFilterBar = props.visibleInFilterBar,
      children = props.children,
      style = props.style,
      loading = props.loading,
      className = props.className,
      tooltip = props.tooltip,
      slot = props.slot,
      rest = _objectWithoutProperties(props, _excluded);

  useDeprecationNoticeForTooltip('FilterGroupItem', props.tooltip);
  var inFB = props['data-in-fb'];

  var _useSyncRef = useSyncRef(ref),
      _useSyncRef2 = _slicedToArray(_useSyncRef, 2),
      componentRef = _useSyncRef2[0],
      filterGroupItemRef = _useSyncRef2[1];

  var isRtl = useIsRTL(filterGroupItemRef);
  var transformMarginRight = isRtl ? 'marginLeft' : 'marginRight';
  var styleClasses = clsx(className, inFB ? classes.filterItem : classes.filterItemDialog);

  var inlineStyle = _objectSpread(_defineProperty({}, transformMarginRight, '1rem'), style);

  if (!required && (!visible || inFB && !visibleInFilterBar)) return null;
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: componentRef,
    title: tooltip,
    slot: slot
  }, rest, {
    className: styleClasses,
    style: inFB ? inlineStyle : emptyObject
  }), /*#__PURE__*/React.createElement("div", {
    className: inFB ? classes.innerFilterItemContainer : classes.innerFilterItemContainerDialog
  }, /*#__PURE__*/React.createElement(FlexBox, null, /*#__PURE__*/React.createElement(Label, {
    title: labelTooltip !== null && labelTooltip !== void 0 ? labelTooltip : label,
    required: required
  }, "".concat(considerGroupName && groupName !== 'default' ? "".concat(groupName, ": ") : '', "\n          ").concat(label))), loading ? /*#__PURE__*/React.createElement(BusyIndicator, {
    className: classes.loadingContainer,
    active: true,
    size: BusyIndicatorSize.Small
  }) : children));
});
FilterGroupItem.displayName = 'FilterGroupItem';
FilterGroupItem.defaultProps = {
  groupName: 'default',
  visible: true,
  required: false,
  label: ''
};

export { FilterGroupItem };
//# sourceMappingURL=FilterGroupItem.js.map
