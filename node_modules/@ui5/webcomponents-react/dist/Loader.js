import _extends from '@babel/runtime/helpers/extends';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import { useI18nBundle } from '@ui5/webcomponents-react-base/dist/hooks';
import { PLEASE_WAIT } from '@ui5/webcomponents-react/dist/assets/i18n/i18n-defaults';
import { LoaderType } from '@ui5/webcomponents-react/dist/LoaderType';
import clsx from 'clsx';
import React, { useEffect, forwardRef, useState, useMemo } from 'react';
import { createUseStyles } from 'react-jss';
import { deprecationNotice } from '@ui5/webcomponents-react-base/dist/Utils';
import { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';

var useDeprecationNoticeForTooltip = function useDeprecationNoticeForTooltip(component, tooltip) {
  useEffect(function () {
    if (tooltip) {
      deprecationNotice(component, '`tooltip` has been deprecated, please use the native `title` attribute instead.');
    }
  }, [tooltip]);
};

var styles = {
  '@keyframes scroll': {
    '0%': {
      backgroundPosition: '-100% 0'
    },
    '100%': {
      backgroundPosition: '200% 0'
    }
  },
  loader: {
    height: '0.25rem',
    width: '100%',
    '&$loaderDeterminate': {
      background: "linear-gradient(to right, ".concat(ThemingParameters.sapContent_IconColor, ", ").concat(ThemingParameters.sapContent_IconColor, ")"),
      backgroundColor: 'rgba(8, 84, 160, 0.15)',
      backgroundRepeat: 'repeat-y'
    },
    '&$loaderIndeterminate': {
      background: "linear-gradient(\n      to right,\n      rgba(8, 84, 160, 0) 0px,\n      rgba(8, 84, 160, 1) calc(50% - 2rem),\n      ".concat(ThemingParameters.sapContent_IconColor, " calc(50% - 2rem),\n      ").concat(ThemingParameters.sapContent_IconColor, " calc(50% + 2rem),\n      rgba(8, 84, 160, 1) calc(50% + 2rem),\n      rgba(8, 84, 160, 0) 100%\n    )"),
      backgroundColor: 'rgba(8, 84, 160, 0.15)',
      backgroundSize: '40%',
      backgroundRepeat: 'repeat-y',
      animation: '$scroll 1.2s linear infinite'
    }
  },
  loaderDeterminate: {},
  loaderIndeterminate: {}
};

var _excluded = ["className", "type", "progress", "tooltip", "slot", "style", "delay"];
var useStyles = createUseStyles(styles, {
  name: 'Loader'
});
/**
 * The `Loader` signals that an operation is currently being executed. It uses as little space as possible to allow the user to interact with the UI.<br />
 * It can be used to signal a data update on an already existing dataset, or where an expansion will happen.
 */

var Loader = /*#__PURE__*/forwardRef(function (props, ref) {
  var className = props.className,
      type = props.type,
      progress = props.progress,
      tooltip = props.tooltip,
      slot = props.slot,
      style = props.style,
      delay = props.delay,
      rest = _objectWithoutProperties(props, _excluded);

  useDeprecationNoticeForTooltip('Loader', props.tooltip);
  var classes = useStyles();

  var _useState = useState(delay === 0),
      _useState2 = _slicedToArray(_useState, 2),
      isVisible = _useState2[0],
      setIsVisible = _useState2[1];

  var loaderClasses = clsx(classes.loader, className, classes["loader".concat(type)]);
  var inlineStyles = useMemo(function () {
    var backgroundSize = type !== LoaderType.Determinate ? '40%' : progress;
    return _objectSpread(_objectSpread({}, style), {}, {
      backgroundSize: backgroundSize
    });
  }, [progress, style, type]);
  useEffect(function () {
    var timeout;

    if (delay > 0) {
      timeout = setTimeout(function () {
        setIsVisible(true);
      }, delay);
    }

    return function () {
      clearTimeout(timeout);
    };
  }, []);
  var i18nBundle = useI18nBundle('@ui5/webcomponents-react');

  if (!isVisible) {
    return null;
  }

  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: loaderClasses,
    "data-component-name": "Loader",
    "aria-busy": "true",
    role: "progressbar",
    title: tooltip || i18nBundle.getText(PLEASE_WAIT),
    slot: slot,
    style: inlineStyles
  }, rest));
});
Loader.defaultProps = {
  type: LoaderType.Indeterminate,
  progress: '0px',
  delay: 0
};
Loader.displayName = 'Loader';

export { Loader };
//# sourceMappingURL=Loader.js.map
