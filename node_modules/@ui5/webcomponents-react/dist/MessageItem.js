import _extends from '@babel/runtime/helpers/extends';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import { CssSizeVariables } from '@ui5/webcomponents-react-base/dist/CssSizeVariables';
import { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';
import { CustomListItem } from '@ui5/webcomponents-react/dist/CustomListItem';
import { FlexBox } from '@ui5/webcomponents-react/dist/FlexBox';
import { FlexBoxAlignItems } from '@ui5/webcomponents-react/dist/FlexBoxAlignItems';
import { FlexBoxDirection } from '@ui5/webcomponents-react/dist/FlexBoxDirection';
import { Icon } from '@ui5/webcomponents-react/dist/Icon';
import { Label } from '@ui5/webcomponents-react/dist/Label';
import { ListItemType } from '@ui5/webcomponents-react/dist/ListItemType';
import { MessageViewContext } from '@ui5/webcomponents-react/dist/MessageViewContext';
import { ValueState as ValueState$1 } from '@ui5/webcomponents-react/dist/ValueState';
import React, { forwardRef, useContext } from 'react';
import { createUseStyles } from 'react-jss';
import clsx from 'clsx';

var ValueState;

(function (ValueState) {
  ValueState["Error"] = "Error";
  ValueState["None"] = "None";
  ValueState["Success"] = "Success";
  ValueState["Warning"] = "Warning";
  ValueState["Information"] = "Information";
})(ValueState || (ValueState = {}));

var getIconNameForType = function getIconNameForType(type) {
  switch (type) {
    case ValueState.Error:
    case 'Error':
      return 'error';

    case ValueState.Success:
    case 'Success':
      return 'sys-enter-2';

    case ValueState.Warning:
    case 'Warning':
      return 'alert';

    default:
      return 'information';
  }
};

var _excluded = ["titleText", "subtitleText", "counter", "type", "children", "className"];
var useStyles = createUseStyles({
  listItem: {
    height: CssSizeVariables.sapWcrMessageViewListItemHeightSingle
  },
  message: {
    padding: '0.25rem 0',
    width: '100%',
    maxWidth: '100%',
    overflow: 'hidden',
    paddingRight: '1rem',
    boxSizing: 'border-box'
  },
  withSubtitle: {
    height: CssSizeVariables.sapWcrMessageViewListItemHeightByLine
  },
  withChildren: {
    paddingRight: '0rem'
  },
  iconContainer: {
    width: '3rem',
    minWidth: '3rem',
    height: '2.25rem',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center'
  },
  icon: {
    width: '1rem',
    height: '1rem'
  },
  title: {
    fontFamily: ThemingParameters.sapFontHeaderFamily,
    fontSize: ThemingParameters.sapFontHeader6Size,
    color: ThemingParameters.sapGroup_TitleTextColor,
    maxWidth: '100%',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    flex: '1 1 auto',
    '& + $subtitle': {
      marginTop: '0.25rem',
      cursor: 'inherit'
    }
  },
  subtitle: {},
  counter: {
    color: ThemingParameters.sapContent_MarkerTextColor,
    fontFamily: ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.sapFontSize,
    paddingLeft: '1rem',
    flex: 'none'
  },
  navigation: {
    height: '0.875rem',
    width: '0.875rem',
    padding: '0 0.9375rem',
    flexShrink: 0
  },
  typeError: {
    '& $icon': {
      color: ThemingParameters.sapNegativeElementColor
    }
  },
  typeSuccess: {
    '& $icon': {
      color: ThemingParameters.sapPositiveElementColor
    }
  },
  typeWarning: {
    ' & $icon': {
      color: ThemingParameters.sapCriticalElementColor
    }
  },
  typeInformation: {
    '& $icon': {
      // color: ThemingParameters.sapInformativeElementColor
      color: ThemingParameters.sapNeutralElementColor
    }
  },
  typeNone: {
    '& $icon': {
      color: ThemingParameters.sapNeutralElementColor
    }
  }
}, {
  name: 'MessageItem'
});
var MessageItem = /*#__PURE__*/forwardRef(function (props, ref) {
  var titleText = props.titleText,
      subtitleText = props.subtitleText,
      counter = props.counter,
      type = props.type,
      children = props.children,
      className = props.className,
      rest = _objectWithoutProperties(props, _excluded);

  var _useContext = useContext(MessageViewContext),
      selectMessage = _useContext.selectMessage;

  var classes = useStyles();
  var listItemClasses = clsx(classes.listItem, Reflect.get(classes, "type".concat(type)), className, subtitleText && classes.withSubtitle);
  var messageClasses = clsx(classes.message, children && classes.withChildren);

  var handleListItemClick = function handleListItemClick(e) {
    if (children) {
      selectMessage(props);

      if (typeof rest.onClick === 'function') {
        rest.onClick(e);
      }
    }
  };

  return /*#__PURE__*/React.createElement(CustomListItem, _extends({
    onClick: handleListItemClick,
    "data-title": titleText,
    "data-type": type,
    type: children ? ListItemType.Active : ListItemType.Inactive
  }, rest, {
    className: listItemClasses,
    ref: ref
  }), /*#__PURE__*/React.createElement(FlexBox, {
    alignItems: FlexBoxAlignItems.Center,
    className: messageClasses
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.iconContainer
  }, /*#__PURE__*/React.createElement(Icon, {
    name: getIconNameForType(type),
    className: classes.icon
  })), /*#__PURE__*/React.createElement(FlexBox, {
    direction: FlexBoxDirection.Column,
    style: {
      flex: 'auto',
      whiteSpace: 'nowrap',
      overflow: 'hidden',
      textOverflow: 'ellipsis'
    }
  }, titleText && /*#__PURE__*/React.createElement("span", {
    className: classes.title
  }, titleText), subtitleText && /*#__PURE__*/React.createElement(Label, {
    className: classes.subtitle
  }, subtitleText)), counter != null && /*#__PURE__*/React.createElement("span", {
    className: classes.counter
  }, counter), children && /*#__PURE__*/React.createElement(Icon, {
    className: classes.navigation,
    name: "slim-arrow-right"
  })));
});
MessageItem.displayName = 'MessageItem';
MessageItem.defaultProps = {
  type: ValueState$1.None
};

export { MessageItem };
//# sourceMappingURL=MessageItem.js.map
