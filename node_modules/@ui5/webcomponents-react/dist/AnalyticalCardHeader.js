import _extends from '@babel/runtime/helpers/extends';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import { useI18nBundle } from '@ui5/webcomponents-react-base/dist/hooks';
import { TARGET, DEVIATION } from '@ui5/webcomponents-react/dist/assets/i18n/i18n-defaults';
import { DeviationIndicator } from '@ui5/webcomponents-react/dist/DeviationIndicator';
import { FlexBox } from '@ui5/webcomponents-react/dist/FlexBox';
import { FlexBoxAlignItems } from '@ui5/webcomponents-react/dist/FlexBoxAlignItems';
import { FlexBoxDirection } from '@ui5/webcomponents-react/dist/FlexBoxDirection';
import { FlexBoxJustifyContent } from '@ui5/webcomponents-react/dist/FlexBoxJustifyContent';
import { FlexBoxWrap } from '@ui5/webcomponents-react/dist/FlexBoxWrap';
import { ObjectStatus } from '@ui5/webcomponents-react/dist/ObjectStatus';
import { ValueState } from '@ui5/webcomponents-react/dist/ValueState';
import clsx from 'clsx';
import React, { useEffect, forwardRef, useMemo } from 'react';
import { createUseStyles } from 'react-jss';
import { deprecationNotice } from '@ui5/webcomponents-react-base/dist/Utils';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import * as spacing from '@ui5/webcomponents-react-base/dist/spacing';
import { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';

var useDeprecationNoticeForTooltip = function useDeprecationNoticeForTooltip(component, tooltip) {
  useEffect(function () {
    if (tooltip) {
      deprecationNotice(component, '`tooltip` has been deprecated, please use the native `title` attribute instead.');
    }
  }, [tooltip]);
};

var styles = {
  helpText: {
    fontFamily: ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.sapFontSize,
    fontWeight: 'normal',
    color: ThemingParameters.sapTextColor
  },
  cardHeader: _objectSpread(_objectSpread({}, spacing.sapUiContentPadding), {}, {
    outlineOffset: '-0.125rem',
    boxShadow: ThemingParameters.sapContent_HeaderShadow,
    borderBottom: "0.0625rem solid ".concat(ThemingParameters.sapTile_SeparatorColor),
    backgroundColor: ThemingParameters.sapTile_Background,
    fontFamily: ThemingParameters.sapFontHeaderFamily,
    '&:hover': {
      backgroundColor: ThemingParameters.sapList_Hover_Background
    },
    '&:active': {
      backgroundColor: ThemingParameters.sapList_Hover_Background
    }
  }),
  arrowIndicatorShape: {
    width: 0,
    height: 0
  },
  arrowUp: {
    borderLeft: '8px solid transparent',
    borderRight: '8px solid transparent',
    borderBottom: '8px solid'
  },
  arrowDown: {
    borderLeft: '8px solid transparent',
    borderRight: '8px solid transparent',
    borderTop: '8px solid'
  },
  arrowRight: {
    borderLeft: "8px solid ",
    borderTop: '8px solid transparent',
    borderBottom: '8px solid transparent'
  },
  cardHeaderClickable: {
    cursor: 'pointer'
  },
  headerContent: {
    marginLeft: '1rem',
    marginRight: '1rem',
    position: 'relative'
  },
  headerTitles: {
    overflow: 'hidden',
    textAlign: 'left',
    whiteSpace: 'normal',
    wordWrap: 'break-word'
  },
  headerText: {
    fontFamily: ThemingParameters.sapFontHeaderFamily,
    fontWeight: 'normal',
    // was ThemingParameters.sapUiFontHeaderWeight
    fontSize: ThemingParameters.sapFontHeader5Size,
    color: ThemingParameters.sapTile_TitleTextColor,
    overflow: 'hidden',
    display: '-webkit-box',
    lineHeight: '18px',
    maxHeight: '54px'
    /* height * number of lines */
    ,
    WebkitLineClamp: '3'
    /* number of lines to show */
    ,
    WebkitBoxOrient: 'vertical'
  },
  subHeaderText: {
    overflow: 'hidden',
    fontFamily: ThemingParameters.sapFontFamily,
    fontWeight: 'normal',
    fontSize: ThemingParameters.sapFontSize,
    color: ThemingParameters.sapTile_TextColor,
    textAlign: 'left',
    whiteSpace: 'normal',
    wordWrap: 'break-word',
    textOverflow: 'ellipsis',
    marginTop: '0.5rem',
    width: '100%',
    display: '-webkit-box',
    lineHeight: '16px',
    maxHeight: '32px',
    WebkitLineClamp: '2',
    WebkitBoxOrient: 'vertical'
  },
  counter: {
    fontSize: ThemingParameters.sapFontSmallSize,
    margin: '0.188rem 0  0 1rem',
    lineHeight: 'normal',
    textAlign: 'right'
  },
  currency: {
    fontFamily: ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.sapFontSize,
    fontWeight: 'normal',
    color: ThemingParameters.sapTile_TextColor,
    overflow: 'hidden',
    marginLeft: '0.25rem',
    textAlign: 'right'
  },
  helpIcon: {
    position: 'absolute',
    right: '0',
    top: '0'
  },
  kpiContent: {
    fontWeight: 'normal',
    marginTop: '0.5rem',
    color: ThemingParameters.sapTile_TextColor,
    width: '100%',
    boxSizing: 'border-box'
  },
  valueAndUnit: {
    display: 'flex',
    alignItems: 'end',
    color: ThemingParameters.sapNeutralTextColor
  },
  value: {
    fontSize: '2rem',
    maxWidth: '135px',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    display: 'block'
  },
  unit: {
    marginLeft: '0.25rem',
    fontSize: '1rem'
  },
  indicatorAndUnit: {
    display: 'flex',
    height: '2rem',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'flex-end'
  },
  targetAndDeviation: {
    width: '60%',
    paddingBottom: '0.25rem',
    textAlign: 'right',
    fontSize: ThemingParameters.sapFontSmallSize,
    color: ThemingParameters.sapTile_TextColor
  },
  targetAndDeviationColumn: {
    maxWidth: '45%',
    marginLeft: '1rem'
  },
  targetAndDeviationValue: {
    color: ThemingParameters.sapTile_TitleTextColor,
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis'
  },
  description: {
    fontFamily: ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.sapFontSmallSize,
    fontWeight: 'normal',
    color: ThemingParameters.sapTile_TextColor,
    whiteSpace: 'normal',
    overflow: 'hidden',
    textAlign: 'left',
    textOverflow: 'ellipsis',
    marginTop: '0.25rem',
    width: '100%',
    display: '-webkit-box',
    lineHeight: '14px',
    maxHeight: '14px'
    /* height * number of lines */
    ,
    WebkitLineClamp: '1'
    /* number of lines to show */
    ,
    WebkitBoxOrient: 'vertical'
  },
  good: {
    color: ThemingParameters.sapPositiveTextColor
  },
  error: {
    color: ThemingParameters.sapNegativeTextColor
  },
  critical: {
    color: ThemingParameters.sapCriticalTextColor
  },
  none: {
    color: ThemingParameters.sapNeutralTextColor
  }
};
var styles$1 = styles;

var _excluded = ["titleText", "subtitleText", "value", "unit", "target", "deviation", "valueState", "onClick", "showIndicator", "tooltip", "className", "description", "counter", "counterState", "currency", "indicatorState", "arrowIndicator", "style"];
var useStyles = createUseStyles(styles$1, {
  name: 'AnalyticalCardHeader'
});
var AnalyticalCardHeader = /*#__PURE__*/forwardRef(function (props, ref) {
  var titleText = props.titleText,
      subtitleText = props.subtitleText,
      value = props.value,
      unit = props.unit,
      target = props.target,
      deviation = props.deviation,
      valueState = props.valueState,
      onClick = props.onClick,
      showIndicator = props.showIndicator,
      tooltip = props.tooltip,
      className = props.className,
      description = props.description,
      counter = props.counter,
      counterState = props.counterState,
      currency = props.currency,
      indicatorState = props.indicatorState,
      arrowIndicator = props.arrowIndicator,
      style = props.style,
      rest = _objectWithoutProperties(props, _excluded);

  var classes = useStyles();
  useDeprecationNoticeForTooltip('AnalyticalCardHeader', props.tooltip);
  var indicatorIcon = useMemo(function () {
    var arrowClasses = clsx(classes.arrowIndicatorShape, arrowIndicator === DeviationIndicator.Up && classes.arrowUp, arrowIndicator === DeviationIndicator.Down && classes.arrowDown, arrowIndicator === DeviationIndicator.None && classes.arrowRight, !(arrowIndicator in DeviationIndicator) && classes.arrowRight, indicatorState === ValueState.Success && classes.good, indicatorState === ValueState.Error && classes.error, indicatorState === ValueState.Warning && classes.critical, indicatorState === ValueState.Information && classes.none, indicatorState === ValueState.None && classes.none, !(indicatorState in ValueState) && classes.none);
    return /*#__PURE__*/React.createElement("div", {
      className: arrowClasses
    });
  }, [arrowIndicator, indicatorState, classes]);
  var headerClasses = clsx(classes.cardHeader, onClick && classes.cardHeaderClickable, className);
  var valueAndUnitClasses = clsx(classes.valueAndUnit, valueState === ValueState.Error && classes.error, valueState === ValueState.Warning && classes.critical, valueState === ValueState.Success && classes.good);
  var shouldRenderContent = [value, unit, deviation, target].some(function (v) {
    return !!v;
  });
  var i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: headerClasses,
    title: tooltip,
    style: style
  }, rest, {
    onClick: onClick
  }), /*#__PURE__*/React.createElement("div", {
    className: classes.headerContent
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.headerTitles
  }, /*#__PURE__*/React.createElement(FlexBox, {
    justifyContent: FlexBoxJustifyContent.SpaceBetween,
    wrap: FlexBoxWrap.NoWrap
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.headerText
  }, titleText), counter && /*#__PURE__*/React.createElement(ObjectStatus, {
    className: classes.counter,
    state: counterState
  }, counter)), (subtitleText || currency) && /*#__PURE__*/React.createElement("div", {
    className: classes.subHeaderText
  }, subtitleText, currency && " | ".concat(currency))), shouldRenderContent && /*#__PURE__*/React.createElement(FlexBox, {
    direction: FlexBoxDirection.Row,
    className: classes.kpiContent,
    alignItems: FlexBoxAlignItems.End
  }, /*#__PURE__*/React.createElement(FlexBox, {
    direction: FlexBoxDirection.Row
  }, /*#__PURE__*/React.createElement("div", {
    className: valueAndUnitClasses
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.value
  }, value), /*#__PURE__*/React.createElement("div", {
    className: classes.indicatorAndUnit
  }, showIndicator && indicatorIcon, /*#__PURE__*/React.createElement("div", {
    className: classes.unit
  }, unit)))), /*#__PURE__*/React.createElement(FlexBox, {
    direction: FlexBoxDirection.Row,
    wrap: FlexBoxWrap.NoWrap,
    className: classes.targetAndDeviation
  }, target && /*#__PURE__*/React.createElement(FlexBox, {
    direction: FlexBoxDirection.Column,
    className: classes.targetAndDeviationColumn,
    wrap: FlexBoxWrap.NoWrap
  }, /*#__PURE__*/React.createElement("span", null, i18nBundle.getText(TARGET)), /*#__PURE__*/React.createElement("span", {
    className: classes.targetAndDeviationValue
  }, target)), deviation && /*#__PURE__*/React.createElement(FlexBox, {
    direction: FlexBoxDirection.Column,
    className: classes.targetAndDeviationColumn,
    wrap: FlexBoxWrap.NoWrap
  }, /*#__PURE__*/React.createElement("span", null, i18nBundle.getText(DEVIATION)), /*#__PURE__*/React.createElement("span", {
    className: classes.targetAndDeviationValue
  }, deviation)))), description && /*#__PURE__*/React.createElement("div", {
    className: classes.description
  }, description)));
});
AnalyticalCardHeader.displayName = 'AnalyticalCardHeader';
AnalyticalCardHeader.defaultProps = {
  arrowIndicator: DeviationIndicator.None,
  indicatorState: ValueState.None,
  valueState: ValueState.None,
  counterState: ValueState.None
};

export { AnalyticalCardHeader };
//# sourceMappingURL=AnalyticalCardHeader.js.map
