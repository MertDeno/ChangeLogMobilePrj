import _extends from '@babel/runtime/helpers/extends';
import _toPropertyKey from '@babel/runtime/helpers/toPropertyKey';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import { useI18nBundle, useSyncRef, useIsRTL } from '@ui5/webcomponents-react-base/dist/hooks';
import { deprecationNotice, enrichEventWithDetails, debounce } from '@ui5/webcomponents-react-base/dist/Utils';
import { BASIC, CANCEL, CLEAR, RESTORE, SAVE, SEARCH_FOR_FILTERS, SHOW_ON_FILTER_BAR, FILTERS, GO, SHOW_FILTER_BAR, HIDE_FILTER_BAR, ADAPT_FILTERS } from '@ui5/webcomponents-react/dist/assets/i18n/i18n-defaults';
import { BusyIndicator } from '@ui5/webcomponents-react/dist/BusyIndicator';
import { BusyIndicatorSize } from '@ui5/webcomponents-react/dist/BusyIndicatorSize';
import { Button } from '@ui5/webcomponents-react/dist/Button';
import { ButtonDesign } from '@ui5/webcomponents-react/dist/ButtonDesign';
import { Toolbar } from '@ui5/webcomponents-react/dist/Toolbar';
import { ToolbarSeparator } from '@ui5/webcomponents-react/dist/ToolbarSeparator';
import { ToolbarSpacer } from '@ui5/webcomponents-react/dist/ToolbarSpacer';
import { ToolbarStyle } from '@ui5/webcomponents-react/dist/ToolbarStyle';
import clsx from 'clsx';
import React, { useEffect, cloneElement, useState, useRef, useCallback, Children, forwardRef } from 'react';
import { createUseStyles } from 'react-jss';
import { isIE } from '@ui5/webcomponents-base/dist/Device.js';
import { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';
import '@ui5/webcomponents-icons/dist/search.js';
import { Bar } from '@ui5/webcomponents-react/dist/Bar';
import { BarDesign } from '@ui5/webcomponents-react/dist/BarDesign';
import { CheckBox } from '@ui5/webcomponents-react/dist/CheckBox';
import { Dialog } from '@ui5/webcomponents-react/dist/Dialog';
import { FlexBox } from '@ui5/webcomponents-react/dist/FlexBox';
import { FlexBoxAlignItems } from '@ui5/webcomponents-react/dist/FlexBoxAlignItems';
import { FlexBoxDirection } from '@ui5/webcomponents-react/dist/FlexBoxDirection';
import { FlexBoxJustifyContent } from '@ui5/webcomponents-react/dist/FlexBoxJustifyContent';
import { Icon } from '@ui5/webcomponents-react/dist/Icon';
import { Input } from '@ui5/webcomponents-react/dist/Input';
import { Text } from '@ui5/webcomponents-react/dist/Text';
import { Title } from '@ui5/webcomponents-react/dist/Title';
import { TitleLevel } from '@ui5/webcomponents-react/dist/TitleLevel';
import { createPortal } from 'react-dom';
import { CssSizeVariables } from '@ui5/webcomponents-react-base/dist/CssSizeVariables';
import { sapUiContentPadding } from '@ui5/webcomponents-react-base/dist/spacing';

var useDeprecationNoticeForTooltip = function useDeprecationNoticeForTooltip(component, tooltip) {
  useEffect(function () {
    if (tooltip) {
      deprecationNotice(component, '`tooltip` has been deprecated, please use the native `title` attribute instead.');
    }
  }, [tooltip]);
};

var styles$2 = {
  outerContainer: {
    background: ThemingParameters.sapObjectHeader_Background,
    '--_ui5_input_width': '100%'
  },
  outerContainerWithToolbar: {
    paddingTop: '0.5rem',
    paddingLeft: '2rem',
    paddingRight: '2rem',
    paddingBottom: '1px',
    boxShadow: ThemingParameters.sapContent_HeaderShadow
  },
  filterBarHeader: {
    alignItems: 'center',
    display: 'flex',
    background: ThemingParameters.sapObjectHeader_Background,
    minHeight: '3rem',
    paddingBottom: '0.5rem',
    boxShadow: 'none',
    flexWrap: 'wrap'
  },
  filterArea: {
    display: 'flex',
    alignItems: 'center',
    flexWrap: 'wrap',
    paddingTop: '1rem',
    marginBottom: '1rem',
    background: ThemingParameters.sapObjectHeader_Background,
    transition: 'max-height 0.2s ease-out, opacity 0.2s ease-in'
  },
  filterAreaClosed: {
    maxHeight: '0',
    opacity: 0,
    padding: 0,
    margin: 0,
    overflowY: 'auto'
  },
  filterAreaOpen: {
    opacity: 1
  },
  showFiltersBtn: {
    minWidth: '108px'
  },
  loadingContainer: {
    marginBottom: '0.5rem',
    display: 'flex',
    width: '100%',
    justifyContent: 'center'
  },
  filterBarButtons: {
    display: 'flex',
    alignItems: 'center',
    position: 'absolute',
    right: 0,
    marginBottom: '1rem',
    '& > *:not(:first-child)': {
      marginLeft: '0.25rem'
    },
    '& > *:not(:last-child)': {
      marginRight: '0.25rem'
    }
  },
  spacer: {
    height: 0,
    marginTop: 0,
    flexGrow: 1,
    flexShrink: 0,
    maxWidth: isIE() ? '26.25rem' : 'calc(var(--_ui5wcr_filter_group_item_flex_basis) * 2)',
    flexBasis: isIE() ? '13.125rem' : 'calc(var(--_ui5wcr_filter_group_item_flex_basis))'
  },
  lastSpacer: {
    height: 'var(--_ui5_input_height)',
    flexGrow: 1,
    flexShrink: 0,
    maxWidth: isIE() ? '26.25rem' : 'calc(var(--_ui5wcr_filter_group_item_flex_basis) * 2)',
    flexBasis: isIE() ? '13.125rem' : 'calc(var(--_ui5wcr_filter_group_item_flex_basis))'
  }
};
var styles$3 = styles$2;

var stopPropagation = function stopPropagation(e) {
  var _e$stopImmediatePropa;

  e.stopPropagation();
  (_e$stopImmediatePropa = e.stopImmediatePropagation) === null || _e$stopImmediatePropa === void 0 ? void 0 : _e$stopImmediatePropa.call(e);
};

var styles = {
  dialog: _objectSpread(_objectSpread({}, sapUiContentPadding), {}, {
    display: 'flex',
    flexDirection: 'column',
    maxWidth: '960px',
    width: '80vw',
    maxHeight: '70vh',
    '--_ui5_input_width': '100%'
  }),
  header: {
    width: '100%',
    padding: '0.25rem 1rem 0 1rem',
    '& *': {
      margin: '0.25rem 0 0.25rem 0'
    },
    '& ui5-input': {
      width: '100%'
    }
  },
  footer: {
    '& :not(:last-child)': {
      marginRight: '0.25rem'
    }
  },
  groupContainer: {
    display: 'flex',
    flexDirection: 'column'
  },
  groupTitle: {
    maxWidth: '85%',
    marginRight: '0.5rem'
  },
  filters: {
    padding: '1rem 0 2rem 0'
  },
  singleFilter: {
    display: 'grid',
    gridTemplateColumns: "auto minmax(".concat(CssSizeVariables.sapWcrCheckBoxWidthHeight, ",7%)"),
    gridTemplateRows: 'auto',
    gridColumnGap: '0.5rem',
    '@media(max-width:700px)': {
      marginTop: '0.5rem'
    },
    '& ui5-checkbox': {
      placeSelf: 'center start',
      '@media(max-width:700px)': {
        marginTop: '0.8rem',
        paddingLeft: 0,
        placeSelf: 'end start'
      }
    }
  },
  fbSearch: {
    '@media(min-width:700px)': {
      display: 'grid',
      gridTemplateColumns: '20% auto 7%',
      gridTemplateRows: 'auto',
      gridRowGap: '0.5rem',
      gridColumnGap: '0.5rem'
    },
    paddingBottom: '2rem',
    width: '100%',
    '& ui5-input': {
      width: '100%'
    }
  }
};
var styles$1 = styles;

var inputTagNames = new Set(['UI5-COMBOBOX', 'UI5-DATE-PICKER', 'UI5-DATERANGE-PICKER', 'UI5-DATETIME-PICKER', 'UI5-DURATION-PICKER', 'UI5-INPUT', 'UI5-MULTI-INPUT', 'UI5-RATING-INDICATOR', 'UI5-STEP-INPUT', 'UI5-TIME-PICKER']);
var filterValue = function filterValue(ref, child) {
  var tagName = ref.tagName;
  var filterItemProps = {};

  if (inputTagNames.has(tagName)) {
    var _ref$value;

    filterItemProps = {
      value: (_ref$value = ref.value) !== null && _ref$value !== void 0 ? _ref$value : ''
    };
  }

  if (tagName === 'UI5-SELECT' || tagName === 'UI5-MULTI-COMBOBOX') {
    var _child$props$children;

    var selectedIndices = Array.from(ref.children).map(function (item, index) {
      return item.selected ? index : false;
    }).filter(function (el) {
      return el !== false;
    });
    var selectedIndicesSet = new Set(selectedIndices);
    var options = (_child$props$children = child.props.children.props.children) === null || _child$props$children === void 0 ? void 0 : _child$props$children.map(function (item, index) {
      if (selectedIndicesSet.has(index)) {
        return /*#__PURE__*/cloneElement(item, {
          selected: true
        });
      }

      return /*#__PURE__*/cloneElement(item, {
        selected: false
      });
    });
    filterItemProps = {
      children: options
    };
  }

  if (tagName === 'UI5-SWITCH' || tagName === 'UI5-CHECKBOX') {
    filterItemProps = {
      checked: ref.checked
    };
  }

  return filterItemProps;
};
var renderSearchWithValue = function renderSearchWithValue(renderSearchElement, searchValue) {
  var _renderSearchElement$;

  return /*#__PURE__*/cloneElement(renderSearchElement, {
    value: searchValue !== null && searchValue !== void 0 ? searchValue : renderSearchElement === null || renderSearchElement === void 0 ? void 0 : (_renderSearchElement$ = renderSearchElement.props) === null || _renderSearchElement$ === void 0 ? void 0 : _renderSearchElement$.value,
    'data-component-name': 'FilterBarSearch'
  });
};
var syncRef = function syncRef(ref, node) {
  if (ref) {
    if (typeof ref === 'function') {
      ref(node);
    } else if (ref.hasOwnProperty('current')) {
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      ref.current = node;
    }
  }
};

var useStyles$1 = createUseStyles(styles$1, {
  name: 'FilterBarDialog'
});
var FilterDialog = function FilterDialog(props) {
  var filterBarRefs = props.filterBarRefs,
      open = props.open,
      handleDialogClose = props.handleDialogClose,
      children = props.children,
      showClearButton = props.showClearButton,
      showRestoreButton = props.showRestoreButton,
      showGoButton = props.showGoButton,
      showSearch = props.showSearch,
      renderFBSearch = props.renderFBSearch,
      handleClearFilters = props.handleClearFilters,
      handleRestoreFilters = props.handleRestoreFilters,
      handleDialogSave = props.handleDialogSave,
      searchValue = props.searchValue,
      handleSearchValueChange = props.handleSearchValueChange,
      onGo = props.onGo,
      handleSelectionChange = props.handleSelectionChange,
      handleDialogSearch = props.handleDialogSearch,
      handleDialogCancel = props.handleDialogCancel,
      portalContainer = props.portalContainer;
  var classes = useStyles$1();

  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      searchString = _useState2[0],
      setSearchString = _useState2[1];

  var searchRef = useRef(null);

  var _useState3 = useState({}),
      _useState4 = _slicedToArray(_useState3, 2),
      toggledFilters = _useState4[0],
      setToggledFilters = _useState4[1];

  var dialogRefs = useRef({});
  var dialogRef = useRef();
  var dialogSearchRef = useRef(null);
  var i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  var basicText = i18nBundle.getText(BASIC);
  var cancelText = i18nBundle.getText(CANCEL);
  var clearText = i18nBundle.getText(CLEAR);
  var restoreText = i18nBundle.getText(RESTORE);
  var saveText = i18nBundle.getText(SAVE);
  var searchForFiltersText = i18nBundle.getText(SEARCH_FOR_FILTERS);
  var showOnFilterBarText = i18nBundle.getText(SHOW_ON_FILTER_BAR);
  var filtersTitle = i18nBundle.getText(FILTERS);
  var goText = i18nBundle.getText(GO);
  useEffect(function () {
    if (open) {
      dialogRef.current.show();
    }
  }, [open]);

  var handleSearch = function handleSearch(e) {
    if (handleDialogSearch) {
      handleDialogSearch(enrichEventWithDetails(e, {
        value: e.target.value,
        element: e.target
      }));
    }

    setSearchString(e.target.value);
  };

  var handleSave = function handleSave(e) {
    var go = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (renderFBSearch) {
      var _searchRef$current;

      handleSearchValueChange((_searchRef$current = searchRef.current) === null || _searchRef$current === void 0 ? void 0 : _searchRef$current.children[1].value);
    }

    if (go) {
      handleDialogSave(e, dialogRefs.current, toggledFilters, true);
    } else {
      handleDialogSave(e, dialogRefs.current, toggledFilters);
    }
  };

  var handleClose = function handleClose(e) {
    stopPropagation(e);

    if (!showGoButton) {
      handleSave(e);
      return;
    }

    handleDialogClose(e);
  };

  var handleDialogGo = function handleDialogGo(e) {
    if (typeof onGo === 'function') {
      handleSave(e, true);
    }
  };

  var handleCancel = function handleCancel(e) {
    if (handleDialogCancel) {
      handleDialogCancel(enrichEventWithDetails(e));
    }

    handleDialogClose(e);
  };

  var getFilterElements = function getFilterElements() {
    var _searchRef$current2;

    var search = (_searchRef$current2 = searchRef.current) === null || _searchRef$current2 === void 0 ? void 0 : _searchRef$current2.querySelector("[data-component-name=\"FilterBarSearch\"]");
    return {
      filters: dialogFilterRefs.current,
      search: search,
      dialogSearch: dialogSearchRef.current
    };
  };

  var handleRestore = function handleRestore(e) {
    handleRestoreFilters(e, 'dialog', getFilterElements());
  };

  var handleClear = function handleClear(e) {
    if (typeof handleClearFilters === 'function') {
      handleClearFilters(enrichEventWithDetails(e, getFilterElements()));
    }
  };

  var renderChildren = function renderChildren() {
    return children.filter(function (item) {
      var _item$props, _item$props2, _item$props2$label;

      return !!(item !== null && item !== void 0 && item.props) && ((_item$props = item.props) === null || _item$props === void 0 ? void 0 : _item$props.visible) && (((_item$props2 = item.props) === null || _item$props2 === void 0 ? void 0 : (_item$props2$label = _item$props2.label) === null || _item$props2$label === void 0 ? void 0 : _item$props2$label.toLowerCase().includes(searchString.toLowerCase())) || searchString.length === 0);
    }).map(function (child) {
      var filterBarItemRef = filterBarRefs.current[child.key];
      var filterItemProps = {};

      if (filterBarItemRef) {
        filterItemProps = filterValue(filterBarItemRef, child);
      }

      if (!child.props.children) return child;
      return /*#__PURE__*/cloneElement(child, {
        children: _objectSpread(_objectSpread({}, child.props.children), {}, {
          props: _objectSpread(_objectSpread({}, child.props.children.props), filterItemProps),
          ref: function ref(node) {
            if (node) {
              dialogRefs.current[child.key] = node;
              syncRef(child.props.children.ref, node);
            }
          }
        })
      });
    });
  };

  var handleCheckBoxChange = useCallback(function (element) {
    return function (e) {
      if (handleSelectionChange) {
        handleSelectionChange(enrichEventWithDetails(e, {
          element: element,
          checked: e.target.checked
        }));
      }

      setToggledFilters(function (old) {
        return _objectSpread(_objectSpread({}, old), {}, _defineProperty({}, element.key, e.target.checked));
      });
    };
  }, [setToggledFilters, handleSelectionChange]);
  var dialogFilterRefs = useRef([]);

  var renderGroups = function renderGroups() {
    var groups = {};
    var dialogFilters = [];
    Children.forEach(renderChildren(), function (child) {
      var _child$props$groupNam;

      var childGroups = (_child$props$groupNam = child.props.groupName) !== null && _child$props$groupNam !== void 0 ? _child$props$groupNam : 'default';

      if (groups[childGroups]) {
        groups[childGroups].push(child);
      } else {
        groups[childGroups] = [child];
      }
    });
    var filterGroups = Object.keys(groups).sort(function (x, y) {
      return x === 'default' ? -1 : y === 'role' ? 1 : 0;
    }).map(function (item, index) {
      var filters = groups[item].map(function (el) {
        return /*#__PURE__*/React.createElement("div", {
          className: classes.singleFilter,
          key: "".concat(el.key, "-container"),
          ref: function ref(node) {
            if (node) {
              var _node$children, _node$children$, _node$children$$child, _node$children$$child2, _node$children$$child3;

              dialogFilters.push((_node$children = node.children) === null || _node$children === void 0 ? void 0 : (_node$children$ = _node$children[0]) === null || _node$children$ === void 0 ? void 0 : (_node$children$$child = _node$children$.children) === null || _node$children$$child === void 0 ? void 0 : (_node$children$$child2 = _node$children$$child[0]) === null || _node$children$$child2 === void 0 ? void 0 : (_node$children$$child3 = _node$children$$child2.children) === null || _node$children$$child3 === void 0 ? void 0 : _node$children$$child3[1]);
            }
          }
        }, el, /*#__PURE__*/React.createElement(CheckBox, {
          role: "checkbox",
          checked: el.props.visibleInFilterBar || el.props.required || el.type.displayName !== 'FilterGroupItem',
          onChange: handleCheckBoxChange(el),
          disabled: el.props.required || el.type.displayName !== 'FilterGroupItem'
        }));
      });
      return /*#__PURE__*/React.createElement("div", {
        className: classes.groupContainer,
        key: item
      }, /*#__PURE__*/React.createElement(FlexBox, {
        justifyContent: FlexBoxJustifyContent.SpaceBetween,
        alignItems: FlexBoxAlignItems.Center
      }, /*#__PURE__*/React.createElement(Title, {
        level: TitleLevel.H5,
        className: index === 0 ? classes.groupTitle : '',
        title: item === 'default' ? basicText : item
      }, item === 'default' ? basicText : item), index === 0 && /*#__PURE__*/React.createElement(Text, {
        wrapping: false
      }, showOnFilterBarText)), /*#__PURE__*/React.createElement("div", {
        className: classes.filters
      }, filters));
    });
    dialogFilterRefs.current = dialogFilters;
    return filterGroups;
  };

  return /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(Dialog, {
    ref: dialogRef,
    header: /*#__PURE__*/React.createElement(FlexBox, {
      direction: FlexBoxDirection.Column,
      alignItems: FlexBoxAlignItems.Center,
      className: classes.header
    }, /*#__PURE__*/React.createElement(Title, {
      level: TitleLevel.H4,
      title: filtersTitle
    }, filtersTitle), showSearch && /*#__PURE__*/React.createElement(Input, {
      placeholder: searchForFiltersText,
      onInput: handleSearch,
      icon: /*#__PURE__*/React.createElement(Icon, {
        name: "search"
      }),
      ref: dialogSearchRef
    })),
    footer: /*#__PURE__*/React.createElement(Bar, {
      design: BarDesign.Footer,
      endContent: /*#__PURE__*/React.createElement(FlexBox, {
        justifyContent: FlexBoxJustifyContent.End,
        className: classes.footer
      }, showGoButton && /*#__PURE__*/React.createElement(Button, {
        onClick: handleDialogGo,
        design: ButtonDesign.Emphasized,
        title: goText
      }, goText), showClearButton && /*#__PURE__*/React.createElement(Button, {
        onClick: handleClear
      }, clearText), showRestoreButton && /*#__PURE__*/React.createElement(Button, {
        onClick: handleRestore
      }, restoreText), /*#__PURE__*/React.createElement(Button, {
        onClick: handleSave
      }, saveText), /*#__PURE__*/React.createElement(Button, {
        design: ButtonDesign.Transparent,
        onClick: handleCancel
      }, cancelText))
    }),
    onAfterClose: handleClose
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.dialog,
    role: "dialog"
  }, renderFBSearch && /*#__PURE__*/React.createElement("div", {
    className: classes.fbSearch,
    ref: searchRef
  }, /*#__PURE__*/React.createElement("span", null), renderSearchWithValue(renderFBSearch, searchValue)), renderGroups())), portalContainer);
};

var _excluded = ["children", "useToolbar", "loading", "filterBarExpanded", "considerGroupName", "filterContainerWidth", "activeFiltersCount", "showClearOnFB", "showGoOnFB", "showGo", "showFilterConfiguration", "showRestoreOnFB", "showClearButton", "showRestoreButton", "showSearchOnFiltersDialog", "hideToggleFiltersButton", "style", "className", "tooltip", "slot", "search", "variants", "as", "portalContainer", "onToggleFilters", "onFiltersDialogOpen", "onFiltersDialogCancel", "onFiltersDialogClose", "onFiltersDialogSave", "onFiltersDialogClear", "onClear", "onFiltersDialogSelectionChange", "onFiltersDialogSearch", "onGo", "onRestore"];

var resizeObserverEntryWidth = function resizeObserverEntryWidth(entry) {
  if (entry.borderBoxSize) {
    var _entry$borderBoxSize$, _entry$borderBoxSize;

    // Firefox implements `borderBoxSize` as a single content rect, rather than an array
    return Array.isArray(entry.borderBoxSize) ? (_entry$borderBoxSize$ = entry.borderBoxSize[0]) === null || _entry$borderBoxSize$ === void 0 ? void 0 : _entry$borderBoxSize$.inlineSize : (_entry$borderBoxSize = entry.borderBoxSize) === null || _entry$borderBoxSize === void 0 ? void 0 : _entry$borderBoxSize.inlineSize;
  } // Safari doesn't implement `borderBoxSize`


  return entry.target.getBoundingClientRect().width;
};

var useStyles = createUseStyles(styles$3, {
  name: 'FilterBar'
});
/**
 * The `FilterBar` displays filters in a user-friendly manner to populate values for a query. It consists of a row containing the `VariantManagement`, the related buttons, and an area underneath displaying the filters. The filters are arranged in a logical row that is divided depending on the space available and the width of the filters. The area containing the filters can be hidden or shown using the "Hide FilterBar / Show FilterBar" button, the "Filters" button shows the filter dialog.
 In this dialog, the consumer has full control over the FilterBar. The filters in this dialog are displayed in one column and organized in groups. Each filter can be marked as visible in the FilterBar by selecting "Add to FilterBar".
 */

var FilterBar = /*#__PURE__*/forwardRef(function (props, ref) {
  var _search$props2, _search$props5, _searchRef$current2, _ref9;

  var children = props.children,
      useToolbar = props.useToolbar,
      loading = props.loading,
      filterBarExpanded = props.filterBarExpanded,
      considerGroupName = props.considerGroupName,
      filterContainerWidth = props.filterContainerWidth,
      activeFiltersCount = props.activeFiltersCount,
      showClearOnFB = props.showClearOnFB,
      showGoOnFB = props.showGoOnFB,
      showGo = props.showGo,
      showFilterConfiguration = props.showFilterConfiguration,
      showRestoreOnFB = props.showRestoreOnFB,
      showClearButton = props.showClearButton,
      showRestoreButton = props.showRestoreButton,
      showSearchOnFiltersDialog = props.showSearchOnFiltersDialog,
      hideToggleFiltersButton = props.hideToggleFiltersButton,
      style = props.style,
      className = props.className,
      tooltip = props.tooltip,
      slot = props.slot,
      search = props.search,
      variants = props.variants,
      as = props.as,
      portalContainer = props.portalContainer,
      onToggleFilters = props.onToggleFilters,
      onFiltersDialogOpen = props.onFiltersDialogOpen,
      onFiltersDialogCancel = props.onFiltersDialogCancel,
      onFiltersDialogClose = props.onFiltersDialogClose,
      onFiltersDialogSave = props.onFiltersDialogSave,
      onFiltersDialogClear = props.onFiltersDialogClear,
      onClear = props.onClear,
      onFiltersDialogSelectionChange = props.onFiltersDialogSelectionChange,
      onFiltersDialogSearch = props.onFiltersDialogSearch,
      onGo = props.onGo,
      onRestore = props.onRestore,
      rest = _objectWithoutProperties(props, _excluded);

  useDeprecationNoticeForTooltip('FilterBar', props.tooltip);

  var _useState = useState(useToolbar ? filterBarExpanded : true),
      _useState2 = _slicedToArray(_useState, 2),
      showFilters = _useState2[0],
      setShowFilters = _useState2[1];

  var _useState3 = useState(true),
      _useState4 = _slicedToArray(_useState3, 2),
      mountFilters = _useState4[0],
      setMountFilters = _useState4[1];

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      dialogOpen = _useState6[0],
      setDialogOpen = _useState6[1];

  var _useState7 = useState(undefined),
      _useState8 = _slicedToArray(_useState7, 2),
      searchValue = _useState8[0],
      setSearchValue = _useState8[1];

  var searchRef = useRef(null);
  var filterRefs = useRef({});

  var _useState9 = useState({}),
      _useState10 = _slicedToArray(_useState9, 2),
      dialogRefs = _useState10[0],
      setDialogRefs = _useState10[1];

  var _useState11 = useState({}),
      _useState12 = _slicedToArray(_useState11, 2),
      toggledFilters = _useState12[0],
      setToggledFilters = _useState12[1];

  var prevVisibleInFilterBarProps = useRef({});
  var prevSearchInputPropsValueRef = useRef();
  var filterBarButtonsRef = useRef(null);
  var filterAreaRef = useRef(null);

  var _useSyncRef = useSyncRef(ref),
      _useSyncRef2 = _slicedToArray(_useSyncRef, 2),
      componentRef = _useSyncRef2[0],
      filterBarRef = _useSyncRef2[1];

  var i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  var clearText = i18nBundle.getText(CLEAR);
  var restoreText = i18nBundle.getText(RESTORE);
  var showFilterBarText = i18nBundle.getText(SHOW_FILTER_BAR);
  var hideFilterBarText = i18nBundle.getText(HIDE_FILTER_BAR);
  var goText = i18nBundle.getText(GO);
  var filtersText = useToolbar ? i18nBundle.getText(FILTERS) : i18nBundle.getText(ADAPT_FILTERS);
  var isRtl = useIsRTL(filterBarRef);
  var transformRightRTL = isRtl ? 'Left' : 'Right';
  useEffect(function () {
    Children.toArray(children).forEach(function (item) {
      setToggledFilters(function (prev) {
        if (!item.props.hasOwnProperty('visibleInFilterBar') && (prev === null || prev === void 0 ? void 0 : prev[item.key]) === undefined) {
          return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, item.key, true));
        }

        if (item.props.hasOwnProperty('visibleInFilterBar')) {
          return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, item.key, item.props.visibleInFilterBar));
        }

        return prev;
      });
    });
  }, [children, setToggledFilters]);
  useEffect(function () {
    setShowFilters(useToolbar ? filterBarExpanded : true);
  }, [setShowFilters, useToolbar, filterBarExpanded]);
  var classes = useStyles();
  var filterAreaClasses = clsx(classes.filterArea, showFilters ? classes.filterAreaOpen : classes.filterAreaClosed);

  var getFilterElements = function getFilterElements() {
    var _searchRef$current;

    var search = (_searchRef$current = searchRef.current) === null || _searchRef$current === void 0 ? void 0 : _searchRef$current.querySelector("[data-component-name=\"FilterBarSearch\"]");
    return {
      filters: filterRefs !== null && filterRefs !== void 0 && filterRefs.current ? Object.values(filterRefs.current).filter(Boolean) : [],
      search: search
    };
  };

  var handleToggle = function handleToggle(e) {
    if (onToggleFilters) {
      onToggleFilters(enrichEventWithDetails(e, _objectSpread({
        visible: !showFilters
      }, getFilterElements())));
    }

    setShowFilters(!showFilters);
  };

  var _useState13 = useState(false),
      _useState14 = _slicedToArray(_useState13, 2),
      executeGo = _useState14[0],
      setExecuteGo = _useState14[1];

  var handleDialogSave = function handleDialogSave(e, newRefs, updatedToggledFilters) {
    var go = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    setDialogRefs(newRefs);

    var details = _objectSpread({
      elements: newRefs,
      toggledElements: _objectSpread(_objectSpread({}, toggledFilters), updatedToggledFilters)
    }, getFilterElements());

    if (typeof onGo === 'function' && go) {
      setExecuteGo(enrichEventWithDetails(e, details));
    }

    setToggledFilters(function (old) {
      return _objectSpread(_objectSpread({}, old), updatedToggledFilters);
    });

    if (onFiltersDialogSave) {
      onFiltersDialogSave(enrichEventWithDetails(e, details));
    }

    handleDialogClose(e);
  };

  var handleDialogOpen = function handleDialogOpen(e) {
    setDialogOpen(true);

    if (onFiltersDialogOpen) {
      onFiltersDialogOpen(e);
    }
  };

  var handleDialogClose = function handleDialogClose(e) {
    if (onFiltersDialogClose) {
      onFiltersDialogClose(enrichEventWithDetails(e));
    }

    setDialogOpen(false);
  };

  var handleGoOnFb = function handleGoOnFb(e) {
    if (typeof onGo === 'function') {
      onGo(enrichEventWithDetails(e, _objectSpread({
        elements: filterRefs.current
      }, getFilterElements())));
    }
  };

  var safeChildren = function safeChildren() {
    if (Object.keys(toggledFilters).length > 0) {
      return Children.toArray(children).map(function (child) {
        if ((toggledFilters === null || toggledFilters === void 0 ? void 0 : toggledFilters[child.key]) !== undefined) {
          return /*#__PURE__*/cloneElement(child, {
            visibleInFilterBar: toggledFilters[child.key]
          });
        }

        return child;
      });
    }

    return Children.toArray(children);
  };

  var prevChildren = useRef({});

  var renderChildren = function renderChildren() {
    var _childProps;

    var childProps = (_childProps = {
      considerGroupName: considerGroupName
    }, _defineProperty(_childProps, 'data-in-fb', true), _defineProperty(_childProps, 'data-with-toolbar', useToolbar), _childProps);
    return safeChildren().filter(function (item) {
      var _item$props, _item$props2;

      return (item === null || item === void 0 ? void 0 : (_item$props = item.props) === null || _item$props === void 0 ? void 0 : _item$props.visible) && ((_item$props2 = item.props) === null || _item$props2 === void 0 ? void 0 : _item$props2.visibleInFilterBar);
    }).map(function (child) {
      var _prevChildren$current, _child$props$children, _child$props$children2, _prevChildren$current2, _prevChildren$current3, _child$props$children3, _child$props$children4, _prevChildren$current4, _prevChildren$current5, _child$props$children5, _child$props$children6, _child$props$children7, _child$props$children8, _child$props$children9, _prevChildren$current6, _prevChildren$current7, _prevChildren$current8;

      // necessary because of varying widths of input elements
      if (filterContainerWidth) {
        childProps.style = _objectSpread({
          width: filterContainerWidth
        }, child.props.style);
      }

      if (!showFilterConfiguration) {
        return /*#__PURE__*/cloneElement(child, _objectSpread({}, childProps));
      }

      prevVisibleInFilterBarProps.current[child.key] = child.props.visibleInFilterBar;
      var filterItemProps = {};

      if (Object.keys(dialogRefs).length > 0) {
        var dialogItemRef = dialogRefs[child.key];

        if (dialogItemRef) {
          filterItemProps = filterValue(dialogItemRef, child);
        }
      }

      if (!child.props.children) {
        return /*#__PURE__*/cloneElement(child, _objectSpread({}, childProps));
      }

      if ((_prevChildren$current = prevChildren.current) !== null && _prevChildren$current !== void 0 && _prevChildren$current[child.key] && ( //Input
      ((_child$props$children = child.props.children) === null || _child$props$children === void 0 ? void 0 : (_child$props$children2 = _child$props$children.props) === null || _child$props$children2 === void 0 ? void 0 : _child$props$children2.value) !== ((_prevChildren$current2 = prevChildren.current) === null || _prevChildren$current2 === void 0 ? void 0 : (_prevChildren$current3 = _prevChildren$current2[child.key]) === null || _prevChildren$current3 === void 0 ? void 0 : _prevChildren$current3.value) || //Checkbox
      ((_child$props$children3 = child.props.children) === null || _child$props$children3 === void 0 ? void 0 : (_child$props$children4 = _child$props$children3.props) === null || _child$props$children4 === void 0 ? void 0 : _child$props$children4.checked) !== ((_prevChildren$current4 = prevChildren.current) === null || _prevChildren$current4 === void 0 ? void 0 : (_prevChildren$current5 = _prevChildren$current4[child.key]) === null || _prevChildren$current5 === void 0 ? void 0 : _prevChildren$current5.checked) || //Selectable
      Array.isArray((_child$props$children5 = child.props.children) === null || _child$props$children5 === void 0 ? void 0 : (_child$props$children6 = _child$props$children5.props) === null || _child$props$children6 === void 0 ? void 0 : _child$props$children6.children) && ((_child$props$children7 = child.props.children) === null || _child$props$children7 === void 0 ? void 0 : (_child$props$children8 = _child$props$children7.props) === null || _child$props$children8 === void 0 ? void 0 : (_child$props$children9 = _child$props$children8.children) === null || _child$props$children9 === void 0 ? void 0 : _child$props$children9.map(function (item) {
        return item.props.selected;
      }).join(',')) !== (prevChildren === null || prevChildren === void 0 ? void 0 : (_prevChildren$current6 = prevChildren.current) === null || _prevChildren$current6 === void 0 ? void 0 : (_prevChildren$current7 = _prevChildren$current6[child.key]) === null || _prevChildren$current7 === void 0 ? void 0 : (_prevChildren$current8 = _prevChildren$current7.children) === null || _prevChildren$current8 === void 0 ? void 0 : _prevChildren$current8.map(function (item) {
        return item.props.selected;
      }).join(',')))) {
        // @ts-ignore
        var _child$key = child.key;
            dialogRefs[_child$key];
            var _rest = _objectWithoutProperties(dialogRefs, [_child$key].map(_toPropertyKey));

        setDialogRefs(_rest);
      }

      prevChildren.current[child.key] = child.props.children.props;
      return /*#__PURE__*/cloneElement(child, _objectSpread(_objectSpread({}, childProps), {}, {
        children: _objectSpread(_objectSpread({}, child.props.children), {}, {
          props: _objectSpread(_objectSpread({}, child.props.children.props), filterItemProps),
          ref: function ref(node) {
            filterRefs.current[child.key] = node;
            if (!dialogOpen) syncRef(child.props.children.ref, node);
          }
        })
      }));
    });
  };

  var handleRestoreFilters = function handleRestoreFilters(e, source, filterElements) {
    if (source === 'dialog' && showGo) {
      setDialogOpen(false);
      setDialogOpen(true);
    } else if (source === 'filterBar' && showGoOnFB) {
      setMountFilters(false);
      setMountFilters(true);
    }

    if (onRestore) {
      onRestore(enrichEventWithDetails(e, _objectSpread({
        source: source
      }, filterElements)));
    }
  };

  var handleFBRestore = function handleFBRestore(e) {
    handleRestoreFilters(e, 'filterBar', getFilterElements());
  };

  var handleClear = function handleClear(e) {
    if (typeof onClear === 'function') {
      onClear(enrichEventWithDetails(e, getFilterElements()));
    }
  };

  var cssClasses = clsx(classes.outerContainer, className, useToolbar && classes.outerContainerWithToolbar);
  useEffect(function () {
    var _search$props;

    prevSearchInputPropsValueRef.current = search === null || search === void 0 ? void 0 : (_search$props = search.props) === null || _search$props === void 0 ? void 0 : _search$props.value;
  }, [search === null || search === void 0 ? void 0 : (_search$props2 = search.props) === null || _search$props2 === void 0 ? void 0 : _search$props2.value]);
  var prevSearchInputPropsValue = prevSearchInputPropsValueRef.current;
  useEffect(function () {
    var _search$props3;

    if (prevSearchInputPropsValue !== (search === null || search === void 0 ? void 0 : (_search$props3 = search.props) === null || _search$props3 === void 0 ? void 0 : _search$props3.value)) {
      var _search$props4;

      setSearchValue(search === null || search === void 0 ? void 0 : (_search$props4 = search.props) === null || _search$props4 === void 0 ? void 0 : _search$props4.value);
    }
  }, [prevSearchInputPropsValue, search === null || search === void 0 ? void 0 : (_search$props5 = search.props) === null || _search$props5 === void 0 ? void 0 : _search$props5.value]);
  var ToolbarButtons = /*#__PURE__*/React.createElement(React.Fragment, null, showClearOnFB && /*#__PURE__*/React.createElement(Button, {
    onClick: handleClear,
    design: ButtonDesign.Transparent
  }, clearText), showRestoreOnFB && /*#__PURE__*/React.createElement(Button, {
    onClick: handleFBRestore,
    design: ButtonDesign.Transparent
  }, restoreText), !hideToggleFiltersButton && useToolbar && /*#__PURE__*/React.createElement(Button, {
    onClick: handleToggle,
    design: ButtonDesign.Transparent,
    className: classes.showFiltersBtn
  }, showFilters ? hideFilterBarText : showFilterBarText), showFilterConfiguration && /*#__PURE__*/React.createElement(Button, {
    onClick: handleDialogOpen,
    "aria-haspopup": "dialog"
  }, "".concat(filtersText).concat(activeFiltersCount && parseInt(activeFiltersCount, 10) > 0 ? " (".concat(activeFiltersCount, ")") : '')), showGoOnFB && /*#__PURE__*/React.createElement(Button, {
    onClick: handleGoOnFb,
    design: ButtonDesign.Emphasized
  }, goText));
  var hasButtons = ToolbarButtons.props.children.some(Boolean);

  var _useState15 = useState(undefined),
      _useState16 = _slicedToArray(_useState15, 2),
      filterBarButtonsWidth = _useState16[0],
      setFilterBarButtonsWidth = _useState16[1];

  var _useState17 = useState(undefined),
      _useState18 = _slicedToArray(_useState17, 2),
      filterAreaWidth = _useState18[0],
      setFilterAreaWidth = _useState18[1];

  var _useState19 = useState(undefined),
      _useState20 = _slicedToArray(_useState19, 2),
      firstChildWidth = _useState20[0],
      setFirstChildWidth = _useState20[1];

  useEffect(function () {
    var filterAreaObserver = new ResizeObserver(debounce(function (_ref) {
      var _area$target, _area$target$children;

      var _ref2 = _slicedToArray(_ref, 1),
          area = _ref2[0];

      var firstChild = (_area$target = area.target) === null || _area$target === void 0 ? void 0 : (_area$target$children = _area$target.children) === null || _area$target$children === void 0 ? void 0 : _area$target$children[0];

      if (firstChild && firstChild.offsetWidth !== firstChildWidth) {
        setFirstChildWidth(firstChild.offsetWidth + 16
        /*margin*/
        );
      }
    }, 100));

    if (!useToolbar && filterAreaRef.current) {
      filterAreaObserver.observe(filterAreaRef.current);
    }

    return function () {
      filterAreaObserver.disconnect();
    };
  }, [filterAreaRef.current, useToolbar]);
  useEffect(function () {
    var filterAreaObserver = new ResizeObserver(debounce(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 1),
          area = _ref4[0];

      var filterWidth = resizeObserverEntryWidth(area);

      if (filterWidth !== filterBarButtonsWidth) {
        setFilterAreaWidth(filterWidth);
      }
    }, 100));

    if (!useToolbar && filterAreaRef.current) {
      filterAreaObserver.observe(filterAreaRef.current);
    }

    return function () {
      filterAreaObserver.disconnect();
    };
  }, [filterAreaWidth, filterAreaRef.current, useToolbar]);
  useEffect(function () {
    var filterBarButtonsObserver = new ResizeObserver(debounce(function (_ref5) {
      var _ref6 = _slicedToArray(_ref5, 1),
          buttons = _ref6[0];

      var buttonsWidth = resizeObserverEntryWidth(buttons);

      if (buttonsWidth !== filterBarButtonsWidth) {
        setFilterBarButtonsWidth(buttonsWidth);
      }
    }, 100));

    if (!useToolbar && filterBarButtonsRef.current) {
      filterBarButtonsObserver.observe(filterBarButtonsRef.current);
    }

    return function () {
      filterBarButtonsObserver.disconnect();
    };
  }, [filterBarButtonsRef.current, useToolbar, filterBarButtonsWidth]);
  var calculatedChildren = renderChildren();
  useEffect(function () {
    if (executeGo) {
      setExecuteGo(function (prevEvent) {
        onGo(prevEvent);
        return false;
      });
    }
  }, [executeGo]); // calculates the number of spacers depending on the available width inside the row

  var renderSpacers = function renderSpacers() {
    if (firstChildWidth && filterAreaWidth && filterBarButtonsWidth) {
      var spacers = [];
      var filterItemsWidth = calculatedChildren.length * firstChildWidth; //early return if enough space is available

      if (filterAreaWidth - filterBarButtonsWidth > filterItemsWidth) {
        return null;
      }

      var usedSpaceLastRow = filterItemsWidth % filterAreaWidth;
      var emptySpaceLastRow = filterAreaWidth - usedSpaceLastRow; // deduct width of buttons container of the empty space in the last row to calculate number of spacers

      var numberOfSpacers = Math.floor((emptySpaceLastRow - filterBarButtonsWidth) / firstChildWidth);

      for (var i = 0; i < numberOfSpacers; i++) {
        spacers.push( /*#__PURE__*/React.createElement("div", {
          key: "filter-spacer-".concat(i),
          className: classes.spacer,
          style: _defineProperty({}, "margin".concat(transformRightRTL), '1rem')
        }));
      }

      return spacers;
    }

    return null;
  };

  var CustomTag = as;
  return /*#__PURE__*/React.createElement(React.Fragment, null, dialogOpen && showFilterConfiguration && /*#__PURE__*/React.createElement(FilterDialog, {
    filterBarRefs: filterRefs,
    open: dialogOpen,
    handleDialogClose: handleDialogClose,
    onGo: onGo,
    handleRestoreFilters: handleRestoreFilters,
    searchValue: (_searchRef$current2 = searchRef.current) === null || _searchRef$current2 === void 0 ? void 0 : _searchRef$current2.children[0].value,
    handleSearchValueChange: setSearchValue,
    showClearButton: showClearButton,
    showRestoreButton: showRestoreButton,
    showSearch: showSearchOnFiltersDialog,
    renderFBSearch: search,
    handleClearFilters: onFiltersDialogClear,
    handleSelectionChange: onFiltersDialogSelectionChange,
    handleDialogSave: handleDialogSave,
    showGoButton: showGo,
    handleDialogSearch: onFiltersDialogSearch,
    handleDialogCancel: onFiltersDialogCancel,
    portalContainer: portalContainer
  }, safeChildren()), /*#__PURE__*/React.createElement(CustomTag, _extends({
    ref: componentRef,
    className: cssClasses,
    style: _objectSpread(_defineProperty({}, '--_ui5wcr_filter_group_item_flex_basis', filterContainerWidth), style),
    title: tooltip,
    slot: slot
  }, rest), loading ? /*#__PURE__*/React.createElement(BusyIndicator, {
    active: true,
    className: classes.loadingContainer,
    size: BusyIndicatorSize.Large
  }) : /*#__PURE__*/React.createElement(React.Fragment, null, useToolbar && /*#__PURE__*/React.createElement(Toolbar, {
    className: classes.filterBarHeader,
    toolbarStyle: ToolbarStyle.Clear
  }, variants, variants && search && /*#__PURE__*/React.createElement(ToolbarSeparator, null), search && /*#__PURE__*/React.createElement("div", {
    ref: searchRef
  }, renderSearchWithValue(search, searchValue)), hasButtons && /*#__PURE__*/React.createElement(ToolbarSpacer, null), ToolbarButtons), mountFilters && /*#__PURE__*/React.createElement("div", {
    className: filterAreaClasses,
    style: {
      position: 'relative'
    },
    ref: filterAreaRef
  }, calculatedChildren, !useToolbar && /*#__PURE__*/React.createElement(React.Fragment, null, renderSpacers(), /*#__PURE__*/React.createElement("div", {
    style: _defineProperty({
      width: filterBarButtonsWidth ? "".concat(filterBarButtonsWidth, "px") : '120px',
      minWidth: filterBarButtonsWidth ? "".concat(filterBarButtonsWidth, "px") : '120px'
    }, "margin".concat(transformRightRTL), '1rem'),
    className: classes.lastSpacer
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.filterBarButtons,
    ref: filterBarButtonsRef,
    style: (_ref9 = {}, _defineProperty(_ref9, "margin".concat(transformRightRTL), '1rem'), _defineProperty(_ref9, "left", isRtl ? 0 : 'auto'), _defineProperty(_ref9, "right", isRtl ? 'auto' : 0), _ref9)
  }, ToolbarButtons)))))));
});
FilterBar.defaultProps = {
  as: 'div',
  filterContainerWidth: '13.125rem',
  useToolbar: true,
  filterBarExpanded: true,
  portalContainer: document.body
};
FilterBar.displayName = 'FilterBar';

export { FilterBar };
//# sourceMappingURL=FilterBar.js.map
