import _extends from '@babel/runtime/helpers/extends';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import { useI18nBundle, useIsRTL, useIsomorphicLayoutEffect } from '@ui5/webcomponents-react-base/dist/hooks';
import { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';
import { deprecationNotice, enrichEventWithDetails, debounce } from '@ui5/webcomponents-react-base/dist/Utils';
import { FlexBox } from '@ui5/webcomponents-react/dist/FlexBox';
import { GlobalStyleClasses } from '@ui5/webcomponents-react/dist/GlobalStyleClasses';
import { TableScaleWidthMode } from '@ui5/webcomponents-react/dist/TableScaleWidthMode';
import { TableSelectionBehavior } from '@ui5/webcomponents-react/dist/TableSelectionBehavior';
import { TableSelectionMode } from '@ui5/webcomponents-react/dist/TableSelectionMode';
import { TableVisibleRowCountMode } from '@ui5/webcomponents-react/dist/TableVisibleRowCountMode';
import clsx from 'clsx';
import React, { useEffect, useRef, useCallback, useState, forwardRef, Fragment, useMemo, isValidElement } from 'react';
import { createUseStyles } from 'react-jss';
import { makeRenderer, actions, defaultOrderByFn, useTable, useFilters, useGlobalFilter, useColumnOrder, useGroupBy, useSortBy, useExpanded, useRowSelect, useResizeColumns } from 'react-table';
import { CssSizeVariables, CssSizeVariablesNames } from '@ui5/webcomponents-react-base/dist/CssSizeVariables';
import { useVirtual } from 'react-virtual';
import '@ui5/webcomponents-icons/dist/filter.js';
import '@ui5/webcomponents-icons/dist/group-2.js';
import '@ui5/webcomponents-icons/dist/sort-ascending.js';
import '@ui5/webcomponents-icons/dist/sort-descending.js';
import { Icon } from '@ui5/webcomponents-react/dist/Icon';
import { Text } from '@ui5/webcomponents-react/dist/Text';
import '@ui5/webcomponents-icons/dist/decline.js';
import { CLEAR_SORTING, SORT_ASCENDING, SORT_DESCENDING, GROUP, UNGROUP, DRAG_TO_RESIZE } from '@ui5/webcomponents-react/dist/assets/i18n/i18n-defaults';
import { CustomListItem } from '@ui5/webcomponents-react/dist/CustomListItem';
import { FlexBoxAlignItems } from '@ui5/webcomponents-react/dist/FlexBoxAlignItems';
import { List } from '@ui5/webcomponents-react/dist/List';
import { ListItemType } from '@ui5/webcomponents-react/dist/ListItemType';
import { Popover } from '@ui5/webcomponents-react/dist/Popover';
import { PopoverHorizontalAlign } from '@ui5/webcomponents-react/dist/PopoverHorizontalAlign';
import { PopoverPlacementType } from '@ui5/webcomponents-react/dist/PopoverPlacementType';
import { StandardListItem } from '@ui5/webcomponents-react/dist/StandardListItem';
import { TextAlign } from '@ui5/webcomponents-react/dist/TextAlign';
import { createPortal } from 'react-dom';
import { VerticalAlign } from '@ui5/webcomponents-react/dist/VerticalAlign';
import { Input } from '@ui5/webcomponents-react/dist/Input';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { isIE } from '@ui5/webcomponents-react-base/dist/Device';
import { FlexBoxDirection } from '@ui5/webcomponents-react/dist/FlexBoxDirection';
import { FlexBoxWrap } from '@ui5/webcomponents-react/dist/FlexBoxWrap';
import { Loader } from '@ui5/webcomponents-react/dist/Loader';
import ContentLoader from 'react-content-loader';
import { ValueState } from '@ui5/webcomponents-react/dist/ValueState';
import { CheckBox } from '@ui5/webcomponents-react/dist/CheckBox';
import '@ui5/webcomponents-icons/dist/navigation-down-arrow.js';
import '@ui5/webcomponents-icons/dist/navigation-right-arrow.js';
import { Title } from '@ui5/webcomponents-react/dist/Title';

var useDeprecationNoticeForTooltip = function useDeprecationNoticeForTooltip(component, tooltip) {
  useEffect(function () {
    if (tooltip) {
      deprecationNotice(component, '`tooltip` has been deprecated, please use the native `title` attribute instead.');
    }
  }, [tooltip]);
};

var styles$7 = {
  table: {
    position: 'relative',
    width: '100%',
    maxWidth: '100%',
    overflowY: 'hidden',
    overflowX: 'auto',
    height: '100%',
    minHeight: '3rem',
    fontFamily: ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.sapFontSize,
    fontWeight: 'normal',
    backgroundColor: ThemingParameters.sapList_Background
  },
  tableHeaderRow: {
    height: CssSizeVariables.sapWcrAnalyticalTableRowHeight,
    display: 'inline-flex',
    '& div:first-child $th': {
      borderLeft: "1px solid ".concat(ThemingParameters.sapList_BorderColor)
    }
  },
  hasNavigationIndicator: {
    '& $tableHeaderRow :nth-last-child(2) $th': {
      borderRight: 'none'
    },
    '& $tr :nth-last-child(2)': {
      borderRight: 'none'
    }
  },
  tableHeaderBackgroundElement: {
    boxSizing: 'border-box',
    position: 'absolute',
    left: 0,
    right: 0,
    height: CssSizeVariables.sapWcrAnalyticalTableRowHeight,
    backgroundColor: ThemingParameters.sapList_HeaderBackground,
    borderTop: "1px solid ".concat(ThemingParameters.sapList_BorderColor),
    borderBottom: "1px solid ".concat(ThemingParameters.sapList_BorderColor)
  },
  th: {
    height: CssSizeVariables.sapWcrAnalyticalTableRowHeight,
    color: ThemingParameters.sapList_HeaderTextColor,
    backgroundColor: ThemingParameters.sapList_HeaderBackground,
    borderTop: "1px solid ".concat(ThemingParameters.sapList_BorderColor),
    borderBottom: "1px solid ".concat(ThemingParameters.sapList_BorderColor),
    borderRight: "1px solid ".concat(ThemingParameters.sapList_BorderColor),
    padding: "0 0.5rem",
    textAlign: 'start',
    boxSizing: 'border-box',
    '&[data-column-id="__ui5wcr__internal_highlight_column"]': {
      borderRight: '1px solid transparent'
    },
    '&:last-child': {
      '& [data-resizer]': {
        transform: 'translateX(0px)'
      }
    },
    '&:focus': {
      '&[data-column-id="__ui5wcr__internal_selection_column"]': {
        borderLeft: '1px solid transparent'
      },
      outlineOffset: "calc(-1 * ".concat(ThemingParameters.sapContent_FocusWidth, ")"),
      outline: "".concat(ThemingParameters.sapContent_FocusWidth, " ").concat(ThemingParameters.sapContent_FocusStyle, " ").concat(ThemingParameters.sapContent_FocusColor)
    }
  },
  tbody: {
    position: 'relative',
    overflowX: 'hidden',
    overflowY: 'auto',
    scrollBarWidth: 'none !important',
    '-ms-overflow-style': 'none',
    '&::-webkit-scrollbar': {
      width: 0,
      height: 0
    }
  },
  alternateRowColor: {
    backgroundColor: ThemingParameters.sapList_AlternatingBackground
  },
  tr: {
    position: 'absolute',
    top: 0,
    left: 0,
    width: '100%',
    color: ThemingParameters.sapList_TextColor,
    borderBottom: "1px solid ".concat(ThemingParameters.sapList_BorderColor),
    boxSizing: 'border-box',
    display: 'flex',
    willChange: 'transform',
    '&:hover': {
      backgroundColor: ThemingParameters.sapList_Hover_Background
    },
    '&[data-is-selected]': {
      borderBottom: "1px solid ".concat(ThemingParameters.sapList_SelectionBorderColor),
      backgroundColor: ThemingParameters.sapList_SelectionBackgroundColor
    },
    '&[data-is-selected]:hover': {
      backgroundColor: ThemingParameters.sapList_Hover_SelectionBackground
    }
  },
  trActive: {
    '&:hover': {
      cursor: 'pointer'
    },
    '&:active': {
      backgroundColor: ThemingParameters.sapList_Active_Background,
      '& $tableCell': {
        borderRight: "1px solid ".concat(ThemingParameters.sapList_Active_Background),
        color: "".concat(ThemingParameters.sapList_Active_TextColor),
        '--sapTextColor': ThemingParameters.sapList_Active_TextColor
      }
    }
  },
  tableGroupHeader: {
    '&$tr': {
      backgroundColor: "".concat(ThemingParameters.sapList_TableGroupHeaderBackground),
      border: "1px solid ".concat(ThemingParameters.sapList_TableGroupHeaderBorderColor),
      color: ThemingParameters.sapList_TextColor,
      '& $tableCell': {
        borderRight: 'none'
      }
    }
  },
  tableCell: {
    height: '100%',
    boxSizing: 'border-box',
    borderRight: "1px solid ".concat(ThemingParameters.sapList_BorderColor),
    display: 'inline-flex',
    padding: '0 0.5rem',
    '&:first-child': {
      borderLeft: "1px solid ".concat(ThemingParameters.sapList_BorderColor)
    },
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    alignItems: 'center',
    position: 'relative',
    '&:focus': {
      outlineOffset: "calc(-1 * ".concat(ThemingParameters.sapContent_FocusWidth, ")"),
      outline: "".concat(ThemingParameters.sapContent_FocusWidth, " ").concat(ThemingParameters.sapContent_FocusStyle, " ").concat(ThemingParameters.sapContent_FocusColor)
    }
  },
  noDataContainer: {
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    height: '100%',
    backgroundColor: ThemingParameters.sapList_Background,
    width: '100%',
    boxSizing: 'border-box',
    color: ThemingParameters.sapList_TextColor,
    fontFamily: ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.sapFontSize,
    fontWeight: 'normal',
    borderBottom: "1px solid ".concat(ThemingParameters.sapList_BorderColor)
  },
  valueStateSuccess: {
    backgroundColor: ThemingParameters.sapSuccessColor
  },
  valueStateError: {
    backgroundColor: ThemingParameters.sapErrorColor
  },
  valueStateWarning: {
    backgroundColor: ThemingParameters.sapWarningColor
  },
  valueStateInformation: {
    backgroundColor: ThemingParameters.sapInformationColor
  }
};
var styles$8 = styles$7;

var stopPropagation = function stopPropagation(e) {
  var _e$stopImmediatePropa;

  e.stopPropagation();
  (_e$stopImmediatePropa = e.stopImmediatePropagation) === null || _e$stopImmediatePropa === void 0 ? void 0 : _e$stopImmediatePropa.call(e);
};

var styles$6 = {
  popover: {
    fontWeight: 'normal'
  },
  filter: {
    padding: '0px 1rem',
    height: 'var(--_ui5_custom_list_item_height)',
    borderBottom: "1px solid ".concat(ThemingParameters.sapList_BorderColor)
  },
  filterIcon: {
    paddingRight: '0.5rem',
    minWidth: '1rem',
    minHeight: '1rem'
  }
};
var useStyles$8 = createUseStyles(styles$6, {
  name: 'ColumnHeaderModal'
});
var ColumnHeaderModal = function ColumnHeaderModal(props) {
  var column = props.column,
      onSort = props.onSort,
      onGroupBy = props.onGroupBy,
      open = props.open,
      setPopoverOpen = props.setPopoverOpen,
      targetRef = props.targetRef,
      portalContainer = props.portalContainer,
      isRtl = props.isRtl;
  var classes = useStyles$8();
  var showFilter = column.canFilter;
  var showGroup = column.canGroupBy;
  var showSort = column.canSort;
  var ref = useRef(null);
  var listRef = useRef(null);
  var Filter = column.Filter;
  var i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  var clearSortingText = i18nBundle.getText(CLEAR_SORTING);
  var sortAscendingText = i18nBundle.getText(SORT_ASCENDING);
  var sortDescendingText = i18nBundle.getText(SORT_DESCENDING);
  var groupText = i18nBundle.getText(GROUP);
  var ungroupText = i18nBundle.getText(UNGROUP);
  var handleSort = useCallback(function (e) {
    var sortType = e.detail.item.getAttribute('data-sort');

    switch (sortType) {
      case 'asc':
        column.toggleSortBy(false);

        if (typeof onSort === 'function') {
          onSort(enrichEventWithDetails(e, {
            column: column,
            sortDirection: sortType
          }));
        }

        break;

      case 'desc':
        column.toggleSortBy(true);

        if (typeof onSort === 'function') {
          onSort(enrichEventWithDetails(e, {
            column: column,
            sortDirection: sortType
          }));
        }

        break;

      case 'clear':
        column.clearSortBy();

        if (typeof onSort === 'function') {
          onSort(enrichEventWithDetails(e, {
            column: column,
            sortDirection: sortType
          }));
        }

        break;

      case 'group':
        var willGroup = !column.isGrouped;
        column.toggleGroupBy(willGroup);

        if (typeof onGroupBy === 'function') {
          onGroupBy(enrichEventWithDetails(e, {
            column: column,
            isGrouped: willGroup
          }));
        }

        break;
    }

    if (ref.current) {
      ref.current.close();
    }
  }, [column, ref, onGroupBy, onSort]);
  var isSortedAscending = column.isSorted && column.isSortedDesc === false;
  var isSortedDescending = column.isSorted && column.isSortedDesc === true;
  useEffect(function () {
    var popoverInstance = ref.current;

    if (open) {
      popoverInstance === null || popoverInstance === void 0 ? void 0 : popoverInstance.showAt(targetRef.current);
    }
  }, [open, targetRef.current, ref.current]);
  var onAfterClose = useCallback(function (e) {
    var _ref$current;

    stopPropagation(e);
    ref === null || ref === void 0 ? void 0 : (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.close();
    setPopoverOpen(false);
  }, [setPopoverOpen]);

  var onAfterOpen = function onAfterOpen() {
    var _listRef$current, _listRef$current$chil, _listRef$current$chil2;

    (_listRef$current = listRef.current) === null || _listRef$current === void 0 ? void 0 : (_listRef$current$chil = _listRef$current.children) === null || _listRef$current$chil === void 0 ? void 0 : (_listRef$current$chil2 = _listRef$current$chil[0]) === null || _listRef$current$chil2 === void 0 ? void 0 : _listRef$current$chil2.focus();
  };

  var horizontalAlign = function () {
    switch (column.hAlign) {
      case TextAlign.Begin:
        return isRtl ? PopoverHorizontalAlign.Right : PopoverHorizontalAlign.Left;

      case TextAlign.End:
        return isRtl ? PopoverHorizontalAlign.Left : PopoverHorizontalAlign.Right;

      case TextAlign.Left:
        return PopoverHorizontalAlign.Left;

      case TextAlign.Right:
        return PopoverHorizontalAlign.Right;

      case TextAlign.Center:
        return PopoverHorizontalAlign.Center;

      default:
        return isRtl ? PopoverHorizontalAlign.Right : PopoverHorizontalAlign.Left;
    }
  }();

  if (!open) return null;
  return /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(Popover, {
    hideArrow: true,
    horizontalAlign: horizontalAlign,
    placementType: PopoverPlacementType.Bottom,
    ref: ref,
    className: classes.popover,
    onAfterClose: onAfterClose,
    onAfterOpen: onAfterOpen
  }, /*#__PURE__*/React.createElement(List, {
    onItemClick: handleSort,
    ref: listRef
  }, isSortedAscending && /*#__PURE__*/React.createElement(StandardListItem, {
    type: ListItemType.Active,
    icon: "decline",
    "data-sort": "clear"
  }, clearSortingText), showSort && !isSortedAscending && /*#__PURE__*/React.createElement(StandardListItem, {
    type: ListItemType.Active,
    icon: "sort-ascending",
    "data-sort": "asc"
  }, sortAscendingText), showSort && !isSortedDescending && /*#__PURE__*/React.createElement(StandardListItem, {
    type: ListItemType.Active,
    icon: "sort-descending",
    "data-sort": "desc"
  }, sortDescendingText), isSortedDescending && /*#__PURE__*/React.createElement(StandardListItem, {
    type: ListItemType.Active,
    icon: "decline",
    "data-sort": "clear"
  }, clearSortingText), showFilter && !column.isGrouped &&
  /*#__PURE__*/
  //todo maybe need to enhance Input selection after ui5-webcomponents issue has been fixed
  React.createElement(CustomListItem, {
    type: ListItemType.Inactive
  }, /*#__PURE__*/React.createElement(FlexBox, {
    alignItems: FlexBoxAlignItems.Center,
    className: classes.filter
  }, /*#__PURE__*/React.createElement(Icon, {
    name: "filter",
    className: classes.filterIcon
  }), /*#__PURE__*/React.createElement(Filter, {
    column: column,
    popoverRef: ref
  }))), showGroup && /*#__PURE__*/React.createElement(StandardListItem, {
    type: ListItemType.Active,
    icon: "group-2",
    "data-sort": 'group'
  }, column.isGrouped ? ungroupText : groupText))), portalContainer);
};
ColumnHeaderModal.displayName = 'ColumnHeaderModal';

var styles$5 = {
  header: {
    height: '100%',
    display: 'flex',
    justifyContent: 'begin',
    alignItems: 'center',
    textAlign: 'left',
    fontFamily: ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.sapFontSize,
    fontWeight: 'normal',
    color: ThemingParameters.sapList_TextColor,
    background: ThemingParameters.sapList_HeaderBackground,
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    maxWidth: '100%',
    position: 'relative',
    width: '100%',
    overflowX: 'hidden',
    overflowY: 'hidden',
    boxSizing: 'border-box',
    '&[data-h-align="End"]': {
      '& $text': {
        textAlign: 'end'
      }
    }
  },
  text: {
    width: '100%',
    textAlign: 'start'
  },
  iconContainer: {
    display: 'inline-block',
    position: 'absolute',
    color: ThemingParameters.sapContent_IconColor
  }
};
var useStyles$7 = createUseStyles(styles$5, {
  name: 'TableColumnHeader'
});
var ColumnHeader = function ColumnHeader(props) {
  var classes = useStyles$7();
  var id = props.id,
      children = props.children,
      column = props.column,
      className = props.className,
      style = props.style,
      onSort = props.onSort,
      onGroupBy = props.onGroupBy,
      onDragEnter = props.onDragEnter,
      onDragOver = props.onDragOver,
      onDragStart = props.onDragStart,
      onDrop = props.onDrop,
      onDragEnd = props.onDragEnd,
      headerTooltip = props.headerTooltip,
      isDraggable = props.isDraggable,
      dragOver = props.dragOver,
      role = props.role,
      virtualColumn = props.virtualColumn,
      isRtl = props.isRtl,
      columnIndex = props.columnIndex,
      visibleColumnIndex = props.visibleColumnIndex,
      onClick = props.onClick,
      onKeyDown = props.onKeyDown,
      portalContainer = props.portalContainer;
  var isFiltered = column.filterValue && column.filterValue.length > 0;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      popoverOpen = _useState2[0],
      setPopoverOpen = _useState2[1];

  var tooltip = function () {
    if (headerTooltip) {
      return headerTooltip;
    }

    if (typeof children === 'string') {
      return children;
    }

    return null;
  }();

  var textStyle = function () {
    var margin = 0;
    if (column.isSorted) margin++;
    if (column.isGrouped) margin++;
    if (isFiltered) margin++;

    if (margin === 0) {
      return {};
    }

    if (margin > 0) margin += 0.5;

    if (isRtl) {
      return {
        marginLeft: "".concat(margin, "rem")
      };
    }

    return {
      marginRight: "".concat(margin, "rem")
    };
  }();

  var hasPopover = column.canGroupBy || column.canSort || column.canFilter;

  var handleHeaderCellClick = function handleHeaderCellClick(e) {
    onClick === null || onClick === void 0 ? void 0 : onClick(e);

    if (hasPopover) {
      setPopoverOpen(true);
    }
  };

  var directionStyles = isRtl ? {
    right: 0,
    transform: "translateX(-".concat(virtualColumn.start, "px)")
  } : {
    left: 0,
    transform: "translateX(".concat(virtualColumn.start, "px)")
  };
  var iconContainerDirectionStyles = isRtl ? {
    left: '0.5rem'
  } : {
    right: '0.5rem'
  };

  var handleHeaderCellKeyDown = function handleHeaderCellKeyDown(e) {
    onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(e);

    if (hasPopover && e.code === 'Enter') {
      setPopoverOpen(true);
    }

    if (e.code === 'Space') {
      e.preventDefault();
    }
  };

  var handleHeaderCellKeyUp = function handleHeaderCellKeyUp(e) {
    if (hasPopover && e.code === 'Space') {
      setPopoverOpen(true);
    }
  };

  var targetRef = useRef();
  if (!column) return null;
  return /*#__PURE__*/React.createElement("div", {
    ref: targetRef,
    style: _objectSpread({
      position: 'absolute',
      top: 0,
      width: "".concat(virtualColumn.size, "px")
    }, directionStyles)
  }, /*#__PURE__*/React.createElement("div", {
    "data-visible-column-index": visibleColumnIndex,
    "data-visible-row-index": 0,
    "data-row-index": 0,
    "data-column-index": columnIndex,
    tabIndex: -1,
    id: id,
    className: className,
    style: _objectSpread(_objectSpread({}, style), {}, {
      cursor: hasPopover ? 'pointer' : 'auto',
      borderLeft: dragOver ? "3px solid ".concat(ThemingParameters.sapSelectedColor) : undefined
    }),
    role: role,
    draggable: isDraggable,
    onDragEnter: onDragEnter,
    onDragOver: onDragOver,
    onDragStart: onDragStart,
    onDrop: onDrop,
    onDragEnd: onDragEnd,
    "data-column-id": id,
    onClick: handleHeaderCellClick,
    onKeyDown: handleHeaderCellKeyDown,
    onKeyUp: handleHeaderCellKeyUp
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.header,
    "data-h-align": column.hAlign
  }, /*#__PURE__*/React.createElement(Text, {
    title: tooltip,
    wrapping: false,
    style: textStyle,
    className: classes.text
  }, children), /*#__PURE__*/React.createElement("div", {
    className: classes.iconContainer,
    style: iconContainerDirectionStyles
  }, isFiltered && /*#__PURE__*/React.createElement(Icon, {
    name: "filter"
  }), column.isSorted && /*#__PURE__*/React.createElement(Icon, {
    name: column.isSortedDesc ? 'sort-descending' : 'sort-ascending'
  }), column.isGrouped && /*#__PURE__*/React.createElement(Icon, {
    name: "group-2"
  }))), hasPopover && targetRef.current && /*#__PURE__*/React.createElement(ColumnHeaderModal, {
    isRtl: isRtl,
    column: column,
    onSort: onSort,
    onGroupBy: onGroupBy,
    targetRef: targetRef,
    open: popoverOpen,
    setPopoverOpen: setPopoverOpen,
    portalContainer: portalContainer
  })));
};

var _excluded$1 = ["key"];
var styles$4 = {
  resizer: {
    display: 'inline-block',
    width: '3px',
    height: '100%',
    position: 'absolute',
    bottom: 0,
    top: 0,
    zIndex: 1,
    cursor: 'col-resize',
    willChange: 'transform',
    '&:hover, &:active': {
      backgroundColor: ThemingParameters.sapContent_DragAndDropActiveColor
    }
  }
};
var useStyles$6 = createUseStyles(styles$4, {
  name: 'Resizer'
});
var ColumnHeaderContainer = /*#__PURE__*/forwardRef(function (props, ref) {
  var headerProps = props.headerProps,
      headerGroup = props.headerGroup,
      onSort = props.onSort,
      onGroupByChanged = props.onGroupByChanged,
      onDragStart = props.onDragStart,
      onDragOver = props.onDragOver,
      onDrop = props.onDrop,
      onDragEnter = props.onDragEnter,
      onDragEnd = props.onDragEnd,
      dragOver = props.dragOver,
      tableRef = props.tableRef,
      visibleColumnsWidth = props.visibleColumnsWidth,
      overscanCountHorizontal = props.overscanCountHorizontal,
      resizeInfo = props.resizeInfo,
      reactWindowRef = props.reactWindowRef,
      isRtl = props.isRtl,
      portalContainer = props.portalContainer;
  var columnVirtualizer = useVirtual({
    size: visibleColumnsWidth.length,
    parentRef: tableRef,
    estimateSize: useCallback(function (index) {
      return visibleColumnsWidth[index];
    }, [visibleColumnsWidth]),
    horizontal: true,
    overscan: overscanCountHorizontal
  });
  reactWindowRef.current = _objectSpread(_objectSpread({}, reactWindowRef.current), {}, {
    horizontalScrollToOffset: columnVirtualizer.scrollToOffset,
    horizontalScrollToIndex: columnVirtualizer.scrollToIndex
  });
  var classes = useStyles$6();
  return /*#__PURE__*/React.createElement("div", _extends({}, headerProps, {
    style: {
      width: "".concat(columnVirtualizer.totalSize, "px")
    },
    ref: ref,
    "data-component-name": "AnalyticalTableHeaderRow"
  }), columnVirtualizer.virtualItems.map(function (virtualColumn, index) {
    var column = headerGroup.headers[virtualColumn.index];

    if (!column) {
      return null;
    }

    var isLastColumn = !column.disableResizing && virtualColumn.index + 1 === headerGroup.headers.length;
    var resizerDirectionStyle = isRtl ? {
      right: "".concat(column.totalFlexWidth + column.totalLeft - (isLastColumn ? 3 : 0), "px"),
      transform: 'translateX(50%)'
    } : {
      left: "".concat(column.totalFlexWidth + column.totalLeft - (isLastColumn ? 3 : 0), "px"),
      transform: 'translateX(-50%)'
    };

    var _column$getHeaderProp = column.getHeaderProps(),
        key = _column$getHeaderProp.key,
        rest = _objectWithoutProperties(_column$getHeaderProp, _excluded$1);

    return /*#__PURE__*/React.createElement(Fragment, {
      key: key
    }, column.canResize && column.getResizerProps && /*#__PURE__*/React.createElement("div", _extends({}, column.getResizerProps(), {
      "data-resizer": true,
      className: classes.resizer,
      style: resizerDirectionStyle
    })), /*#__PURE__*/React.createElement(ColumnHeader, _extends({}, rest, {
      visibleColumnIndex: index,
      columnIndex: virtualColumn.index,
      onSort: onSort,
      onGroupBy: onGroupByChanged,
      onDragStart: onDragStart,
      onDragOver: onDragOver,
      onDrop: onDrop,
      onDragEnter: onDragEnter,
      onDragEnd: onDragEnd,
      dragOver: column.id === dragOver,
      headerTooltip: column.headerTooltip,
      isDraggable: (column.canReorder || !column.disableDragAndDrop) && !resizeInfo.isResizingColumn,
      virtualColumn: virtualColumn,
      isRtl: isRtl,
      portalContainer: portalContainer
    }), column.render('Header')));
  }));
});

var DefaultFilterComponent = function DefaultFilterComponent(_ref) {
  var _column$filterValue;

  var column = _ref.column;
  var handleChange = useCallback(function (e) {
    column.setFilter(e.target.value || undefined);
  }, [column.setFilter]);
  return /*#__PURE__*/React.createElement(Input, {
    onInput: handleChange,
    value: (_column$filterValue = column.filterValue) !== null && _column$filterValue !== void 0 ? _column$filterValue : ''
  });
};

var Cell$3 = function Cell(_ref) {
  var _ref$cell = _ref.cell,
      _ref$cell$value = _ref$cell.value,
      value = _ref$cell$value === void 0 ? '' : _ref$cell$value,
      isGrouped = _ref$cell.isGrouped,
      row = _ref.row;
  var cellContent = "".concat(value !== null && value !== void 0 ? value : '');

  if (isGrouped) {
    cellContent += " (".concat(row.subRows.length, ")");
  }

  return /*#__PURE__*/React.createElement(Text, {
    wrapping: false,
    title: cellContent
  }, cellContent);
};

var tableGroupExpandCollapseIcon$1 = {
  color: 'var(--sapContent_IconColor)',
  height: '0.75rem',
  width: '0.75rem',
  padding: '0.625rem',
  display: 'block'
};
var isBrowserIe = isIE();

var getPadding = function getPadding(level) {
  switch (level) {
    case 0:
      return '0px';

    case 1:
      return isBrowserIe ? '1rem' : CssSizeVariables.sapWcrAnalyticalTableTreePaddingLevel1;

    case 2:
      return isBrowserIe ? '1.5rem' : CssSizeVariables.sapWcrAnalyticalTableTreePaddingLevel2;

    case 3:
      return isBrowserIe ? '2rem' : CssSizeVariables.sapWcrAnalyticalTableTreePaddingLevel3;

    default:
      return isBrowserIe ? "calc(2rem + ".concat(level - 3, "rem * 0.5)") : "calc(".concat(CssSizeVariables.sapWcrAnalyticalTableTreePaddingLevel3, " + ").concat(level - 3, "rem * 0.5)");
  }
};

var Expandable = function Expandable(props) {
  var cell = props.cell,
      row = props.row,
      column = props.column,
      columns = props.columns,
      webComponentsReactProperties = props.webComponentsReactProperties,
      isRtl = props.state.isRtl;
  var tableColumns = columns.filter(function (_ref) {
    var id = _ref.id;
    return id !== '__ui5wcr__internal_selection_column' && id !== '__ui5wcr__internal_highlight_column' && id !== '__ui5wcr__internal_navigation_column';
  });
  var columnIndex = tableColumns.findIndex(function (col) {
    return col.id === column.id;
  });
  var paddingRtl = isRtl ? 'paddingRight' : 'paddingLeft';
  var paddingLeft;

  if (row.canExpand) {
    paddingLeft = columnIndex === 0 ? getPadding(row.depth) : 0;
  } else {
    paddingLeft = columnIndex === 0 ? "calc(".concat(getPadding(row.depth), " + 2rem)") : 0;
  }

  var style = _defineProperty({}, paddingRtl, paddingLeft);

  var rowProps = row.getToggleRowExpandedProps();
  var subComponentExpandable = typeof (webComponentsReactProperties === null || webComponentsReactProperties === void 0 ? void 0 : webComponentsReactProperties.renderRowSubComponent) === 'function' && !!(webComponentsReactProperties !== null && webComponentsReactProperties !== void 0 && webComponentsReactProperties.renderRowSubComponent(row)) && !webComponentsReactProperties.alwaysShowSubComponent;
  return /*#__PURE__*/React.createElement(React.Fragment, null, columnIndex === 0 && (row.canExpand || subComponentExpandable) ? /*#__PURE__*/React.createElement("span", {
    onClick: rowProps.onClick,
    title: rowProps.title,
    style: _objectSpread(_objectSpread({}, rowProps.style), style)
  }, /*#__PURE__*/React.createElement(Icon, {
    interactive: true,
    name: "".concat(row.isExpanded ? 'navigation-down-arrow' : 'navigation-right-arrow'),
    style: tableGroupExpandCollapseIcon$1
  })) : /*#__PURE__*/React.createElement("span", {
    style: style
  }), cell.render('Cell'));
};

var tableGroupExpandCollapseIcon = {
  color: 'var(--sapContent_IconColor)',
  height: '0.75rem',
  width: '0.75rem',
  padding: '0.625rem',
  display: 'block'
};
var Grouped = function Grouped(props) {
  var cell = props.cell,
      row = props.row;
  var style = {};

  if (cell.column.hAlign && (cell.column.hAlign !== TextAlign.Left || cell.column.hAlign !== TextAlign.Begin)) {
    style.marginRight = 'auto';
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("span", row.getToggleRowExpandedProps({
    style: style
  }), /*#__PURE__*/React.createElement(Icon, {
    name: "".concat(row.isExpanded ? 'navigation-down-arrow' : 'navigation-right-arrow'),
    style: tableGroupExpandCollapseIcon
  })), cell.render('Cell'));
};

var PopInStyles = {
  container: {
    width: '100%'
  },
  defaultCell: {
    fontFamily: "".concat(ThemingParameters.sapFontBoldFamily),
    '& *': {
      fontFamily: "".concat(ThemingParameters.sapFontBoldFamily)
    }
  },
  header: {
    height: '16px'
  }
};
var useStyles$5 = createUseStyles(PopInStyles, {
  name: 'PopIn'
});
var PopIn = function PopIn(instance) {
  var _state$popInColumns;

  var state = instance.state,
      contentToRender = instance.contentToRender,
      cell = instance.cell,
      row = instance.row,
      internalRowHeight = instance.internalRowHeight;
  var classes = useStyles$5();
  return /*#__PURE__*/React.createElement(FlexBox, {
    direction: FlexBoxDirection.Column,
    className: classes.container
  }, /*#__PURE__*/React.createElement(FlexBox, {
    alignItems: contentToRender !== 'Grouped' && contentToRender !== 'Expandable' ? FlexBoxAlignItems.Start : FlexBoxAlignItems.Center,
    wrap: FlexBoxWrap.NoWrap,
    className: classes.defaultCell,
    style: {
      height: internalRowHeight
    }
  }, cell.render(contentToRender)), contentToRender !== 'Grouped' && ((_state$popInColumns = state.popInColumns) === null || _state$popInColumns === void 0 ? void 0 : _state$popInColumns.map(function (item) {
    var _item$column2;

    var popInInstanceProps = row.allCells.find(function (cell) {
      return cell.column.id === item.id;
    });

    var renderHeader = function renderHeader() {
      if (item.column.PopInHeader) {
        return typeof item.column.PopInHeader === 'function' ? item.column.PopInHeader(_objectSpread(_objectSpread({}, instance), popInInstanceProps)) : item.column.PopInHeader;
      }

      return typeof item.column.Header === 'function' ? makeRenderer(_objectSpread(_objectSpread({}, instance), popInInstanceProps), item.column)(item.column.Header) : item.column.Header;
    };

    var renderCell = function renderCell() {
      var _item$column;

      if ((_item$column = item.column) !== null && _item$column !== void 0 && _item$column.Cell) {
        var _cell = item.column.Cell;

        if (typeof _cell === 'string') {
          return /*#__PURE__*/React.createElement(Text, {
            wrapping: false,
            title: _cell
          }, _cell);
        }

        return makeRenderer(_objectSpread(_objectSpread(_objectSpread({}, instance), popInInstanceProps), {}, {
          isPopIn: true
        }), item.column)(item.column.Cell);
      }

      return popInInstanceProps !== null && popInInstanceProps !== void 0 && popInInstanceProps.value ? /*#__PURE__*/React.createElement(Text, {
        wrapping: false,
        title: popInInstanceProps.value
      }, popInInstanceProps.value) : null;
    };

    return /*#__PURE__*/React.createElement(FlexBox, {
      direction: FlexBoxDirection.Column,
      key: item.id
    }, ((_item$column2 = item.column) === null || _item$column2 === void 0 ? void 0 : _item$column2.Header) && /*#__PURE__*/React.createElement("div", {
      className: classes.header
    }, renderHeader(), ":"), /*#__PURE__*/React.createElement("div", {
      style: {
        height: internalRowHeight
      }
    }, popInInstanceProps && renderCell()));
  })));
};

var RepeatedValue = function RepeatedValue() {
  return null;
};

var DEFAULT_COLUMN_WIDTH = 60;

var defaultFilterMethod = function defaultFilterMethod(filter, row) {
  return new RegExp(filter.value, 'gi').test(String(row[filter.id]));
};

var DefaultColumn = {
  Filter: DefaultFilterComponent,
  minWidth: DEFAULT_COLUMN_WIDTH,
  vAlign: VerticalAlign.Middle,
  defaultFilter: defaultFilterMethod,
  Grouped: Grouped,
  Cell: Cell$3,
  Expandable: Expandable,
  RepeatedValue: RepeatedValue,
  PopIn: PopIn
};

var styles$3 = {
  loader: {
    position: 'absolute',
    top: CssSizeVariables.sapWcrAnalyticalTableRowHeight,
    left: 0,
    right: 0,
    zIndex: 1
  }
};
var useStyles$4 = createUseStyles(styles$3, {
  name: 'LoadingComponent'
});

var DefaultLoadingComponent = function DefaultLoadingComponent(_ref) {
  var style = _ref.style;
  var classes = useStyles$4();
  return /*#__PURE__*/React.createElement(Loader, {
    delay: 500,
    style: style,
    className: classes.loader
  });
};

DefaultLoadingComponent.displayName = 'DefaultLoadingComponent';

var getArrayOfLength = function getArrayOfLength(len) {
  return Array.from(Array(len).keys());
};

var TableRow = function TableRow(_ref) {
  var columns = _ref.columns,
      y = _ref.y,
      row = _ref.row;
  var columnOffset = 0;
  return /*#__PURE__*/React.createElement(React.Fragment, null, columns.map(function (column, i) {
    var el = /*#__PURE__*/React.createElement("rect", {
      key: "column-".concat(i, "-row-").concat(row),
      x: columnOffset + 2,
      y: y,
      rx: "2",
      ry: "8",
      width: column.totalWidth - 4,
      height: "16"
    });
    columnOffset += column.totalWidth;
    return el;
  }));
};

var TablePlaceholder = function TablePlaceholder(props) {
  var columns = props.columns,
      rows = props.rows,
      style = props.style,
      rowHeight = props.rowHeight,
      tableWidth = props.tableWidth,
      isRtl = props.isRtl;
  var height = rows * rowHeight;
  var innerStyles = useMemo(function () {
    return _objectSpread({
      backgroundColor: ThemingParameters.sapList_Background
    }, style);
  }, [style, ThemingParameters.sapList_Background]);
  return /*#__PURE__*/React.createElement(ContentLoader, {
    style: innerStyles,
    height: height,
    width: tableWidth,
    rtl: isRtl,
    speed: 2,
    backgroundColor: ThemingParameters.sapContent_ImagePlaceholderBackground,
    foregroundColor: ThemingParameters.sapContent_ImagePlaceholderForegroundColor,
    backgroundOpacity: ThemingParameters.sapContent_DisabledOpacity
  }, getArrayOfLength(rows).map(function (_, index) {
    return /*#__PURE__*/React.createElement(TableRow, {
      key: index,
      columns: columns,
      y: rowHeight * index + rowHeight / 2,
      row: index
    });
  }));
};
TablePlaceholder.displayName = 'TablePlaceholder';
TablePlaceholder.defaultProps = {
  rows: 5
};

var DefaultNoDataComponent = function DefaultNoDataComponent(_ref) {
  var noDataText = _ref.noDataText,
      className = _ref.className,
      style = _ref.style;
  return /*#__PURE__*/React.createElement("div", {
    className: className,
    style: style
  }, noDataText);
};

var getColumnId = function getColumnId(column) {
  return typeof column.accessor === 'string' ? column.accessor : column.id;
};

var useDragAndDrop = function useDragAndDrop(props, isRtl, setColumnOrder, columnOrder, resizeInfo, columns) {
  var onColumnsReordered = props.onColumnsReordered;

  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      dragOver = _useState2[0],
      setDragOver = _useState2[1];

  var handleDragStart = useCallback(function (e) {
    if (resizeInfo.isResizingColumn) {
      e.preventDefault();
      return;
    }

    e.dataTransfer.setData('text', e.currentTarget.dataset.columnId);
  }, [resizeInfo.isResizingColumn]);
  var handleDragOver = useCallback(function (e) {
    e.preventDefault();
  }, []);
  var handleDragEnter = useCallback(function (e) {
    setDragOver(e.currentTarget.dataset.columnId);
  }, []);
  var handleOnDrop = useCallback(function (e) {
    setDragOver('');
    var droppedColId = e.currentTarget.dataset.columnId;
    var draggedColId = e.dataTransfer.getData('text');
    if (droppedColId === draggedColId) return;
    var internalColumnOrder = columnOrder.length > 0 ? columnOrder : columns.map(function (col) {
      return getColumnId(col);
    });
    var droppedColIdx = internalColumnOrder.findIndex(function (col) {
      return col === droppedColId;
    });
    var draggedColIdx = internalColumnOrder.findIndex(function (col) {
      return col === draggedColId;
    });

    var tempCols = _toConsumableArray(internalColumnOrder);

    var targetIndex = droppedColIdx > draggedColIdx ? isRtl ? droppedColIdx : droppedColIdx - 1 : droppedColIdx;
    tempCols.splice(targetIndex, 0, tempCols.splice(draggedColIdx, 1)[0]);
    setColumnOrder(tempCols);
    var columnsNewOrder = tempCols.map(function (tempColId) {
      return columns.find(function (col) {
        return getColumnId(col) === tempColId;
      });
    });
    onColumnsReordered(enrichEventWithDetails(e, {
      columnsNewOrder: columnsNewOrder,
      column: columns[draggedColIdx]
    }));
  }, [columnOrder, onColumnsReordered, columns]);
  var handleOnDragEnd = useCallback(function () {
    setDragOver('');
  }, [dragOver]);
  return [dragOver, handleDragEnter, handleDragStart, handleDragOver, handleOnDrop, handleOnDragEnd];
};

var ROW_SAMPLE_SIZE = 20;
var DEFAULT_HEADER_NUM_CHAR = 10;
var MAX_WIDTH = 700; // a function, which approximates header px sizes given a character length

var approximateHeaderPxFromCharLength = function approximateHeaderPxFromCharLength(charLength) {
  return charLength < 15 ? Math.sqrt(charLength * 1500) : 8 * charLength;
};

var approximateContentPxFromCharLength = function approximateContentPxFromCharLength(charLength) {
  return 8 * charLength;
};

var columnsDeps$2 = function columnsDeps(deps, _ref) {
  var _ref$instance = _ref.instance,
      state = _ref$instance.state,
      webComponentsReactProperties = _ref$instance.webComponentsReactProperties,
      visibleColumns = _ref$instance.visibleColumns;
  return [].concat(_toConsumableArray(deps), [state.tableClientWidth, state.hiddenColumns.length, visibleColumns === null || visibleColumns === void 0 ? void 0 : visibleColumns.length, webComponentsReactProperties.scaleWidthMode, webComponentsReactProperties.loading]);
};

var columns$3 = function columns(_columns, _ref2) {
  var instance = _ref2.instance;

  if (!instance.state || !instance.rows) {
    return _columns;
  }

  var rows = instance.rows,
      state = instance.state;
  var hiddenColumns = state.hiddenColumns,
      totalWidth = state.tableClientWidth;
  var _instance$webComponen = instance.webComponentsReactProperties,
      scaleWidthMode = _instance$webComponen.scaleWidthMode,
      loading = _instance$webComponen.loading;
  if (_columns.length === 0 || !totalWidth) return _columns; //map columns to visibleColumns

  var visibleColumns = instance.visibleColumns.map(function (visCol) {
    var column = _columns.find(function (col) {
      return col.id === visCol.id || col.accessor !== undefined && visCol.id !== undefined && col.accessor === visCol.id;
    });

    if (column) {
      return column;
    }

    return column !== null && column !== void 0 ? column : false;
  }).filter(Boolean);

  var calculateDefaultTableWidth = function calculateDefaultTableWidth() {
    var columnsWithWidthProperties = visibleColumns.filter(function (column) {
      var _ref3, _ref4, _column$width;

      return (_ref3 = (_ref4 = (_column$width = column.width) !== null && _column$width !== void 0 ? _column$width : column.minWidth) !== null && _ref4 !== void 0 ? _ref4 : column.maxWidth) !== null && _ref3 !== void 0 ? _ref3 : false;
    }).map(function (column) {
      var _column$id;

      return {
        accessor: (_column$id = column.id) !== null && _column$id !== void 0 ? _column$id : column.accessor,
        minWidth: column.minWidth,
        width: column.width,
        maxWidth: column.maxWidth
      };
    });
    var availableWidth = totalWidth;
    var defaultColumnsCount = visibleColumns.length;
    var columnsWithFixedWidth = columnsWithWidthProperties.map(function (column) {
      var width = column.width,
          minWidth = column.minWidth,
          maxWidth = column.maxWidth,
          accessor = column.accessor;

      if (width) {
        // necessary because of default minWidth
        var acceptedWidth = accessor !== '__ui5wcr__internal_highlight_column' && accessor !== '__ui5wcr__internal_selection_column' && accessor !== '__ui5wcr__internal_navigation_column' && width < 60 ? 60 : width;
        availableWidth -= acceptedWidth;
        defaultColumnsCount--;
        return acceptedWidth;
      }

      var columnsWithMaxWidth = columnsWithWidthProperties.filter(function (item) {
        return item.maxWidth;
      });
      var aggregatedColumnsMaxWidth = columnsWithMaxWidth.reduce(function (acc, cur) {
        return acc + cur.maxWidth;
      }, 0);
      var aggregatedColumnsMinWidth = columnsWithWidthProperties.filter(function (item) {
        return item.minWidth && !item.maxWidth;
      }).reduce(function (acc, cur) {
        return acc + cur.minWidth;
      }, 0);

      if (minWidth > availableWidth / defaultColumnsCount) {
        // don't apply minWidth if enough space is available because of maxWidth properties
        if (availableWidth - aggregatedColumnsMaxWidth > aggregatedColumnsMinWidth + (visibleColumns.length - columnsWithWidthProperties.length) * 60) {
          // apply minWidth only if it's larger than the calculated available width
          if (minWidth > (availableWidth - aggregatedColumnsMaxWidth) / columnsWithMaxWidth.length) {
            availableWidth -= minWidth;
            defaultColumnsCount--;
            return minWidth;
          }

          return false;
        }

        availableWidth -= minWidth;
        defaultColumnsCount--;
        return minWidth;
      }

      if (maxWidth < availableWidth / defaultColumnsCount) {
        availableWidth -= maxWidth;
        defaultColumnsCount--;
        return maxWidth;
      }

      return false;
    }).filter(Boolean);
    var fixedWidth = columnsWithFixedWidth.reduce(function (acc, val) {
      return acc + val;
    }, 0); // check if columns are visible and table has width

    if (visibleColumns.length > 0 && totalWidth > 0) {
      // set fixedWidth as defaultWidth if all visible columns have fixed value
      if (visibleColumns.length === columnsWithFixedWidth.length) {
        return fixedWidth / visibleColumns.length;
      } // spread default columns


      if (totalWidth >= fixedWidth + defaultColumnsCount * DEFAULT_COLUMN_WIDTH) {
        return (totalWidth - fixedWidth) / defaultColumnsCount;
      }
    }

    return DEFAULT_COLUMN_WIDTH;
  };

  var hasData = instance.data.length > 0;

  if (scaleWidthMode === TableScaleWidthMode.Default || !hasData && loading) {
    var defaultWidth = calculateDefaultTableWidth();
    return _columns.map(function (column) {
      var _column$width2;

      return _objectSpread(_objectSpread({}, column), {}, {
        width: (_column$width2 = column.width) !== null && _column$width2 !== void 0 ? _column$width2 : defaultWidth
      });
    });
  }

  var rowSample = rows.slice(0, ROW_SAMPLE_SIZE);
  var columnMeta = visibleColumns.reduce(function (acc, column) {
    var _column$id5;

    if (column.id === '__ui5wcr__internal_selection_column' || column.id === '__ui5wcr__internal_highlight_column' || column.id === '__ui5wcr__internal_navigation_column') {
      var _column$id2;

      acc[(_column$id2 = column.id) !== null && _column$id2 !== void 0 ? _column$id2 : column.accessor] = {
        minHeaderWidth: column.width,
        fullWidth: column.width,
        contentCharAvg: 0
      };
      return acc;
    }

    var headerLength = typeof column.Header === 'string' ? column.Header.length : DEFAULT_HEADER_NUM_CHAR; // max character length

    var contentMaxCharLength = Math.max.apply(Math, [headerLength].concat(_toConsumableArray(rowSample.map(function (row) {
      var _row$values, _column$id3;

      var dataPoint = (_row$values = row.values) === null || _row$values === void 0 ? void 0 : _row$values[(_column$id3 = column.id) !== null && _column$id3 !== void 0 ? _column$id3 : column.accessor];

      if (dataPoint) {
        if (typeof dataPoint === 'string') return dataPoint.length;
        if (typeof dataPoint === 'number') return (dataPoint + '').length;
      }

      return 0;
    })))); // avg character length

    var contentCharAvg = rowSample.reduce(function (acc, item) {
      var _item$values, _column$id4;

      var dataPoint = (_item$values = item.values) === null || _item$values === void 0 ? void 0 : _item$values[(_column$id4 = column.id) !== null && _column$id4 !== void 0 ? _column$id4 : column.accessor];
      var val = 0;

      if (dataPoint) {
        if (typeof dataPoint === 'string') val = dataPoint.length;
        if (typeof dataPoint === 'number') val = (dataPoint + '').length;
      }

      return acc + val;
    }, 0) / rowSample.length;
    var minHeaderWidth = approximateHeaderPxFromCharLength(headerLength);
    acc[(_column$id5 = column.id) !== null && _column$id5 !== void 0 ? _column$id5 : column.accessor] = {
      minHeaderWidth: minHeaderWidth,
      fullWidth: Math.max(minHeaderWidth, approximateContentPxFromCharLength(contentMaxCharLength)),
      contentCharAvg: contentCharAvg
    };
    return acc;
  }, {});
  var totalCharNum = Object.values(columnMeta).reduce(function (acc, item) {
    return acc + item.contentCharAvg;
  }, 0);
  var reservedWidth = visibleColumns.reduce(function (acc, column) {
    var _column$id6;

    var _columnMeta = columnMeta[(_column$id6 = column.id) !== null && _column$id6 !== void 0 ? _column$id6 : column.accessor],
        minHeaderWidth = _columnMeta.minHeaderWidth,
        fullWidth = _columnMeta.fullWidth;
    return acc + Math.max(column.minWidth || 0, column.width || 0, minHeaderWidth || 0, scaleWidthMode === TableScaleWidthMode.Grow ? fullWidth : 0) || 0;
  }, 0);
  var availableWidth = totalWidth - reservedWidth;

  if (scaleWidthMode === TableScaleWidthMode.Smart || availableWidth > 0) {
    if (scaleWidthMode === TableScaleWidthMode.Grow) {
      reservedWidth = visibleColumns.reduce(function (acc, column) {
        var _column$id7;

        var minHeaderWidth = columnMeta[(_column$id7 = column.id) !== null && _column$id7 !== void 0 ? _column$id7 : column.accessor].minHeaderWidth;
        return acc + Math.max(column.minWidth || 0, column.width || 0, minHeaderWidth || 0) || 0;
      }, 0);
      availableWidth = totalWidth - reservedWidth;
    }

    return _columns.map(function (column) {
      var _column$isVisible, _column$id8, _column$id9;

      var isColumnVisible = ((_column$isVisible = column.isVisible) !== null && _column$isVisible !== void 0 ? _column$isVisible : true) && !hiddenColumns.includes((_column$id8 = column.id) !== null && _column$id8 !== void 0 ? _column$id8 : column.accessor);
      var meta = columnMeta[(_column$id9 = column.id) !== null && _column$id9 !== void 0 ? _column$id9 : column.accessor];

      if (isColumnVisible && meta) {
        var _column$width3, _column$minWidth;

        var minHeaderWidth = meta.minHeaderWidth,
            contentCharAvg = meta.contentCharAvg;
        var additionalSpaceFactor = totalCharNum > 0 ? contentCharAvg / totalCharNum : 1 / visibleColumns.length;
        var targetWidth = additionalSpaceFactor * availableWidth + minHeaderWidth;
        return _objectSpread(_objectSpread({}, column), {}, {
          width: (_column$width3 = column.width) !== null && _column$width3 !== void 0 ? _column$width3 : targetWidth,
          minWidth: (_column$minWidth = column.minWidth) !== null && _column$minWidth !== void 0 ? _column$minWidth : minHeaderWidth
        });
      }

      return column;
    });
  } // TableScaleWidthMode Grow


  return _columns.map(function (column) {
    var _column$isVisible2, _column$id10, _column$id11;

    var isColumnVisible = ((_column$isVisible2 = column.isVisible) !== null && _column$isVisible2 !== void 0 ? _column$isVisible2 : true) && !hiddenColumns.includes((_column$id10 = column.id) !== null && _column$id10 !== void 0 ? _column$id10 : column.accessor);
    var meta = columnMeta[(_column$id11 = column.id) !== null && _column$id11 !== void 0 ? _column$id11 : column.accessor];

    if (isColumnVisible && meta) {
      var _column$width4;

      var fullWidth = meta.fullWidth;
      return _objectSpread(_objectSpread({}, column), {}, {
        width: (_column$width4 = column.width) !== null && _column$width4 !== void 0 ? _column$width4 : fullWidth,
        maxWidth: MAX_WIDTH
      });
    }

    return column;
  });
};

var useDynamicColumnWidths = function useDynamicColumnWidths(hooks) {
  hooks.columns.push(columns$3);
  hooks.columnsDeps.push(columnsDeps$2);
};

var getFirstVisibleCell = function getFirstVisibleCell(target, currentlyFocusedCell, noData) {
  var firstVisibleCell = noData ? target.querySelector("div[data-visible-column-index=\"0\"][data-visible-row-index=\"0\"]") : target.querySelector("div[data-visible-column-index=\"0\"][data-visible-row-index=\"1\"]");

  if (firstVisibleCell) {
    firstVisibleCell.tabIndex = 0;
    firstVisibleCell.focus();
    currentlyFocusedCell.current = firstVisibleCell;
  }
};

var findParentCell = function findParentCell(target) {
  if (target === undefined || target === null) return;

  if (target.dataset.rowIndex !== undefined && target.dataset.columnIndex !== undefined || target.dataset.rowIndexSub !== undefined && target.dataset.columnIndexSub !== undefined) {
    return target;
  } else {
    return findParentCell(target.parentElement);
  }
};

var setFocus = function setFocus(currentlyFocusedCell, nextElement) {
  currentlyFocusedCell.current.tabIndex = -1;

  if (nextElement) {
    nextElement.tabIndex = 0;
    nextElement.focus();
    currentlyFocusedCell.current = nextElement;
  }
};

var getTableProps = function getTableProps(tableProps, _ref) {
  var _ref$instance = _ref.instance,
      webComponentsReactProperties = _ref$instance.webComponentsReactProperties,
      data = _ref$instance.data;
  var currentlyFocusedCell = useRef(null);
  var tableRef = webComponentsReactProperties.tableRef;
  var noData = data.length === 0;
  var onTableBlur = useCallback(function (e) {
    if (e.target.tagName === 'UI5-LI' || e.target.tagName === 'UI5-LI-CUSTOM') {
      currentlyFocusedCell.current = null;
    }
  }, [currentlyFocusedCell.current]);
  var onTableFocus = useCallback(function (e) {
    var isFirstCellAvailable = e.target.querySelector('div[data-column-index="0"][data-row-index="1"]');

    if (e.target.dataset.componentName === 'AnalyticalTableContainer') {
      e.target.tabIndex = -1;

      if (currentlyFocusedCell.current) {
        var _dataset$rowIndex, _dataset$columnIndex;

        var dataset = currentlyFocusedCell.current.dataset;
        var rowIndex = parseInt((_dataset$rowIndex = dataset.rowIndex) !== null && _dataset$rowIndex !== void 0 ? _dataset$rowIndex : dataset.rowIndexSub, 10);
        var columnIndex = parseInt((_dataset$columnIndex = dataset.columnIndex) !== null && _dataset$columnIndex !== void 0 ? _dataset$columnIndex : dataset.columnIndexSub, 10);

        if (e.target.querySelector("div[data-column-index=\"".concat(columnIndex, "\"][data-row-index=\"").concat(rowIndex, "\"]")) || e.target.querySelector("div[data-column-index-sub=\"".concat(columnIndex, "\"][data-row-index-sub=\"").concat(rowIndex, "\"]"))) {
          currentlyFocusedCell.current.tabIndex = 0;
          currentlyFocusedCell.current.focus();
        } else {
          getFirstVisibleCell(e.target, currentlyFocusedCell, noData);
        }
      } else if (isFirstCellAvailable) {
        var firstCell = e.target.querySelector('div[data-column-index="0"][data-row-index="0"]');
        firstCell.tabIndex = 0;
        firstCell.focus();
        currentlyFocusedCell.current = firstCell;
      } else {
        getFirstVisibleCell(e.target, currentlyFocusedCell, noData);
      }
    } else {
      var tableCell = findParentCell(e.target);

      if (tableCell) {
        currentlyFocusedCell.current = tableCell;
      } else {
        getFirstVisibleCell(tableRef.current, currentlyFocusedCell, noData);
      }
    }
  }, [currentlyFocusedCell.current, tableRef.current, noData]);
  var onKeyboardNavigation = useCallback(function (e) {
    if (currentlyFocusedCell.current) {
      var columnIndex = parseInt(currentlyFocusedCell.current.dataset.columnIndex, 10);
      var rowIndex = parseInt(currentlyFocusedCell.current.dataset.rowIndex, 10);

      switch (e.key) {
        case 'End':
          {
            e.preventDefault();
            var visibleColumns = tableRef.current.querySelector("div[data-component-name=\"AnalyticalTableHeaderRow\"]").children;
            var lastVisibleColumn = Array.from(visibleColumns).slice(0).reduceRight(function (prev, cur, index, arr) {
              var _cur$children, _cur$children$;

              var columnIndex = parseInt((_cur$children = cur.children) === null || _cur$children === void 0 ? void 0 : (_cur$children$ = _cur$children[0]) === null || _cur$children$ === void 0 ? void 0 : _cur$children$.dataset.columnIndex, 10);

              if (!isNaN(columnIndex)) {
                arr.length = 0;
                return columnIndex;
              }

              return cur;
            });
            var newElement = tableRef.current.querySelector("div[data-visible-column-index=\"".concat(lastVisibleColumn + 1, "\"][data-row-index=\"").concat(rowIndex, "\"]"));
            setFocus(currentlyFocusedCell, newElement);
            break;
          }

        case 'Home':
          {
            e.preventDefault();

            var _newElement = tableRef.current.querySelector("div[data-visible-column-index=\"0\"][data-row-index=\"".concat(rowIndex, "\"]"));

            setFocus(currentlyFocusedCell, _newElement);
            break;
          }

        case 'PageDown':
          {
            e.preventDefault();

            if (currentlyFocusedCell.current.dataset.rowIndex === '0') {
              var _newElement2 = tableRef.current.querySelector("div[data-column-index=\"".concat(columnIndex, "\"][data-row-index=\"").concat(rowIndex + 1, "\"]"));

              setFocus(currentlyFocusedCell, _newElement2);
            } else {
              var _tableRef$current$que, _tableRef$current$que2;

              var lastVisibleRow = (_tableRef$current$que = tableRef.current.querySelector("div[data-component-name=\"AnalyticalTableBody\"]")) === null || _tableRef$current$que === void 0 ? void 0 : (_tableRef$current$que2 = _tableRef$current$que.children) === null || _tableRef$current$que2 === void 0 ? void 0 : _tableRef$current$que2[0].children.length;

              var _newElement3 = tableRef.current.querySelector("div[data-column-index=\"".concat(columnIndex, "\"][data-visible-row-index=\"").concat(lastVisibleRow, "\"]"));

              setFocus(currentlyFocusedCell, _newElement3);
            }

            break;
          }

        case 'PageUp':
          {
            e.preventDefault();

            if (currentlyFocusedCell.current.dataset.rowIndex <= '1') {
              var _newElement4 = tableRef.current.querySelector("div[data-column-index=\"".concat(columnIndex, "\"][data-row-index=\"0\"]"));

              setFocus(currentlyFocusedCell, _newElement4);
            } else {
              var _newElement5 = tableRef.current.querySelector("div[data-column-index=\"".concat(columnIndex, "\"][data-visible-row-index=\"1\"]"));

              setFocus(currentlyFocusedCell, _newElement5);
            }

            break;
          }

        case 'ArrowRight':
          {
            e.preventDefault();

            var _newElement6 = tableRef.current.querySelector("div[data-column-index=\"".concat(columnIndex + 1, "\"][data-row-index=\"").concat(rowIndex, "\"]"));

            if (_newElement6) {
              setFocus(currentlyFocusedCell, _newElement6);
            }

            break;
          }

        case 'ArrowLeft':
          {
            e.preventDefault();

            var _newElement7 = tableRef.current.querySelector("div[data-column-index=\"".concat(columnIndex - 1, "\"][data-row-index=\"").concat(rowIndex, "\"]"));

            if (_newElement7) {
              setFocus(currentlyFocusedCell, _newElement7);
            }

            break;
          }

        case 'ArrowDown':
          {
            var _parent$children, _firstChildOfParent$d, _currentlyFocusedCell, _currentlyFocusedCell2;

            e.preventDefault();
            var parent = currentlyFocusedCell.current.parentElement;
            var firstChildOfParent = parent === null || parent === void 0 ? void 0 : (_parent$children = parent.children) === null || _parent$children === void 0 ? void 0 : _parent$children[0];
            var hasSubcomponent = firstChildOfParent === null || firstChildOfParent === void 0 ? void 0 : (_firstChildOfParent$d = firstChildOfParent.dataset) === null || _firstChildOfParent$d === void 0 ? void 0 : _firstChildOfParent$d.subcomponent;

            var _newElement8 = tableRef.current.querySelector("div[data-column-index=\"".concat(columnIndex, "\"][data-row-index=\"").concat(rowIndex + 1, "\"]"));

            if (hasSubcomponent && !((_currentlyFocusedCell = currentlyFocusedCell.current) !== null && _currentlyFocusedCell !== void 0 && (_currentlyFocusedCell2 = _currentlyFocusedCell.dataset) !== null && _currentlyFocusedCell2 !== void 0 && _currentlyFocusedCell2.subcomponent)) {
              currentlyFocusedCell.current.tabIndex = -1;
              firstChildOfParent.tabIndex = 0;
              firstChildOfParent.dataset.rowIndexSub = "".concat(rowIndex);
              firstChildOfParent.dataset.columnIndexSub = "".concat(columnIndex);
              firstChildOfParent.focus();
              currentlyFocusedCell.current = firstChildOfParent;
            } else if (_newElement8) {
              setFocus(currentlyFocusedCell, _newElement8);
            } else if (e.target.dataset.subcomponent) {
              var nextElementToSubComp = tableRef.current.querySelector("div[data-column-index=\"".concat(parseInt(e.target.dataset.columnIndexSub), "\"][data-row-index=\"").concat(parseInt(e.target.dataset.rowIndexSub) + 1, "\"]"));
              setFocus(currentlyFocusedCell, nextElementToSubComp);
            }

            break;
          }

        case 'ArrowUp':
          {
            var _firstChildPrevRow$da, _currentlyFocusedCell3, _currentlyFocusedCell4;

            e.preventDefault();
            var previousRowCell = tableRef.current.querySelector("div[data-column-index=\"".concat(columnIndex, "\"][data-row-index=\"").concat(rowIndex - 1, "\"]"));
            var firstChildPrevRow = previousRowCell === null || previousRowCell === void 0 ? void 0 : previousRowCell.parentElement.children[0];

            var _hasSubcomponent = firstChildPrevRow === null || firstChildPrevRow === void 0 ? void 0 : (_firstChildPrevRow$da = firstChildPrevRow.dataset) === null || _firstChildPrevRow$da === void 0 ? void 0 : _firstChildPrevRow$da.subcomponent;

            if ((_currentlyFocusedCell3 = currentlyFocusedCell.current) !== null && _currentlyFocusedCell3 !== void 0 && (_currentlyFocusedCell4 = _currentlyFocusedCell3.dataset) !== null && _currentlyFocusedCell4 !== void 0 && _currentlyFocusedCell4.subcomponent) {
              currentlyFocusedCell.current.tabIndex = -1;

              var _newElement9 = tableRef.current.querySelector("div[data-column-index=\"".concat(parseInt(e.target.dataset.columnIndexSub), "\"][data-row-index=\"").concat(parseInt(e.target.dataset.rowIndexSub), "\"]"));

              _newElement9.tabIndex = 0;

              _newElement9.focus();

              currentlyFocusedCell.current = _newElement9;
            } else if (_hasSubcomponent) {
              currentlyFocusedCell.current.tabIndex = -1;
              firstChildPrevRow.dataset.rowIndexSub = "".concat(rowIndex - 1);
              firstChildPrevRow.dataset.columnIndexSub = "".concat(columnIndex);
              firstChildPrevRow.tabIndex = 0;
              firstChildPrevRow.focus();
              currentlyFocusedCell.current = firstChildPrevRow;
            } else if (previousRowCell) {
              setFocus(currentlyFocusedCell, previousRowCell);
            }

            break;
          }
      }
    }
  }, [currentlyFocusedCell.current, tableRef.current]);
  return [tableProps, {
    onFocus: onTableFocus,
    onKeyDown: onKeyboardNavigation,
    onBlur: onTableBlur
  }];
};

var useKeyboardNavigation = function useKeyboardNavigation(hooks) {
  hooks.getTableProps.push(getTableProps);
};

var popInVisibleColumnsDeps = function popInVisibleColumnsDeps(deps, _ref) {
  var state = _ref.instance.state;
  return [].concat(_toConsumableArray(deps), [state.tableClientWidth]);
};

var popInVisibleColumns = function popInVisibleColumns(cols, _ref2) {
  var instance = _ref2.instance;
  var state = instance.state,
      dispatch = instance.dispatch;
  var tableClientWidth = state.isScrollable ? (state === null || state === void 0 ? void 0 : state.tableClientWidth) + 14
  /*scrollbar width*/
  : state === null || state === void 0 ? void 0 : state.tableClientWidth;
  var popInColumns = cols.filter(function (item) {
    return item.responsivePopIn && tableClientWidth < item.responsiveMinWidth;
  }).map(function (item) {
    var _item$id;

    return {
      id: (_item$id = item.id) !== null && _item$id !== void 0 ? _item$id : item.accessor,
      column: item
    };
  });
  dispatch({
    type: 'SET_POPIN_COLUMNS',
    payload: popInColumns
  });
  return cols.filter(function (col) {
    return !popInColumns.some(function (item) {
      var _col$id;

      return item.id === ((_col$id = col.id) !== null && _col$id !== void 0 ? _col$id : col.accessor);
    }) && (col.hasOwnProperty('responsiveMinWidth') ? !tableClientWidth || tableClientWidth >= col.responsiveMinWidth : true);
  });
};

var usePopIn = function usePopIn(hooks) {
  hooks.visibleColumns.push(popInVisibleColumns);
  hooks.visibleColumnsDeps.push(popInVisibleColumnsDeps);
};

var baseStyles$1 = {
  width: '100%',
  height: '100%'
};
var StyleClassMap = new Map();
StyleClassMap.set(ValueState.None, undefined);
StyleClassMap.set(ValueState.Success, 'valueStateSuccess');
StyleClassMap.set(ValueState.Warning, 'valueStateWarning');
StyleClassMap.set(ValueState.Error, 'valueStateError');
StyleClassMap.set(ValueState.Information, 'valueStateInformation');
/*
 * COMPONENTS
 */

var Header$2 = function Header() {
  return /*#__PURE__*/React.createElement("div", {
    style: {
      width: '6px'
    }
  });
};

var Cell$2 = function Cell(instance) {
  var cell = instance.cell,
      webComponentsReactProperties = instance.webComponentsReactProperties;
  var styleClass = StyleClassMap.get(cell.value) ? webComponentsReactProperties.classes[StyleClassMap.get(cell.value)] : undefined;
  return /*#__PURE__*/React.createElement("div", {
    style: baseStyles$1,
    className: styleClass
  });
};
/*
 * TABLE HOOKS
 */


var columnsDeps$1 = function columnsDeps(deps, _ref) {
  var webComponentsReactProperties = _ref.instance.webComponentsReactProperties;
  return [].concat(_toConsumableArray(deps), [webComponentsReactProperties.withRowHighlight, webComponentsReactProperties.highlightField]);
};

var visibleColumnsDeps$2 = function visibleColumnsDeps(deps, _ref2) {
  var instance = _ref2.instance;
  return [].concat(_toConsumableArray(deps), [instance.webComponentsReactProperties.withRowHighlight]);
};

var visibleColumns$2 = function visibleColumns(currentVisibleColumns, _ref3) {
  var webComponentsReactProperties = _ref3.instance.webComponentsReactProperties;

  if (!webComponentsReactProperties.withRowHighlight) {
    return currentVisibleColumns.filter(function (_ref4) {
      var id = _ref4.id;
      return id !== '__ui5wcr__internal_highlight_column';
    });
  }

  var highlightColumn = currentVisibleColumns.find(function (_ref5) {
    var id = _ref5.id;
    return id === '__ui5wcr__internal_highlight_column';
  });
  return [highlightColumn].concat(_toConsumableArray(currentVisibleColumns.filter(function (_ref6) {
    var id = _ref6.id;
    return id !== '__ui5wcr__internal_highlight_column';
  })));
};

var columns$2 = function columns(currentColumns, _ref7) {
  var instance = _ref7.instance;
  var _instance$webComponen = instance.webComponentsReactProperties,
      withRowHighlight = _instance$webComponen.withRowHighlight,
      highlightField = _instance$webComponen.highlightField;

  if (!withRowHighlight) {
    return currentColumns;
  }

  return [{
    id: '__ui5wcr__internal_highlight_column',
    accessor: highlightField,
    disableFilters: true,
    disableSortBy: true,
    disableGroupBy: true,
    disableResizing: true,
    disableDragAndDrop: true,
    width: 6,
    minWidth: 6,
    maxWidth: 6,
    Header: Header$2,
    Cell: Cell$2
  }].concat(_toConsumableArray(currentColumns));
};

var useRowHighlight = function useRowHighlight(hooks) {
  hooks.columns.push(columns$2);
  hooks.columnsDeps.push(columnsDeps$1);
  hooks.visibleColumnsDeps.push(visibleColumnsDeps$2);
  hooks.visibleColumns.push(visibleColumns$2);
};
useRowHighlight.pluginName = 'useRowHighlight';

var baseStyles = {
  width: '100%',
  height: '100%'
};
/*
 * COMPONENTS
 */

var Header$1 = function Header() {
  return /*#__PURE__*/React.createElement("div", {
    style: {
      width: '6px'
    }
  });
};

var Cell$1 = function Cell(instance) {
  var isNavigatedCell = instance.isNavigatedCell,
      webComponentsReactProperties = instance.webComponentsReactProperties;

  if (isNavigatedCell) {
    return /*#__PURE__*/React.createElement("div", {
      style: baseStyles,
      className: webComponentsReactProperties.classes.valueStateInformation
    });
  }

  return /*#__PURE__*/React.createElement("div", {
    style: baseStyles
  });
};
/*
 * TABLE HOOKS
 */


var columnsDeps = function columnsDeps(deps, _ref) {
  var webComponentsReactProperties = _ref.instance.webComponentsReactProperties;
  return [].concat(_toConsumableArray(deps), [webComponentsReactProperties.withNavigationHighlight]);
};

var visibleColumnsDeps$1 = function visibleColumnsDeps(deps, _ref2) {
  var instance = _ref2.instance;
  return [].concat(_toConsumableArray(deps), [instance.webComponentsReactProperties.withNavigationHighlight]);
};

var visibleColumns$1 = function visibleColumns(currentVisibleColumns, _ref3) {
  var webComponentsReactProperties = _ref3.instance.webComponentsReactProperties;

  if (!webComponentsReactProperties.withNavigationHighlight) {
    return currentVisibleColumns.filter(function (_ref4) {
      var id = _ref4.id;
      return id !== '__ui5wcr__internal_navigation_column';
    });
  }

  var highlightColumn = currentVisibleColumns.find(function (_ref5) {
    var id = _ref5.id;
    return id === '__ui5wcr__internal_navigation_column';
  });
  return [].concat(_toConsumableArray(currentVisibleColumns.filter(function (_ref6) {
    var id = _ref6.id;
    return id !== '__ui5wcr__internal_navigation_column';
  })), [highlightColumn]);
};

var columns$1 = function columns(currentColumns, _ref7) {
  var instance = _ref7.instance;
  var withNavigationHighlight = instance.webComponentsReactProperties.withNavigationHighlight;

  if (!withNavigationHighlight) {
    return currentColumns;
  }

  return [].concat(_toConsumableArray(currentColumns), [{
    id: '__ui5wcr__internal_navigation_column',
    disableFilters: true,
    disableSortBy: true,
    disableGroupBy: true,
    disableResizing: true,
    disableDragAndDrop: true,
    width: 6,
    minWidth: 6,
    maxWidth: 6,
    Header: Header$1,
    Cell: Cell$1
  }]);
};

var useRowNavigationIndicators = function useRowNavigationIndicators(hooks) {
  hooks.columns.push(columns$1);
  hooks.columnsDeps.push(columnsDeps);
  hooks.visibleColumnsDeps.push(visibleColumnsDeps$1);
  hooks.visibleColumns.push(visibleColumns$1);
};

var divStyle = {
  width: '100%',
  height: '100%',
  cursor: 'pointer'
};
var customCheckBoxStyling = {
  cursor: 'pointer',
  verticalAlign: 'middle'
};
/*
 * COMPONENTS
 */

var Header = function Header(instance) {
  var getToggleAllRowsSelectedProps = instance.getToggleAllRowsSelectedProps,
      selectionMode = instance.webComponentsReactProperties.selectionMode;

  if (selectionMode === TableSelectionMode.SingleSelect) {
    return null;
  }

  var checkBoxProps = getToggleAllRowsSelectedProps();
  return /*#__PURE__*/React.createElement(CheckBox, _extends({}, checkBoxProps, {
    style: customCheckBoxStyling,
    tabIndex: -1,
    onChange: undefined,
    checked: checkBoxProps.indeterminate ? true : checkBoxProps.checked
  }));
};

var Cell = function Cell(_ref) {
  var row = _ref.row,
      _ref$webComponentsRea = _ref.webComponentsReactProperties,
      selectionBehavior = _ref$webComponentsRea.selectionBehavior,
      selectionMode = _ref$webComponentsRea.selectionMode;

  var handleCellClick = function handleCellClick(e) {
    if (TableSelectionBehavior.RowSelector === selectionBehavior) {
      row.getRowProps().onClick(e, true);
    }
  };

  if (row.isGrouped && selectionMode === TableSelectionMode.SingleSelect) {
    return null;
  }

  if (selectionMode === TableSelectionMode.SingleSelect) {
    return /*#__PURE__*/React.createElement("div", {
      style: divStyle,
      onClick: handleCellClick,
      "data-name": "internal_selection_column"
    });
  }

  return /*#__PURE__*/React.createElement(CheckBox, _extends({}, row.getToggleRowSelectedProps(), {
    tabIndex: -1,
    onChange: handleCellClick,
    style: customCheckBoxStyling,
    "data-name": "internal_selection_column"
  }));
};
/*
 * TABLE HOOKS
 */


var headerProps = function headerProps(props, _ref2) {
  var _ref2$instance = _ref2.instance,
      flatRows = _ref2$instance.flatRows,
      _ref2$instance$webCom = _ref2$instance.webComponentsReactProperties,
      onRowSelected = _ref2$instance$webCom.onRowSelected,
      selectionMode = _ref2$instance$webCom.selectionMode,
      toggleAllRowsSelected = _ref2$instance.toggleAllRowsSelected,
      isAllRowsSelected = _ref2$instance.isAllRowsSelected;

  if (props.key === 'header___ui5wcr__internal_selection_column' && selectionMode === TableSelectionMode.MultiSelect) {
    var onClick = function onClick(e) {
      toggleAllRowsSelected();

      if (typeof onRowSelected === 'function') {
        onRowSelected( // cannot use instance.selectedFlatRows here as it only returns all rows on the first level
        enrichEventWithDetails(e, {
          allRowsSelected: !isAllRowsSelected,
          selectedFlatRows: !isAllRowsSelected ? flatRows : []
        }));
      }
    };

    var onKeyDown = function onKeyDown(e) {
      if (e.code === 'Space' || e.code === 'Enter') {
        e.preventDefault();
        onClick(e);
      }
    };

    return [props, {
      onClick: onClick,
      onKeyDown: onKeyDown
    }];
  }

  return props;
};

var columnDeps = function columnDeps(deps, _ref3) {
  var webComponentsReactProperties = _ref3.instance.webComponentsReactProperties;
  return [].concat(_toConsumableArray(deps), [webComponentsReactProperties.selectionMode, webComponentsReactProperties.selectionBehavior]);
};

var visibleColumnsDeps = function visibleColumnsDeps(deps, _ref4) {
  var instance = _ref4.instance;
  return [].concat(_toConsumableArray(deps), [instance.webComponentsReactProperties.selectionMode, instance.webComponentsReactProperties.selectionBehavior]);
};

var visibleColumns = function visibleColumns(currentVisibleColumns, _ref5) {
  var webComponentsReactProperties = _ref5.instance.webComponentsReactProperties;

  if (webComponentsReactProperties.selectionMode === TableSelectionMode.None || webComponentsReactProperties.selectionBehavior === TableSelectionBehavior.RowOnly) {
    return currentVisibleColumns;
  }

  var selectionColumn = currentVisibleColumns.find(function (_ref6) {
    var id = _ref6.id;
    return id === '__ui5wcr__internal_selection_column';
  });
  return [selectionColumn].concat(_toConsumableArray(currentVisibleColumns.filter(function (_ref7) {
    var id = _ref7.id;
    return id !== '__ui5wcr__internal_selection_column';
  })));
};

var columns = function columns(currentColumns, _ref8) {
  var instance = _ref8.instance;
  var webComponentsReactProperties = instance.webComponentsReactProperties;
  var selectionMode = webComponentsReactProperties.selectionMode,
      selectionBehavior = webComponentsReactProperties.selectionBehavior,
      tableRef = webComponentsReactProperties.tableRef;

  if (selectionMode === TableSelectionMode.None || selectionBehavior === TableSelectionBehavior.RowOnly) {
    return currentColumns;
  }

  var tableSelectionColumnWidth = tableRef.current && parseInt(getComputedStyle(tableRef.current).getPropertyValue("--".concat(CssSizeVariablesNames.sapWcrAnalyticalTableSelectionColumnWidth)), 10);
  var selectionColumnWidth = !isNaN(tableSelectionColumnWidth) ? tableSelectionColumnWidth : 47;
  return [{
    id: '__ui5wcr__internal_selection_column',
    accessor: '__ui5wcr__internal_selection_column',
    disableFilters: true,
    disableSortBy: true,
    disableGroupBy: true,
    disableResizing: true,
    disableDragAndDrop: true,
    width: selectionColumnWidth,
    minWidth: selectionColumnWidth,
    maxWidth: selectionColumnWidth,
    Header: Header,
    Cell: Cell
  }].concat(_toConsumableArray(currentColumns));
};

var useRowSelectionColumn = function useRowSelectionColumn(hooks) {
  hooks.getHeaderProps.push(headerProps);
  hooks.columns.push(columns);
  hooks.columnsDeps.push(columnDeps);
  hooks.visibleColumnsDeps.push(visibleColumnsDeps);
  hooks.visibleColumns.push(visibleColumns);
};
useRowSelectionColumn.pluginName = 'useRowSelectionColumn';

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var getRowProps$1 = function getRowProps(rowProps, _ref) {
  var row = _ref.row,
      instance = _ref.instance;
  var webComponentsReactProperties = instance.webComponentsReactProperties,
      toggleRowSelected = instance.toggleRowSelected,
      selectedFlatRows = instance.selectedFlatRows,
      flatRows = instance.flatRows;

  var handleRowSelect = function handleRowSelect(e) {
    var _e$target, _e$target$dataset, _e$nativeEvent, _row$original, _e$target2, _e$target2$dataset;

    var selectionCellClick = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (((_e$target = e.target) === null || _e$target === void 0 ? void 0 : (_e$target$dataset = _e$target.dataset) === null || _e$target$dataset === void 0 ? void 0 : _e$target$dataset.name) !== 'internal_selection_column' && !(e.markerAllowTableRowSelection === true || ((_e$nativeEvent = e.nativeEvent) === null || _e$nativeEvent === void 0 ? void 0 : _e$nativeEvent.markerAllowTableRowSelection) === true) && webComponentsReactProperties.tagNamesWhichShouldNotSelectARow.has(e.target.tagName)) {
      return;
    } // dont select empty rows


    var isEmptyRow = (_row$original = row.original) === null || _row$original === void 0 ? void 0 : _row$original.emptyRow;

    if (isEmptyRow) {
      return;
    } // dont select grouped rows


    if (row.isGrouped) {
      return;
    }

    var selectionBehavior = webComponentsReactProperties.selectionBehavior,
        selectionMode = webComponentsReactProperties.selectionMode,
        onRowSelected = webComponentsReactProperties.onRowSelected,
        onRowClick = webComponentsReactProperties.onRowClick;

    if (typeof onRowClick === 'function' && ((_e$target2 = e.target) === null || _e$target2 === void 0 ? void 0 : (_e$target2$dataset = _e$target2.dataset) === null || _e$target2$dataset === void 0 ? void 0 : _e$target2$dataset.name) !== 'internal_selection_column') {
      onRowClick(enrichEventWithDetails(e, {
        row: row
      }));
    }

    if (webComponentsReactProperties.selectionMode === TableSelectionMode.None) {
      return;
    } // dont continue if the row was clicked and selection mode is row selector only


    if (selectionBehavior === TableSelectionBehavior.RowSelector && !selectionCellClick) {
      return;
    }

    if (selectionMode === TableSelectionMode.SingleSelect) {
      var _iterator = _createForOfIteratorHelper(selectedFlatRows),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var selectedRow = _step.value;

          if (selectedRow.id !== row.id) {
            toggleRowSelected(selectedRow.id, false);
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }

    instance.toggleRowSelected(row.id); // fire event

    if (typeof onRowSelected === 'function') {
      var payload = {
        row: row,
        isSelected: !row.isSelected,
        selectedFlatRows: !row.isSelected ? [row.id] : [],
        allRowsSelected: false
      };

      if (selectionMode === TableSelectionMode.MultiSelect) {
        var isRowSelected = selectionCellClick ? row.isSelected : !row.isSelected;

        if (selectionCellClick) {
          payload.isSelected = row.isSelected;
        }

        payload.selectedFlatRows = isRowSelected ? [].concat(_toConsumableArray(selectedFlatRows), [row]) : selectedFlatRows.filter(function (prevRow) {
          return prevRow.id !== row.id;
        });

        if (payload.selectedFlatRows.length === flatRows.length) {
          payload.allRowsSelected = true;
        }
      }

      onRowSelected(enrichEventWithDetails(e, payload));
    }
  };

  return [rowProps, {
    onKeyDown: function onKeyDown(e) {
      var selectionCellClick = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (e.key === 'Enter' || e.code === 'Space') {
        if (!webComponentsReactProperties.tagNamesWhichShouldNotSelectARow.has(e.target.tagName)) {
          e.preventDefault();
        }

        handleRowSelect(e, selectionCellClick);
      }
    },
    onClick: handleRowSelect
  }];
};

var useSingleRowStateSelection = function useSingleRowStateSelection(hooks) {
  hooks.getRowProps.push(getRowProps$1);
};
useSingleRowStateSelection.pluginName = 'useSingleRowStateSelection';

var getHeaderGroupProps = function getHeaderGroupProps(headerGroupProps, _ref) {
  var instance = _ref.instance;
  var classes = instance.webComponentsReactProperties.classes;
  return [headerGroupProps, {
    className: classes.tableHeaderRow
  }];
};

var getHeaderProps = function getHeaderProps(columnProps, _ref2) {
  var instance = _ref2.instance,
      column = _ref2.column;
  var classes = instance.webComponentsReactProperties.classes;
  var style = {
    width: column.totalWidth
  };

  if (column.id === '__ui5wcr__internal_highlight_column' || column.id === '__ui5wcr__internal_selection_column' || column.id === '__ui5wcr__internal_navigation_column') {
    style.padding = 0;
  }

  return [columnProps, {
    className: classes.th,
    column: column,
    style: style,
    id: column.id
  }];
};

var ROW_SELECTION_ATTRIBUTE = 'data-is-selected';

var getRowProps = function getRowProps(rowProps, _ref3) {
  var _row$original;

  var instance = _ref3.instance,
      row = _ref3.row;
  var webComponentsReactProperties = instance.webComponentsReactProperties;
  var classes = webComponentsReactProperties.classes,
      selectionBehavior = webComponentsReactProperties.selectionBehavior,
      selectionMode = webComponentsReactProperties.selectionMode,
      alternateRowColor = webComponentsReactProperties.alternateRowColor;
  var isEmptyRow = (_row$original = row.original) === null || _row$original === void 0 ? void 0 : _row$original.emptyRow;
  var className = classes.tr;
  var rowCanBeSelected = [TableSelectionMode.SingleSelect, TableSelectionMode.MultiSelect].includes(selectionMode) && !isEmptyRow;

  if (row.isGrouped) {
    className += " ".concat(classes.tableGroupHeader);
  }

  if (alternateRowColor && row.index % 2 !== 0) {
    className += " ".concat(classes.alternateRowColor);
  }

  var newRowProps = {
    className: className,
    role: 'row',
    'aria-rowindex': row.index
  };

  if (rowCanBeSelected) {
    if (TableSelectionBehavior.RowSelector !== selectionBehavior) {
      newRowProps.className += " ".concat(classes.trActive);
    }

    if (row.isSelected) {
      newRowProps[ROW_SELECTION_ATTRIBUTE] = '';
    }
  }

  return [rowProps, newRowProps];
};

var getCellProps = function getCellProps(cellProps, _ref4) {
  var column = _ref4.cell.column,
      instance = _ref4.instance;
  var columnIndex = instance.visibleColumns.findIndex(function (_ref5) {
    var id = _ref5.id;
    return id === column.id;
  });
  var classes = instance.webComponentsReactProperties.classes;
  var style = {
    width: "".concat(column.totalWidth, "px")
  };

  switch (column.hAlign) {
    case TextAlign.Begin:
      style.justifyContent = 'flex-start';
      style.textAlign = 'start';
      break;

    case TextAlign.Center:
      style.justifyContent = 'center';
      style.textAlign = 'center';
      break;

    case TextAlign.End:
      style.justifyContent = 'flex-end';
      style.textAlign = 'end';
      break;

    case TextAlign.Left:
      style.justifyContent = 'left';
      style.textAlign = 'left';
      break;

    case TextAlign.Right:
      style.justifyContent = 'right';
      style.textAlign = 'right';
      break;

    case TextAlign.Initial:
      style.justifyContent = 'initial';
      style.textAlign = 'initial';
      break;
  }

  switch (column.vAlign) {
    case VerticalAlign.Bottom:
      style.alignItems = 'flex-end';
      break;

    case VerticalAlign.Middle:
      style.alignItems = 'center';
      break;

    case VerticalAlign.Top:
      style.alignItems = 'flex-start';
      break;
  }

  var className = classes.tableCell;

  if (column.className) {
    className += " ".concat(column.className);
  }

  if (column.id === '__ui5wcr__internal_highlight_column' || column.id === '__ui5wcr__internal_selection_column' || column.id === '__ui5wcr__internal_navigation_column') {
    style.padding = 0;
  }

  return [cellProps, {
    className: className,
    style: style,
    tabIndex: -1,
    'aria-colindex': columnIndex + 1 // aria index is 1 based, not 0

  }];
};

var useStyling = function useStyling(hooks) {
  hooks.getHeaderGroupProps.push(getHeaderGroupProps);
  hooks.getHeaderProps.push(getHeaderProps);
  hooks.getRowProps.push(getRowProps);
  hooks.getCellProps.push(getCellProps);
};
useStyling.pluginName = 'useStyling';

var useTableScrollHandles = function useTableScrollHandles(ref) {
  var analyticalTableRef = useRef(null);

  if (ref) {
    analyticalTableRef = ref;
  }

  var reactWindowRef = useRef({});
  useEffect(function () {
    if (analyticalTableRef.current) {
      Object.assign(analyticalTableRef.current, {
        scrollTo: function scrollTo(offset, align) {
          var _reactWindowRef$curre;

          if (typeof ((_reactWindowRef$curre = reactWindowRef.current) === null || _reactWindowRef$curre === void 0 ? void 0 : _reactWindowRef$curre.scrollToOffset) === 'function') {
            reactWindowRef.current.scrollToOffset(offset, {
              align: align
            });
          }
        },
        scrollToItem: function scrollToItem(index, align) {
          var _reactWindowRef$curre2;

          if (typeof ((_reactWindowRef$curre2 = reactWindowRef.current) === null || _reactWindowRef$curre2 === void 0 ? void 0 : _reactWindowRef$curre2.scrollToIndex) === 'function') {
            reactWindowRef.current.scrollToIndex(index, {
              align: align
            });
          }
        },
        horizontalScrollTo: function horizontalScrollTo(offset, align) {
          var _reactWindowRef$curre3;

          if (typeof ((_reactWindowRef$curre3 = reactWindowRef.current) === null || _reactWindowRef$curre3 === void 0 ? void 0 : _reactWindowRef$curre3.horizontalScrollToOffset) === 'function') {
            reactWindowRef.current.horizontalScrollToOffset(offset, {
              align: align
            });
          }
        },
        horizontalScrollToItem: function horizontalScrollToItem(index, align) {
          var _reactWindowRef$curre4;

          if (typeof ((_reactWindowRef$curre4 = reactWindowRef.current) === null || _reactWindowRef$curre4 === void 0 ? void 0 : _reactWindowRef$curre4.horizontalScrollToIndex) === 'function') {
            reactWindowRef.current.horizontalScrollToIndex(index, {
              align: align
            });
          }
        }
      });
    }
  }, []);
  return [analyticalTableRef, reactWindowRef];
};

var getToggleRowExpandedProps = function getToggleRowExpandedProps(rowProps, _ref) {
  var row = _ref.row,
      instance = _ref.instance;
  var _instance$webComponen = instance.webComponentsReactProperties,
      onRowExpandChange = _instance$webComponen.onRowExpandChange,
      isTreeTable = _instance$webComponen.isTreeTable,
      renderRowSubComponent = _instance$webComponen.renderRowSubComponent;
  var onClick = useCallback(function (e) {
    e.stopPropagation();
    e.persist();
    row.toggleRowExpanded();
    var column = null;

    if (!isTreeTable && !renderRowSubComponent) {
      column = row.cells.find(function (cell) {
        return cell.column.id === row.groupByID;
      }).column;
    }

    onRowExpandChange(enrichEventWithDetails(e, {
      row: row,
      column: column
    }));
  }, [row, isTreeTable, onRowExpandChange]);
  return [rowProps, {
    onClick: onClick
  }];
};

var useToggleRowExpand = function useToggleRowExpand(hooks) {
  hooks.getToggleRowExpandedProps.push(getToggleRowExpandedProps);
};
useToggleRowExpand.pluginName = 'useToggleRowExpand';

var getVisibleColumnsWidth = function getVisibleColumnsWidth(instance) {
  var visibleColumnsWidth = instance.visibleColumns.map(function (item) {
    return item.totalWidth;
  });
  Object.assign(instance, {
    visibleColumnsWidth: visibleColumnsWidth
  });
};

var useVisibleColumnsWidth = function useVisibleColumnsWidth(hooks) {
  hooks.useInstance.push(getVisibleColumnsWidth);
};
useVisibleColumnsWidth.pluginName = 'useVisibleColumnsWidth';

var styles$2 = {
  headerSection: {
    boxSizing: 'border-box',
    borderTop: "1px solid ".concat(ThemingParameters.sapList_BorderColor),
    borderRight: "1px solid ".concat(ThemingParameters.sapList_BorderColor),
    borderBottom: "1px solid ".concat(ThemingParameters.sapList_BorderColor),
    backgroundColor: ThemingParameters.sapList_HeaderBackground
  },
  scrollbar: {
    overflowY: 'auto',
    borderRight: "1px solid ".concat(ThemingParameters.sapList_BorderColor),
    borderBottom: "1px solid ".concat(ThemingParameters.sapList_BorderColor),
    boxSizing: 'border-box'
  },
  bottomSection: {
    flexGrow: 1,
    backgroundColor: ThemingParameters.sapList_HeaderBackground,
    boxSizing: 'border-box',
    borderRight: 'none',
    borderBottom: 'none'
  },
  bottomSectionWithScrollbar: {
    borderRight: "1px solid ".concat(ThemingParameters.sapList_BorderColor),
    borderBottom: "1px solid ".concat(ThemingParameters.sapList_BorderColor)
  }
};
var useStyles$3 = createUseStyles(styles$2, {
  name: 'VerticalScrollbar'
});
var VerticalScrollbar = /*#__PURE__*/forwardRef(function (props, ref) {
  var _tableRef$current, _tableRef$current2;

  var internalRowHeight = props.internalRowHeight,
      tableRef = props.tableRef,
      minRows = props.minRows,
      rows = props.rows,
      handleVerticalScrollBarScroll = props.handleVerticalScrollBarScroll,
      popInRowHeight = props.popInRowHeight;
  var classes = useStyles$3();
  var hasHorizontalScrollbar = (tableRef === null || tableRef === void 0 ? void 0 : (_tableRef$current = tableRef.current) === null || _tableRef$current === void 0 ? void 0 : _tableRef$current.clientWidth) !== (tableRef === null || tableRef === void 0 ? void 0 : (_tableRef$current2 = tableRef.current) === null || _tableRef$current2 === void 0 ? void 0 : _tableRef$current2.scrollWidth);
  var horizontalScrollbarSectionStyles = clsx(classes.bottomSection, hasHorizontalScrollbar && classes.bottomSectionWithScrollbar);
  return /*#__PURE__*/React.createElement(FlexBox, {
    direction: FlexBoxDirection.Column,
    style: {
      position: 'relative'
    }
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      height: "".concat(internalRowHeight, "px")
    },
    className: classes.headerSection
  }), /*#__PURE__*/React.createElement("div", {
    ref: ref,
    style: {
      height: tableRef.current ? "".concat(tableRef.current.clientHeight - internalRowHeight, "px") : '0'
    },
    onScroll: handleVerticalScrollBarScroll,
    className: "".concat(GlobalStyleClasses.sapScrollBar, " ").concat(classes.scrollbar)
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      height: "".concat(Math.max(minRows, rows.length) * popInRowHeight, "px"),
      width: '1px'
    }
  })), /*#__PURE__*/React.createElement("div", {
    className: horizontalScrollbarSectionStyles
  }));
});
VerticalScrollbar.displayName = 'VerticalScrollbar';

var styles$1 = {
  subcomponent: {
    position: 'absolute',
    width: '100%',
    '&:focus': {
      outlineOffset: "calc(-1 * ".concat(ThemingParameters.sapContent_FocusWidth, ")"),
      outline: "".concat(ThemingParameters.sapContent_FocusWidth, " ").concat(ThemingParameters.sapContent_FocusStyle, " ").concat(ThemingParameters.sapContent_FocusColor)
    }
  }
};
var useStyles$2 = createUseStyles(styles$1, {
  name: 'RowSubComponent'
});
var RowSubComponent = function RowSubComponent(props) {
  var _subComponentRef$curr3, _subComponentsHeight$2;

  var subComponentsHeight = props.subComponentsHeight,
      virtualRow = props.virtualRow,
      dispatch = props.dispatch,
      row = props.row,
      rowHeight = props.rowHeight,
      children = props.children,
      rows = props.rows,
      alwaysShowSubComponent = props.alwaysShowSubComponent;
  var subComponentRef = useRef(null);
  var classes = useStyles$2();
  useEffect(function () {
    var _subComponentRef$curr;

    var subComponentHeightObserver = new ResizeObserver(function (entries) {
      entries.forEach(function (entry) {
        var target = entry.target.getBoundingClientRect();

        if (target) {
          var _borderBoxSize$blockS, _subComponentsHeight$;

          // Firefox implements `borderBoxSize` as a single content rect, rather than an array
          var borderBoxSize = Array.isArray(entry.borderBoxSize) ? entry.borderBoxSize[0] : entry.borderBoxSize; // Safari doesn't implement `borderBoxSize`

          var subCompHeight = (_borderBoxSize$blockS = borderBoxSize === null || borderBoxSize === void 0 ? void 0 : borderBoxSize.blockSize) !== null && _borderBoxSize$blockS !== void 0 ? _borderBoxSize$blockS : target.height;

          if ((subComponentsHeight === null || subComponentsHeight === void 0 ? void 0 : (_subComponentsHeight$ = subComponentsHeight[virtualRow.index]) === null || _subComponentsHeight$ === void 0 ? void 0 : _subComponentsHeight$.subComponentHeight) !== subCompHeight && subCompHeight !== 0) {
            // use most common sub-component height of first 10 sub-components as default height
            if (alwaysShowSubComponent && subComponentsHeight && Object.keys(subComponentsHeight).length === 10) {
              var objGroupedByHeight = Object.values(subComponentsHeight).reduce(function (acc, cur) {
                var count = acc === null || acc === void 0 ? void 0 : acc[cur.subComponentHeight];

                if (typeof count === 'number') {
                  return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, cur.subComponentHeight, count + 1));
                }

                return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, cur.subComponentHeight, 1));
              }, {});
              var mostUsedHeight = Object.keys(objGroupedByHeight).reduce(function (a, b) {
                return objGroupedByHeight[a] > objGroupedByHeight[b] ? a : b;
              });
              var estimatedHeights = rows.reduce(function (acc, cur, index) {
                acc[index] = {
                  subComponentHeight: parseInt(mostUsedHeight),
                  rowId: cur.id
                };
                return acc;
              }, {});
              dispatch({
                type: 'SUB_COMPONENTS_HEIGHT',
                payload: _objectSpread(_objectSpread({}, estimatedHeights), subComponentsHeight)
              });
            } else {
              dispatch({
                type: 'SUB_COMPONENTS_HEIGHT',
                payload: _objectSpread(_objectSpread({}, subComponentsHeight), {}, _defineProperty({}, virtualRow.index, {
                  subComponentHeight: subCompHeight,
                  rowId: row.id
                }))
              });
            }
          }
        }
      });
    });

    if ((_subComponentRef$curr = subComponentRef.current) !== null && _subComponentRef$curr !== void 0 && _subComponentRef$curr.firstChild) {
      var _subComponentRef$curr2;

      subComponentHeightObserver.observe((_subComponentRef$curr2 = subComponentRef.current) === null || _subComponentRef$curr2 === void 0 ? void 0 : _subComponentRef$curr2.firstChild);
    }

    return function () {
      subComponentHeightObserver.disconnect();
    };
  }, [(_subComponentRef$curr3 = subComponentRef.current) === null || _subComponentRef$curr3 === void 0 ? void 0 : _subComponentRef$curr3.firstChild, subComponentsHeight, row.id, subComponentsHeight === null || subComponentsHeight === void 0 ? void 0 : (_subComponentsHeight$2 = subComponentsHeight[virtualRow.index]) === null || _subComponentsHeight$2 === void 0 ? void 0 : _subComponentsHeight$2.subComponentHeight, virtualRow.index]);
  return /*#__PURE__*/React.createElement("div", {
    ref: subComponentRef,
    "data-subcomponent": true,
    tabIndex: -1,
    style: {
      boxSizing: 'border-box',
      transform: "translateY(".concat(rowHeight, "px)")
    },
    className: classes.subcomponent
  }, children);
};

var VirtualTableBody = function VirtualTableBody(props) {
  var classes = props.classes,
      prepareRow = props.prepareRow,
      rows = props.rows,
      minRows = props.minRows,
      reactWindowRef = props.reactWindowRef,
      isTreeTable = props.isTreeTable,
      internalRowHeight = props.internalRowHeight,
      visibleRows = props.visibleRows,
      overscanCount = props.overscanCount,
      visibleColumns = props.visibleColumns,
      tableRef = props.tableRef,
      visibleColumnsWidth = props.visibleColumnsWidth,
      parentRef = props.parentRef,
      overscanCountHorizontal = props.overscanCountHorizontal,
      renderRowSubComponent = props.renderRowSubComponent,
      popInRowHeight = props.popInRowHeight,
      markNavigatedRow = props.markNavigatedRow,
      isRtl = props.isRtl,
      alwaysShowSubComponent = props.alwaysShowSubComponent,
      dispatch = props.dispatch,
      subComponentsHeight = props.subComponentsHeight;
  var itemCount = Math.max(minRows, rows.length);
  var overscan = overscanCount ? overscanCount : Math.floor(visibleRows / 2);
  var rowHeight = popInRowHeight !== internalRowHeight ? popInRowHeight : internalRowHeight;
  var rowVirtualizer = useVirtual({
    size: itemCount,
    parentRef: parentRef,
    estimateSize: React.useCallback(function (index) {
      var _rows$index, _subComponentsHeight$, _rows$index2;

      if (renderRowSubComponent && ((_rows$index = rows[index]) !== null && _rows$index !== void 0 && _rows$index.isExpanded || alwaysShowSubComponent) && (subComponentsHeight === null || subComponentsHeight === void 0 ? void 0 : (_subComponentsHeight$ = subComponentsHeight[index]) === null || _subComponentsHeight$ === void 0 ? void 0 : _subComponentsHeight$.rowId) === ((_rows$index2 = rows[index]) === null || _rows$index2 === void 0 ? void 0 : _rows$index2.id)) {
        var _subComponentsHeight$2, _subComponentsHeight$3;

        return rowHeight + ((_subComponentsHeight$2 = subComponentsHeight === null || subComponentsHeight === void 0 ? void 0 : (_subComponentsHeight$3 = subComponentsHeight[index]) === null || _subComponentsHeight$3 === void 0 ? void 0 : _subComponentsHeight$3.subComponentHeight) !== null && _subComponentsHeight$2 !== void 0 ? _subComponentsHeight$2 : 0);
      }

      return rowHeight;
    }, [rowHeight, rows, renderRowSubComponent, alwaysShowSubComponent, subComponentsHeight]),
    overscan: overscan
  });
  var columnVirtualizer = useVirtual({
    size: visibleColumns.length,
    parentRef: tableRef,
    estimateSize: useCallback(function (index) {
      return visibleColumnsWidth[index];
    }, [visibleColumnsWidth]),
    horizontal: true,
    overscan: overscanCountHorizontal
  });
  reactWindowRef.current = _objectSpread(_objectSpread({}, reactWindowRef.current), {}, {
    scrollToOffset: rowVirtualizer.scrollToOffset,
    scrollToIndex: rowVirtualizer.scrollToIndex
  });
  var popInColumn = useMemo(function () {
    return visibleColumns.filter(function (item) {
      return item.id !== '__ui5wcr__internal_highlight_column' && item.id !== '__ui5wcr__internal_selection_column' && item.id !== '__ui5wcr__internal_navigation_column';
    })[0];
  }, [visibleColumns]);
  return /*#__PURE__*/React.createElement("div", {
    style: {
      position: 'relative',
      height: "".concat(rowVirtualizer.totalSize, "px"),
      width: "".concat(columnVirtualizer.totalSize, "px")
    }
  }, rowVirtualizer.virtualItems.map(function (virtualRow, visibleRowIndex) {
    var _subComponentsHeight$4, _rowProps$style;

    var row = rows[virtualRow.index];
    var rowIndexWithHeader = virtualRow.index + 1;

    if (!row) {
      return /*#__PURE__*/React.createElement("div", {
        key: "empty_row_".concat(virtualRow.index),
        className: classes.tr,
        style: {
          height: "".concat(virtualRow.size, "px"),
          transform: "translateY(".concat(virtualRow.start, "px)")
        }
      });
    }

    prepareRow(row);
    var rowProps = row.getRowProps();
    var isNavigatedCell = markNavigatedRow(row);
    var RowSubComponent$1 = typeof renderRowSubComponent === 'function' ? renderRowSubComponent(row) : undefined;

    if (!RowSubComponent$1 && subComponentsHeight && subComponentsHeight !== null && subComponentsHeight !== void 0 && (_subComponentsHeight$4 = subComponentsHeight[virtualRow.index]) !== null && _subComponentsHeight$4 !== void 0 && _subComponentsHeight$4.subComponentHeight) {
      dispatch({
        type: 'SUB_COMPONENTS_HEIGHT',
        payload: _objectSpread(_objectSpread({}, subComponentsHeight), {}, _defineProperty({}, virtualRow.index, {
          subComponentHeight: 0,
          rowId: row.id
        }))
      });
    }

    return /*#__PURE__*/React.createElement("div", _extends({}, rowProps, {
      style: _objectSpread(_objectSpread({}, (_rowProps$style = rowProps.style) !== null && _rowProps$style !== void 0 ? _rowProps$style : {}), {}, {
        height: "".concat(rowHeight, "px"),
        transform: "translateY(".concat(virtualRow.start, "px)"),
        position: 'absolute'
      })
    }), RowSubComponent$1 && (row.isExpanded || alwaysShowSubComponent) && /*#__PURE__*/React.createElement(RowSubComponent, {
      subComponentsHeight: subComponentsHeight,
      virtualRow: virtualRow,
      dispatch: dispatch,
      row: row,
      rowHeight: rowHeight,
      rows: rows,
      alwaysShowSubComponent: alwaysShowSubComponent
    }, RowSubComponent$1), columnVirtualizer.virtualItems.map(function (virtualColumn, visibleColumnIndex) {
      var _row$original;

      var cell = row.cells[virtualColumn.index];
      var directionStyles = isRtl ? {
        transform: "translateX(-".concat(virtualColumn.start, "px)"),
        right: 0
      } : {
        transform: "translateX(".concat(virtualColumn.start, "px)"),
        left: 0
      };

      if (!cell) {
        return null;
      }

      var cellProps = cell.getCellProps();

      if ((_row$original = row.original) !== null && _row$original !== void 0 && _row$original.emptyRow) {
        return /*#__PURE__*/React.createElement("div", cellProps);
      }

      var contentToRender;

      if (cell.column.id === '__ui5wcr__internal_highlight_column' || cell.column.id === '__ui5wcr__internal_selection_column' || cell.column.id === '__ui5wcr__internal_navigation_column') {
        contentToRender = 'Cell';
      } else if (isTreeTable || !alwaysShowSubComponent && RowSubComponent$1) {
        contentToRender = 'Expandable';
      } else if (cell.isGrouped) {
        contentToRender = 'Grouped';
      } else if (cell.isAggregated) {
        contentToRender = 'Aggregated';
      } else if (cell.isPlaceholder) {
        contentToRender = 'RepeatedValue';
      } else {
        contentToRender = 'Cell';
      }

      return /*#__PURE__*/React.createElement("div", _extends({}, cellProps, {
        "data-visible-column-index": visibleColumnIndex,
        "data-column-index": virtualColumn.index,
        "data-visible-row-index": visibleRowIndex + 1,
        "data-row-index": rowIndexWithHeader,
        style: _objectSpread(_objectSpread({}, cellProps.style), {}, {
          position: 'absolute',
          width: "".concat(virtualColumn.size, "px"),
          top: 0
        }, directionStyles)
      }), popInRowHeight !== internalRowHeight && popInColumn.id === cell.column.id ? cell.render('PopIn', {
        contentToRender: contentToRender,
        internalRowHeight: internalRowHeight
      }) : cell.render(contentToRender, isNavigatedCell === true ? {
        isNavigatedCell: isNavigatedCell
      } : {}));
    }));
  }));
};

var VirtualTableBodyContainer = function VirtualTableBodyContainer(props) {
  var tableBodyHeight = props.tableBodyHeight,
      totalColumnsWidth = props.totalColumnsWidth,
      children = props.children,
      parentRef = props.parentRef,
      classes = props.classes,
      infiniteScroll = props.infiniteScroll,
      infiniteScrollThreshold = props.infiniteScrollThreshold,
      onLoadMore = props.onLoadMore,
      rows = props.rows,
      internalRowHeight = props.internalRowHeight,
      handleExternalScroll = props.handleExternalScroll,
      visibleRows = props.visibleRows,
      popInRowHeight = props.popInRowHeight;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isMounted = _useState2[0],
      setIsMounted = _useState2[1];

  useEffect(function () {
    if (parentRef.current) {
      setIsMounted(true);
    }
  }, [parentRef.current]);
  var classNames = clsx(classes.tbody);
  var lastScrollTop = useRef(0);
  var firedInfiniteLoadEvents = useRef(new Set());
  var prevRowsLength = useRef(rows.length);
  useEffect(function () {
    if (prevRowsLength.current > rows.length) {
      firedInfiniteLoadEvents.current.clear();
      parentRef.current.scrollTop = 0;
      lastScrollTop.current = 0;
    }
  }, [rows.length, prevRowsLength.current]);
  useEffect(function () {
    prevRowsLength.current = rows.length;
  }, [rows.length]);
  var onScroll = useCallback(function (event) {
    handleExternalScroll();
    var scrollOffset = event.target.scrollTop;
    var isScrollingDown = lastScrollTop.current < scrollOffset;

    if (isScrollingDown && infiniteScroll) {
      lastScrollTop.current = scrollOffset;
      var currentLastRow = Math.floor(scrollOffset / popInRowHeight) + (popInRowHeight === internalRowHeight ? visibleRows : Math.floor(tableBodyHeight / popInRowHeight));

      if (rows.length - currentLastRow < infiniteScrollThreshold) {
        if (!firedInfiniteLoadEvents.current.has(rows.length)) {
          var rootNodes = rows.filter(function (row) {
            return row.depth === 0;
          });
          onLoadMore({
            detail: {
              rowCount: rootNodes.length,
              totalRowCount: rows.length
            }
          });
        }

        firedInfiniteLoadEvents.current.add(rows.length);
      }
    }
  }, [infiniteScroll, infiniteScrollThreshold, onLoadMore, rows.length, internalRowHeight, firedInfiniteLoadEvents, lastScrollTop, handleExternalScroll, popInRowHeight, tableBodyHeight]);
  return /*#__PURE__*/React.createElement("div", {
    className: classNames,
    ref: parentRef,
    onScroll: onScroll,
    style: {
      position: 'relative',
      overflowY: 'auto',
      height: "".concat(tableBodyHeight, "px"),
      width: "".concat(totalColumnsWidth, "px")
    },
    "data-component-name": "AnalyticalTableBody"
  }, isMounted && children);
};

var stateReducer = function stateReducer(prevState, action) {
  var payload = action.payload;

  if (prevState.isRtl && action.type === actions.columnResizing) {
    var clientX = action.clientX;
    var _prevState$columnResi = prevState.columnResizing,
        startX = _prevState$columnResi.startX,
        columnWidth = _prevState$columnResi.columnWidth,
        headerIdWidths = _prevState$columnResi.headerIdWidths;
    var deltaX = startX - clientX;
    var percentageDeltaX = deltaX / columnWidth;
    var newColumnWidths = {};
    headerIdWidths.forEach(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          headerId = _ref2[0],
          headerWidth = _ref2[1];

      newColumnWidths[headerId] = Math.max(headerWidth + headerWidth * percentageDeltaX, 0);
    });
    return _objectSpread(_objectSpread({}, prevState), {}, {
      columnResizing: _objectSpread(_objectSpread({}, prevState.columnResizing), {}, {
        columnWidths: _objectSpread(_objectSpread({}, prevState.columnResizing.columnWidths), newColumnWidths)
      })
    });
  }

  switch (action.type) {
    case 'TABLE_RESIZE':
      return _objectSpread(_objectSpread({}, prevState), {}, {
        tableClientWidth: payload.tableClientWidth
      });

    case 'VISIBLE_ROWS':
      return _objectSpread(_objectSpread({}, prevState), {}, {
        visibleRows: payload.visibleRows
      });

    case 'TABLE_SCROLLING_ENABLED':
      return _objectSpread(_objectSpread({}, prevState), {}, {
        isScrollable: payload.isScrollable
      });

    case 'SET_SELECTED_ROW_IDS':
      return _objectSpread(_objectSpread({}, prevState), {}, {
        selectedRowIds: payload.selectedRowIds
      });

    case 'SET_POPIN_COLUMNS':
      return _objectSpread(_objectSpread({}, prevState), {}, {
        popInColumns: payload
      });

    case 'INTERACTIVE_ROWS_HAVE_POPIN':
      return _objectSpread(_objectSpread({}, prevState), {}, {
        interactiveRowsHavePopIn: payload
      });

    case 'IS_RTL':
      return _objectSpread(_objectSpread({}, prevState), {}, {
        isRtl: payload.isRtl
      });

    case 'SUB_COMPONENTS_HEIGHT':
      return _objectSpread(_objectSpread({}, prevState), {}, {
        subComponentsHeight: payload
      });

    default:
      return prevState;
  }
};

var styles = {
  minHeight: '1.5rem',
  display: 'flex',
  alignItems: 'center'
};
var TitleBar = /*#__PURE__*/forwardRef(function (props, ref) {
  var children = props.children;
  return /*#__PURE__*/React.createElement("div", {
    style: styles,
    ref: ref
  }, typeof children === 'string' && /*#__PURE__*/React.createElement(Title, null, children), /*#__PURE__*/isValidElement(children) && children);
});

var orderByFn = function orderByFn(rows, functions, directions) {
  var wrapSortFn = function wrapSortFn(sortFn, index) {
    var desc = directions[index] === false || directions[index] === 'desc';
    return function (rowA, rowB) {
      var _rowA$original, _rowB$original, _rowA$original2, _rowB$original2, _rowA$original3, _rowB$original3;

      if ((_rowA$original = rowA.original) !== null && _rowA$original !== void 0 && _rowA$original.emptyRow && !((_rowB$original = rowB.original) !== null && _rowB$original !== void 0 && _rowB$original.emptyRow)) {
        return desc ? -1 : 1;
      }

      if (!((_rowA$original2 = rowA.original) !== null && _rowA$original2 !== void 0 && _rowA$original2.emptyRow) && (_rowB$original2 = rowB.original) !== null && _rowB$original2 !== void 0 && _rowB$original2.emptyRow) {
        return desc ? 1 : -1;
      }

      if ((_rowA$original3 = rowA.original) !== null && _rowA$original3 !== void 0 && _rowA$original3.emptyRow && (_rowB$original3 = rowB.original) !== null && _rowB$original3 !== void 0 && _rowB$original3.emptyRow) {
        return 0;
      }

      return sortFn(rowA, rowB);
    };
  };

  var wrappedSortfunctions = functions.map(wrapSortFn);
  return defaultOrderByFn(rows, wrappedSortfunctions, directions);
}; // copied from https://github.com/tannerlinsley/react-table/blob/f97fb98509d0b27cc0bebcf3137872afe4f2809e/src/utils.js#L320-L347 (13. Jan 2021)
var tagNamesWhichShouldNotSelectARow = new Set(['UI5-AVATAR', 'UI5-BUTTON', 'UI5-CALENDAR', 'UI5-CHECKBOX', 'UI5-COLOR-PICKER', 'UI5-COMBOBOX', 'UI5-DATE-PICKER', 'UI5-DATERANGE-PICKER', 'UI5-DATETIME-PICKER', 'UI5-DURATION-PICKER', 'UI5-FILE-UPLOADER', 'UI5-ICON', 'UI5-INPUT', 'UI5-LINK', 'UI5-MULTI-COMBOBOX', 'UI5-MULTI-INPUT', 'UI5-RADIO-BUTTON', 'UI5-RANGE-SLIDER', 'UI5-RATING-INDICATOR', 'UI5-SEGMENTED-BUTTON', 'UI5-SELECT', 'UI5-SLIDER', 'UI5-STEP-INPUT', 'UI5-SWITCH', 'UI5-TEXT-AREA', 'UI5-TIME-PICKER', 'UI5-TOGGLE-BUTTON', 'UI5-UPLOAD-COLLECTION']);

var verticalResizerStyles = {
  container: {
    overflow: 'hidden',
    position: 'relative',
    height: '5px',
    textAlign: 'center',
    cursor: 'row-resize',
    boxSizing: 'border-box',
    '&:hover': {
      backgroundColor: ThemingParameters.sapContent_DragAndDropActiveColor,
      color: ThemingParameters.sapHighlightTextColor
    },
    '&:before': {
      fontSize: '10px',
      fontFamily: ThemingParameters.sapFontFamily,
      top: 0,
      position: 'absolute',
      content: "\"\u2981\u2981\u2981\u2981\"",
      lineHeight: '5px',
      pointerEvents: 'none'
    }
  },
  resizer: {
    position: 'absolute',
    opacity: 0.5,
    backgroundColor: ThemingParameters.sapContent_DragAndDropActiveColor,
    height: '5px'
  }
};
var useStyles$1 = createUseStyles(verticalResizerStyles, {
  name: 'VerticalResizer'
});

var isTouchEvent = function isTouchEvent(e, touchEvent) {
  if (e.type === touchEvent) {
    return !(e.touches && e.touches.length > 1);
  }

  return false;
};

var VerticalResizer = function VerticalResizer(props) {
  var _analyticalTableRef$c, _verticalResizerRef$c7, _verticalResizerRef$c8;

  var analyticalTableRef = props.analyticalTableRef,
      dispatch = props.dispatch,
      extensionsHeight = props.extensionsHeight,
      internalRowHeight = props.internalRowHeight,
      hasPopInColumns = props.hasPopInColumns,
      popInRowHeight = props.popInRowHeight,
      portalContainer = props.portalContainer;
  var classes = useStyles$1();
  var startY = useRef(null);
  var verticalResizerRef = useRef(null);

  var _useState = useState(undefined),
      _useState2 = _slicedToArray(_useState, 2),
      resizerPosition = _useState2[0],
      setResizerPosition = _useState2[1];

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isDragging = _useState4[0],
      setIsDragging = _useState4[1];

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      mountTouchEvents = _useState6[0],
      setMountTouchEvents = _useState6[1];

  var i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  var handleResizeStart = useCallback(function (e) {
    e.preventDefault();
    var touchEvent = isTouchEvent(e, 'touchstart');
    startY.current = touchEvent ? Math.round(e.touches[0].pageY) : e.pageY;
    setMountTouchEvents(touchEvent);
    setIsDragging(true);
  }, [startY.current, setIsDragging]);
  var handleMove = useCallback(function (e) {
    setResizerPosition(function (prev) {
      return _objectSpread(_objectSpread({}, prev), {}, {
        top: isTouchEvent(e, 'touchmove') ? Math.round(e.touches[0].pageY) : e.pageY
      });
    });
  }, [setResizerPosition]);
  var handleResizeEnd = useCallback(function (e) {
    setIsDragging(false);
    var rowCount = Math.floor((analyticalTableRef.current.clientHeight + (isTouchEvent(e, 'touchend') ? Math.round(e.changedTouches[0].pageY) : e.pageY) - startY.current - extensionsHeight - 5
    /*resizer height*/
    ) / popInRowHeight);

    if (hasPopInColumns) {
      dispatch({
        type: 'INTERACTIVE_ROWS_HAVE_POPIN',
        payload: true
      });
    }

    dispatch({
      type: 'VISIBLE_ROWS',
      payload: {
        visibleRows: rowCount
      }
    });
  }, [(_analyticalTableRef$c = analyticalTableRef.current) === null || _analyticalTableRef$c === void 0 ? void 0 : _analyticalTableRef$c.clientHeight, startY.current, extensionsHeight, internalRowHeight, dispatch]);
  useEffect(function () {
    var removeEventListeners = function removeEventListeners() {
      if (mountTouchEvents) {
        document.removeEventListener('touchmove', handleMove);
        document.removeEventListener('touchend', handleResizeEnd);
      } else {
        document.removeEventListener('mouseup', handleResizeEnd);
        document.removeEventListener('mousemove', handleMove);
      }
    };

    if (isDragging) {
      if (mountTouchEvents) {
        document.addEventListener('touchmove', handleMove);
        document.addEventListener('touchend', handleResizeEnd);
      } else {
        document.addEventListener('mousemove', handleMove);
        document.addEventListener('mouseup', handleResizeEnd);
      }
    } else {
      removeEventListeners();
    }

    return function () {
      removeEventListeners();
    };
  }, [isDragging]);
  useEffect(function () {
    var _verticalResizerRef$c, _verticalResizerRef$c2, _verticalResizerRef$c3, _verticalResizerRef$c4, _verticalResizerRef$c5, _verticalResizerRef$c6;

    var resizerPosTop = ((_verticalResizerRef$c = verticalResizerRef.current) === null || _verticalResizerRef$c === void 0 ? void 0 : (_verticalResizerRef$c2 = _verticalResizerRef$c.getBoundingClientRect()) === null || _verticalResizerRef$c2 === void 0 ? void 0 : _verticalResizerRef$c2.top) + window.scrollY;
    var resizerPosLeft = ((_verticalResizerRef$c3 = verticalResizerRef.current) === null || _verticalResizerRef$c3 === void 0 ? void 0 : (_verticalResizerRef$c4 = _verticalResizerRef$c3.getBoundingClientRect()) === null || _verticalResizerRef$c4 === void 0 ? void 0 : _verticalResizerRef$c4.left) + window.scrollX;
    var resizerPosWidth = (_verticalResizerRef$c5 = verticalResizerRef.current) === null || _verticalResizerRef$c5 === void 0 ? void 0 : (_verticalResizerRef$c6 = _verticalResizerRef$c5.getBoundingClientRect()) === null || _verticalResizerRef$c6 === void 0 ? void 0 : _verticalResizerRef$c6.width;

    if (!isDragging && resizerPosTop > 0) {
      setResizerPosition({
        left: resizerPosLeft,
        top: resizerPosTop,
        width: resizerPosWidth
      });
    }
  }, [(_verticalResizerRef$c7 = verticalResizerRef.current) === null || _verticalResizerRef$c7 === void 0 ? void 0 : (_verticalResizerRef$c8 = _verticalResizerRef$c7.getBoundingClientRect()) === null || _verticalResizerRef$c8 === void 0 ? void 0 : _verticalResizerRef$c8.top, isDragging]);
  useEffect(function () {
    return function () {
      dispatch({
        type: 'WITH_POPIN',
        payload: false
      });
    };
  }, []);
  return /*#__PURE__*/React.createElement("div", {
    className: classes.container,
    ref: verticalResizerRef,
    onMouseDown: handleResizeStart,
    onTouchStart: handleResizeStart,
    role: "separator",
    title: i18nBundle.getText(DRAG_TO_RESIZE)
  }, resizerPosition && isDragging && /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement("div", {
    className: classes.resizer,
    style: {
      top: resizerPosition.top,
      left: resizerPosition.left,
      width: resizerPosition.width
    }
  }), portalContainer));
};

var _excluded = ["alternateRowColor", "alwaysShowSubComponent", "className", "columnOrder", "columns", "extension", "filterable", "globalFilterValue", "groupBy", "groupable", "header", "highlightField", "infiniteScroll", "infiniteScrollThreshold", "isTreeTable", "loading", "markNavigatedRow", "minRows", "noDataText", "overscanCount", "overscanCountHorizontal", "portalContainer", "reactTableOptions", "renderRowSubComponent", "rowHeight", "scaleWidthMode", "selectedRowIds", "selectionBehavior", "selectionMode", "sortable", "style", "subRowsKey", "tableHooks", "tableInstance", "tooltip", "visibleRowCountMode", "visibleRows", "withNavigationHighlight", "withRowHighlight", "onGroup", "onLoadMore", "onRowClick", "onRowExpandChange", "onRowSelected", "onSort", "LoadingComponent", "NoDataComponent"],
    _excluded2 = ["onColumnsReordered", "data"];
var useStyles = createUseStyles(styles$8, {
  name: 'AnalyticalTable'
});
/**
 * The `AnalyticalTable` provides a set of convenient functions for responsive table design, including virtualization of rows and columns, infinite scrolling and customizable columns that will, unless otherwise defined, distribute the available space equally among themselves.
 * It also provides several possibilities for working with the data, including sorting, filtering, grouping and aggregation.
 */

var AnalyticalTable = /*#__PURE__*/forwardRef(function (props, ref) {
  var _titleBarRef$current$, _titleBarRef$current, _extensionRef$current, _extensionRef$current2, _headerRef$current$of, _headerRef$current, _tableRef$current, _tableState$popInColu, _tableState$visibleRo, _analyticalTableRef$c5, _analyticalTableRef$c6, _analyticalTableRef$c7, _tableState$popInColu3, _props$data, _props$data2, _props$data3, _props$data4, _tableState$popInColu4;

  var alternateRowColor = props.alternateRowColor,
      alwaysShowSubComponent = props.alwaysShowSubComponent,
      className = props.className,
      columnOrder = props.columnOrder,
      columns = props.columns,
      extension = props.extension,
      filterable = props.filterable,
      globalFilterValue = props.globalFilterValue,
      groupBy = props.groupBy,
      groupable = props.groupable,
      header = props.header,
      highlightField = props.highlightField,
      infiniteScroll = props.infiniteScroll,
      infiniteScrollThreshold = props.infiniteScrollThreshold,
      isTreeTable = props.isTreeTable,
      loading = props.loading,
      markNavigatedRow = props.markNavigatedRow,
      minRows = props.minRows,
      noDataText = props.noDataText,
      overscanCount = props.overscanCount,
      overscanCountHorizontal = props.overscanCountHorizontal,
      portalContainer = props.portalContainer,
      reactTableOptions = props.reactTableOptions,
      renderRowSubComponent = props.renderRowSubComponent,
      rowHeight = props.rowHeight,
      scaleWidthMode = props.scaleWidthMode,
      selectedRowIds = props.selectedRowIds,
      selectionBehavior = props.selectionBehavior,
      selectionMode = props.selectionMode,
      sortable = props.sortable,
      style = props.style,
      subRowsKey = props.subRowsKey,
      tableHooks = props.tableHooks,
      tableInstance = props.tableInstance,
      tooltip = props.tooltip,
      visibleRowCountMode = props.visibleRowCountMode,
      visibleRows = props.visibleRows,
      withNavigationHighlight = props.withNavigationHighlight,
      withRowHighlight = props.withRowHighlight,
      onGroup = props.onGroup,
      onLoadMore = props.onLoadMore,
      onRowClick = props.onRowClick,
      onRowExpandChange = props.onRowExpandChange,
      onRowSelected = props.onRowSelected,
      onSort = props.onSort,
      LoadingComponent = props.LoadingComponent,
      NoDataComponent = props.NoDataComponent,
      rest = _objectWithoutProperties(props, _excluded);

  useDeprecationNoticeForTooltip('AnalyticalTable', props.tooltip);
  var classes = useStyles();

  var _useTableScrollHandle = useTableScrollHandles(ref),
      _useTableScrollHandle2 = _slicedToArray(_useTableScrollHandle, 2),
      analyticalTableRef = _useTableScrollHandle2[0],
      reactWindowRef = _useTableScrollHandle2[1];

  var tableRef = useRef();
  var isRtl = useIsRTL(analyticalTableRef);
  var getSubRows = useCallback(function (row) {
    return row[subRowsKey] || [];
  }, [subRowsKey]);
  var data = useMemo(function () {
    if (props.data.length === 0) {
      return props.data;
    }

    if (minRows > props.data.length) {
      var missingRows = minRows - props.data.length;
      var emptyRows = Array.from({
        length: missingRows
      }, function (v, i) {
        return i;
      }).map(function () {
        return {
          emptyRow: true
        };
      });
      return [].concat(_toConsumableArray(props.data), _toConsumableArray(emptyRows));
    }

    return props.data;
  }, [props.data, minRows]);
  var tableInstanceRef = useRef(null);
  tableInstanceRef.current = useTable.apply(void 0, [_objectSpread({
    columns: columns,
    data: data,
    defaultColumn: DefaultColumn,
    orderByFn: orderByFn,
    getSubRows: getSubRows,
    stateReducer: stateReducer,
    disableFilters: !filterable,
    disableSortBy: !sortable,
    disableGroupBy: isTreeTable || renderRowSubComponent ? true : !groupable,
    selectSubRows: false,
    webComponentsReactProperties: {
      tagNamesWhichShouldNotSelectARow: tagNamesWhichShouldNotSelectARow,
      tableRef: tableRef,
      selectionMode: selectionMode,
      selectionBehavior: selectionBehavior,
      classes: classes,
      onRowSelected: onRowSelected,
      onRowClick: onRowClick,
      onRowExpandChange: onRowExpandChange,
      isTreeTable: isTreeTable,
      alternateRowColor: alternateRowColor,
      scaleWidthMode: scaleWidthMode,
      loading: loading,
      withRowHighlight: withRowHighlight,
      highlightField: highlightField,
      withNavigationHighlight: withNavigationHighlight,
      markNavigatedRow: markNavigatedRow,
      renderRowSubComponent: renderRowSubComponent,
      alwaysShowSubComponent: alwaysShowSubComponent,
      reactWindowRef: reactWindowRef
    }
  }, reactTableOptions), useFilters, useGlobalFilter, useColumnOrder, useGroupBy, useSortBy, useExpanded, useRowSelect, useResizeColumns, useRowSelectionColumn, useSingleRowStateSelection, useRowHighlight, useRowNavigationIndicators, useDynamicColumnWidths, useStyling, useToggleRowExpand, usePopIn, useVisibleColumnsWidth, useKeyboardNavigation].concat(_toConsumableArray(tableHooks)));
  var _tableInstanceRef$cur = tableInstanceRef.current,
      getTableProps = _tableInstanceRef$cur.getTableProps,
      headerGroups = _tableInstanceRef$cur.headerGroups,
      rows = _tableInstanceRef$cur.rows,
      prepareRow = _tableInstanceRef$cur.prepareRow,
      tableState = _tableInstanceRef$cur.state,
      tableInternalColumns = _tableInstanceRef$cur.columns,
      setColumnOrder = _tableInstanceRef$cur.setColumnOrder,
      dispatch = _tableInstanceRef$cur.dispatch,
      totalColumnsWidth = _tableInstanceRef$cur.totalColumnsWidth,
      visibleColumns = _tableInstanceRef$cur.visibleColumns,
      visibleColumnsWidth = _tableInstanceRef$cur.visibleColumnsWidth,
      setGroupBy = _tableInstanceRef$cur.setGroupBy,
      setGlobalFilter = _tableInstanceRef$cur.setGlobalFilter;

  if (tableInstance && {}.hasOwnProperty.call(tableInstance, 'current')) {
    tableInstance.current = tableInstanceRef.current;
  }

  if (typeof tableInstance === 'function') {
    tableInstance(tableInstanceRef.current);
  }

  var titleBarRef = useRef(null);
  var extensionRef = useRef(null);
  var headerRef = useRef(null);
  var extensionsHeight = ((_titleBarRef$current$ = (_titleBarRef$current = titleBarRef.current) === null || _titleBarRef$current === void 0 ? void 0 : _titleBarRef$current.offsetHeight) !== null && _titleBarRef$current$ !== void 0 ? _titleBarRef$current$ : 0) + ((_extensionRef$current = (_extensionRef$current2 = extensionRef.current) === null || _extensionRef$current2 === void 0 ? void 0 : _extensionRef$current2.offsetHeight) !== null && _extensionRef$current !== void 0 ? _extensionRef$current : 0) + ((_headerRef$current$of = (_headerRef$current = headerRef.current) === null || _headerRef$current === void 0 ? void 0 : _headerRef$current.offsetHeight) !== null && _headerRef$current$of !== void 0 ? _headerRef$current$of : 0);
  var calcRowHeight = parseInt(getComputedStyle((_tableRef$current = tableRef.current) !== null && _tableRef$current !== void 0 ? _tableRef$current : document.body).getPropertyValue('--sapWcrAnalyticalTableRowHeight') || '44');
  var internalRowHeight = rowHeight !== null && rowHeight !== void 0 ? rowHeight : calcRowHeight;
  var popInRowHeight = (tableState === null || tableState === void 0 ? void 0 : (_tableState$popInColu = tableState.popInColumns) === null || _tableState$popInColu === void 0 ? void 0 : _tableState$popInColu.length) > 0 ? internalRowHeight + tableState.popInColumns.length * (internalRowHeight + 16) : internalRowHeight;
  var internalVisibleRowCount = (_tableState$visibleRo = tableState.visibleRows) !== null && _tableState$visibleRo !== void 0 ? _tableState$visibleRo : visibleRows;
  var updateTableClientWidth = useCallback(function () {
    if (tableRef.current) {
      dispatch({
        type: 'TABLE_RESIZE',
        payload: {
          tableClientWidth: tableRef.current.clientWidth
        }
      });
    }
  }, [tableRef.current]);
  var updateRowsCount = useCallback(function () {
    var _analyticalTableRef$c;

    if (visibleRowCountMode === TableVisibleRowCountMode.Auto && (_analyticalTableRef$c = analyticalTableRef.current) !== null && _analyticalTableRef$c !== void 0 && _analyticalTableRef$c.parentElement) {
      var _analyticalTableRef$c2, _analyticalTableRef$c3, _analyticalTableRef$c4;

      var parentElement = (_analyticalTableRef$c2 = analyticalTableRef.current) === null || _analyticalTableRef$c2 === void 0 ? void 0 : _analyticalTableRef$c2.parentElement;
      var tableYPosition = parentElement && getComputedStyle(parentElement).position === 'relative' && (_analyticalTableRef$c3 = analyticalTableRef.current) !== null && _analyticalTableRef$c3 !== void 0 && _analyticalTableRef$c3.offsetTop ? (_analyticalTableRef$c4 = analyticalTableRef.current) === null || _analyticalTableRef$c4 === void 0 ? void 0 : _analyticalTableRef$c4.offsetTop : 0;
      var parentHeight = parentElement === null || parentElement === void 0 ? void 0 : parentElement.getBoundingClientRect().height;
      var tableHeight = parentHeight ? parentHeight - tableYPosition : 0;
      var rowCount = Math.floor((tableHeight - extensionsHeight) / popInRowHeight);
      dispatch({
        type: 'VISIBLE_ROWS',
        payload: {
          visibleRows: rowCount
        }
      });
    }
  }, [(_analyticalTableRef$c5 = analyticalTableRef.current) === null || _analyticalTableRef$c5 === void 0 ? void 0 : (_analyticalTableRef$c6 = _analyticalTableRef$c5.parentElement) === null || _analyticalTableRef$c6 === void 0 ? void 0 : _analyticalTableRef$c6.getBoundingClientRect().height, (_analyticalTableRef$c7 = analyticalTableRef.current) === null || _analyticalTableRef$c7 === void 0 ? void 0 : _analyticalTableRef$c7.getBoundingClientRect().y, extensionsHeight, popInRowHeight, visibleRowCountMode]);
  useEffect(function () {
    setGlobalFilter(globalFilterValue);
  }, [globalFilterValue, setGlobalFilter]);
  useEffect(function () {
    var _analyticalTableRef$c8;

    var tableWidthObserver = new ResizeObserver(debounce(updateTableClientWidth, 500));
    tableWidthObserver.observe(tableRef.current);
    var parentHeightObserver = new ResizeObserver(debounce(updateRowsCount, 500));
    parentHeightObserver.observe((_analyticalTableRef$c8 = analyticalTableRef.current) === null || _analyticalTableRef$c8 === void 0 ? void 0 : _analyticalTableRef$c8.parentElement);
    return function () {
      tableWidthObserver.disconnect();
      parentHeightObserver.disconnect();
    };
  }, [updateTableClientWidth, updateRowsCount]);
  useIsomorphicLayoutEffect(function () {
    dispatch({
      type: 'IS_RTL',
      payload: {
        isRtl: isRtl
      }
    });
  }, [isRtl]);
  useIsomorphicLayoutEffect(function () {
    updateTableClientWidth();
  }, [updateTableClientWidth]);
  useIsomorphicLayoutEffect(function () {
    updateRowsCount();
  }, [updateRowsCount]);
  useEffect(function () {
    if (tableState.visibleRows !== undefined && visibleRowCountMode === TableVisibleRowCountMode.Fixed) {
      dispatch({
        type: 'VISIBLE_ROWS',
        payload: {
          visibleRows: undefined
        }
      });
    }
  }, [visibleRowCountMode, tableState.visibleRows]);
  useEffect(function () {
    setGroupBy(groupBy);
  }, [groupBy, setGroupBy]);
  useEffect(function () {
    dispatch({
      type: 'SET_SELECTED_ROW_IDS',
      payload: {
        selectedRowIds: selectedRowIds
      }
    });
  }, [selectedRowIds]);
  useEffect(function () {
    var _tableState$popInColu2;

    if (tableState !== null && tableState !== void 0 && tableState.interactiveRowsHavePopIn && (!(tableState !== null && tableState !== void 0 && tableState.popInColumns) || (tableState === null || tableState === void 0 ? void 0 : (_tableState$popInColu2 = tableState.popInColumns) === null || _tableState$popInColu2 === void 0 ? void 0 : _tableState$popInColu2.length) === 0)) {
      dispatch({
        type: 'WITH_POPIN',
        payload: false
      });
    }
  }, [tableState === null || tableState === void 0 ? void 0 : tableState.interactiveRowsHavePopIn, tableState === null || tableState === void 0 ? void 0 : (_tableState$popInColu3 = tableState.popInColumns) === null || _tableState$popInColu3 === void 0 ? void 0 : _tableState$popInColu3.length]);
  var tableBodyHeight = useMemo(function () {
    var rowNum = rows.length < internalVisibleRowCount ? Math.max(rows.length, minRows) : internalVisibleRowCount;
    var rowHeight = visibleRowCountMode === TableVisibleRowCountMode.Auto || tableState !== null && tableState !== void 0 && tableState.interactiveRowsHavePopIn ? popInRowHeight : internalRowHeight;
    return rowHeight * rowNum;
  }, [internalRowHeight, rows.length, internalVisibleRowCount, minRows, popInRowHeight, visibleRowCountMode, tableState === null || tableState === void 0 ? void 0 : tableState.interactiveRowsHavePopIn]); // scroll bar detection

  useEffect(function () {
    var visibleRowCount = rows.length < internalVisibleRowCount ? Math.max(rows.length, minRows) : internalVisibleRowCount;

    if (popInRowHeight !== internalRowHeight) {
      dispatch({
        type: 'TABLE_SCROLLING_ENABLED',
        payload: {
          isScrollable: visibleRowCount * popInRowHeight > tableBodyHeight || rows.length > visibleRowCount
        }
      });
    } else {
      dispatch({
        type: 'TABLE_SCROLLING_ENABLED',
        payload: {
          isScrollable: rows.length > visibleRowCount
        }
      });
    }
  }, [rows.length, minRows, internalVisibleRowCount, popInRowHeight, tableBodyHeight]);
  var noDataStyles = {
    height: "".concat(tableBodyHeight, "px"),
    width: totalColumnsWidth ? "".concat(totalColumnsWidth, "px") : '100%'
  };
  var onGroupByChanged = useCallback(function (e) {
    var _e$detail = e.detail,
        column = _e$detail.column,
        isGrouped = _e$detail.isGrouped;
    var groupedColumns = [];

    if (isGrouped) {
      groupedColumns = [].concat(_toConsumableArray(tableState.groupBy), [column.id]);
    } else {
      groupedColumns = tableState.groupBy.filter(function (group) {
        return group !== column.id;
      });
    }

    setGroupBy(groupedColumns);
    onGroup(enrichEventWithDetails(e, {
      column: column,
      groupedColumns: groupedColumns
    }));
  }, [tableState.groupBy, onGroup, setGroupBy]);
  useEffect(function () {
    if ((columnOrder === null || columnOrder === void 0 ? void 0 : columnOrder.length) > 0) {
      setColumnOrder(columnOrder);
    }
  }, [columnOrder]);

  var _useDragAndDrop = useDragAndDrop(props, isRtl, setColumnOrder, tableState.columnOrder, tableState.columnResizing, tableInternalColumns),
      _useDragAndDrop2 = _slicedToArray(_useDragAndDrop, 6),
      dragOver = _useDragAndDrop2[0],
      handleDragEnter = _useDragAndDrop2[1],
      handleDragStart = _useDragAndDrop2[2],
      handleDragOver = _useDragAndDrop2[3],
      handleOnDrop = _useDragAndDrop2[4],
      handleOnDragEnd = _useDragAndDrop2[5];

  rest.onColumnsReordered;
      rest.data;
      var propsWithoutOmitted = _objectWithoutProperties(rest, _excluded2);

  var inlineStyle = useMemo(function () {
    var tableStyles = {
      maxWidth: '100%',
      overflowX: 'auto',
      display: 'flex',
      flexDirection: 'column'
    };

    if (!!rowHeight) {
      tableStyles['--sapWcrAnalyticalTableRowHeight'] = "".concat(rowHeight, "px");
    }

    if (tableState.tableClientWidth > 0) {
      var _styles = _objectSpread(_objectSpread({}, tableStyles), style);

      if (totalColumnsWidth < tableState.tableClientWidth) {
        return _objectSpread(_objectSpread({}, _styles), {}, {
          borderBottom: "1px solid ".concat(ThemingParameters.sapList_BorderColor)
        });
      }

      return _styles;
    }

    return _objectSpread(_objectSpread(_objectSpread({}, tableStyles), style), {}, {
      visibility: 'hidden'
    });
  }, [tableState.tableClientWidth, style, rowHeight, totalColumnsWidth]);
  var parentRef = useRef(null);
  var verticalScrollBarRef = useRef(null);

  var handleBodyScroll = function handleBodyScroll() {
    if (verticalScrollBarRef.current && verticalScrollBarRef.current.scrollTop !== parentRef.current.scrollTop) {
      if (!parentRef.current.isExternalVerticalScroll) {
        verticalScrollBarRef.current.scrollTop = parentRef.current.scrollTop;
        verticalScrollBarRef.current.isExternalVerticalScroll = true;
      }

      parentRef.current.isExternalVerticalScroll = false;
    }
  };

  var handleVerticalScrollBarScroll = function handleVerticalScrollBarScroll() {
    if (!verticalScrollBarRef.current.isExternalVerticalScroll) {
      parentRef.current.scrollTop = verticalScrollBarRef.current.scrollTop;
      parentRef.current.isExternalVerticalScroll = true;
    }

    verticalScrollBarRef.current.isExternalVerticalScroll = false;
  };

  var tableClasses = clsx(classes.table, GlobalStyleClasses.sapScrollBar, withNavigationHighlight && classes.hasNavigationIndicator);
  return /*#__PURE__*/React.createElement("div", _extends({
    className: className,
    style: inlineStyle,
    title: tooltip,
    ref: analyticalTableRef
  }, propsWithoutOmitted), header && /*#__PURE__*/React.createElement(TitleBar, {
    ref: titleBarRef
  }, header), extension && /*#__PURE__*/React.createElement("div", {
    ref: extensionRef
  }, extension), /*#__PURE__*/React.createElement(FlexBox, null, /*#__PURE__*/React.createElement("div", _extends({}, getTableProps(), {
    tabIndex: 0,
    role: "grid",
    "aria-rowcount": rows.length,
    "aria-colcount": visibleColumns.length,
    "data-per-page": internalVisibleRowCount,
    "data-component-name": "AnalyticalTableContainer",
    ref: tableRef,
    className: tableClasses
  }), /*#__PURE__*/React.createElement("div", {
    className: classes.tableHeaderBackgroundElement
  }), headerGroups.map(function (headerGroup) {
    var headerProps = {};

    if (headerGroup.getHeaderGroupProps) {
      headerProps = headerGroup.getHeaderGroupProps();
    }

    return tableRef.current && /*#__PURE__*/React.createElement(ColumnHeaderContainer, {
      ref: headerRef,
      key: headerProps.key,
      reactWindowRef: reactWindowRef,
      tableRef: tableRef,
      resizeInfo: tableState.columnResizing,
      visibleColumnsWidth: visibleColumnsWidth,
      headerProps: headerProps,
      headerGroup: headerGroup,
      overscanCountHorizontal: overscanCountHorizontal,
      onSort: onSort,
      onGroupByChanged: onGroupByChanged,
      onDragStart: handleDragStart,
      onDragOver: handleDragOver,
      onDrop: handleOnDrop,
      onDragEnter: handleDragEnter,
      onDragEnd: handleOnDragEnd,
      dragOver: dragOver,
      isRtl: isRtl,
      portalContainer: portalContainer
    });
  }), loading && ((_props$data = props.data) === null || _props$data === void 0 ? void 0 : _props$data.length) > 0 && /*#__PURE__*/React.createElement(LoadingComponent, {
    style: {
      width: "".concat(totalColumnsWidth, "px")
    }
  }), loading && ((_props$data2 = props.data) === null || _props$data2 === void 0 ? void 0 : _props$data2.length) === 0 && /*#__PURE__*/React.createElement(TablePlaceholder, {
    isRtl: isRtl,
    columns: visibleColumns,
    rows: props.minRows,
    style: noDataStyles,
    rowHeight: internalRowHeight,
    tableWidth: totalColumnsWidth
  }), !loading && ((_props$data3 = props.data) === null || _props$data3 === void 0 ? void 0 : _props$data3.length) === 0 && /*#__PURE__*/React.createElement(NoDataComponent, {
    noDataText: noDataText,
    className: classes.noDataContainer,
    style: noDataStyles
  }), ((_props$data4 = props.data) === null || _props$data4 === void 0 ? void 0 : _props$data4.length) > 0 && tableRef.current && /*#__PURE__*/React.createElement(VirtualTableBodyContainer, {
    tableBodyHeight: tableBodyHeight,
    totalColumnsWidth: totalColumnsWidth,
    parentRef: parentRef,
    classes: classes,
    infiniteScroll: infiniteScroll,
    infiniteScrollThreshold: infiniteScrollThreshold,
    onLoadMore: onLoadMore,
    internalRowHeight: internalRowHeight,
    popInRowHeight: popInRowHeight,
    rows: rows,
    handleExternalScroll: handleBodyScroll,
    visibleRows: internalVisibleRowCount
  }, /*#__PURE__*/React.createElement(VirtualTableBody, {
    classes: classes,
    prepareRow: prepareRow,
    rows: rows,
    minRows: minRows,
    reactWindowRef: reactWindowRef,
    isTreeTable: isTreeTable,
    internalRowHeight: internalRowHeight,
    popInRowHeight: popInRowHeight,
    visibleRows: internalVisibleRowCount,
    alternateRowColor: alternateRowColor,
    overscanCount: overscanCount,
    tableRef: tableRef,
    parentRef: parentRef,
    visibleColumns: visibleColumns,
    visibleColumnsWidth: visibleColumnsWidth,
    overscanCountHorizontal: overscanCountHorizontal,
    renderRowSubComponent: renderRowSubComponent,
    alwaysShowSubComponent: alwaysShowSubComponent,
    markNavigatedRow: markNavigatedRow,
    isRtl: isRtl,
    subComponentsHeight: tableState.subComponentsHeight,
    dispatch: dispatch
  }))), (tableState.isScrollable === undefined || tableState.isScrollable) && /*#__PURE__*/React.createElement(VerticalScrollbar, {
    internalRowHeight: internalRowHeight,
    popInRowHeight: popInRowHeight,
    tableRef: tableRef,
    minRows: minRows,
    rows: rows,
    handleVerticalScrollBarScroll: handleVerticalScrollBarScroll,
    ref: verticalScrollBarRef
  })), visibleRowCountMode === TableVisibleRowCountMode.Interactive && /*#__PURE__*/React.createElement(VerticalResizer, {
    popInRowHeight: popInRowHeight,
    hasPopInColumns: (tableState === null || tableState === void 0 ? void 0 : (_tableState$popInColu4 = tableState.popInColumns) === null || _tableState$popInColu4 === void 0 ? void 0 : _tableState$popInColu4.length) > 0,
    analyticalTableRef: analyticalTableRef,
    dispatch: dispatch,
    extensionsHeight: extensionsHeight,
    internalRowHeight: internalRowHeight,
    portalContainer: portalContainer
  }));
});
AnalyticalTable.displayName = 'AnalyticalTable';
AnalyticalTable.defaultProps = {
  infiniteScrollThreshold: 20,
  loading: false,
  sortable: true,
  filterable: false,
  groupable: false,
  selectionMode: TableSelectionMode.None,
  selectionBehavior: TableSelectionBehavior.Row,
  scaleWidthMode: TableScaleWidthMode.Default,
  data: [],
  columns: [],
  minRows: 5,
  groupBy: [],
  NoDataComponent: DefaultNoDataComponent,
  LoadingComponent: DefaultLoadingComponent,
  noDataText: 'No Data',
  reactTableOptions: {},
  tableHooks: [],
  visibleRows: 15,
  subRowsKey: 'subRows',
  highlightField: 'status',
  markNavigatedRow: function markNavigatedRow() {
    return false;
  },
  selectedRowIds: {},
  onGroup: function onGroup() {},
  onRowExpandChange: function onRowExpandChange() {},
  onColumnsReordered: function onColumnsReordered() {},
  isTreeTable: false,
  alternateRowColor: false,
  overscanCountHorizontal: 5,
  visibleRowCountMode: TableVisibleRowCountMode.Fixed,
  alwaysShowSubComponent: false,
  portalContainer: document.body
};

export { AnalyticalTable };
//# sourceMappingURL=AnalyticalTable.js.map
