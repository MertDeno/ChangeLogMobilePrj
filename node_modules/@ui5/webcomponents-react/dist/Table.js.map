{"version":3,"file":"Table.js","sources":["../src/webComponents/Table/index.tsx"],"sourcesContent":["import { TableGrowingMode } from '@ui5/webcomponents-react/dist/TableGrowingMode';\nimport { TableMode } from '@ui5/webcomponents-react/dist/TableMode';\nimport { withWebComponent } from '@ui5/webcomponents-react/dist/withWebComponent';\nimport { CommonProps } from '@ui5/webcomponents-react/interfaces/CommonProps';\nimport { Ui5CustomEvent } from '@ui5/webcomponents-react/interfaces/Ui5CustomEvent';\nimport { Ui5DomRef } from '@ui5/webcomponents-react/interfaces/Ui5DomRef';\nimport { ReactNode } from 'react';\n\nimport '@ui5/webcomponents/dist/Table.js';\n\ninterface TableAttributes {\n  /**\n   * Defines if the table is in busy state. **In this state the component's opacity is reduced and busy indicator is displayed at the bottom of the table.**\n   */\n  busy?: boolean;\n  /**\n   * Defines the delay in milliseconds, after which the busy indicator will show up for this component.\n   */\n  busyDelay?: number;\n  /**\n   * Defines whether the table will have growing capability either by pressing a `More` button, or via user scroll. In both cases `load-more` event is fired.\n   *\n   * Available options:\n   *\n   * `Button` - Shows a `More` button at the bottom of the table, pressing of which triggers the `load-more` event.\n   * `Scroll` - The `load-more` event is triggered when the user scrolls to the bottom of the table;\n   * `None` (default) - The growing is off.\n   *\n   * **Restrictions:** `growing=\"Scroll\"` is not supported for Internet Explorer, and the component will fallback to `growing=\"Button\"`.\n   */\n  growing?: TableGrowingMode | keyof typeof TableGrowingMode;\n  /**\n   * Defines the subtext that will be displayed under the `growingButtonText`.\n   *\n   * **Note:** This property takes effect if `growing` is set to `Button`.\n   */\n  growingButtonSubtext?: string;\n  /**\n   * Defines the text that will be displayed inside the growing button at the bottom of the table, meant for loading more rows upon press.\n   *\n   * **Note:** If not specified a built-in text will be displayed.\n   * **Note:** This property takes effect if `growing` is set to `Button`.\n   */\n  growingButtonText?: string;\n  /**\n   * Defines if the value of `noDataText` will be diplayed when there is no rows present in the table.\n   */\n  hideNoData?: boolean;\n  /**\n   * Defines the mode of the component.\n   *\n   * Available options are:\n   *\n   * *   `MultiSelect`\n   * *   `SingleSelect`\n   * *   `None`\n   */\n  mode?: TableMode | keyof typeof TableMode;\n  /**\n   * Defines the text that will be displayed when there is no data and `hideNoData` is not present.\n   */\n  noDataText?: string;\n  /**\n   * Determines whether the column headers remain fixed at the top of the page during vertical scrolling as long as the Web Component is in the viewport.\n   *\n   * **Restrictions:**\n   *\n   * *   Browsers that do not support this feature:\n   *     *   Internet Explorer\n   *     *   Microsoft Edge lower than version 41 (EdgeHTML 16)\n   *     *   Mozilla Firefox lower than version 59\n   * *   Scrolling behavior:\n   *     *   If the Web Component is placed in layout containers that have the `overflow: hidden` or `overflow: auto` style definition, this can prevent the sticky elements of the Web Component from becoming fixed at the top of the viewport.\n   */\n  stickyColumnHeader?: boolean;\n}\n\nexport interface TableDomRef extends TableAttributes, Ui5DomRef {}\n\nexport interface TablePropTypes extends TableAttributes, CommonProps {\n  /**\n   * Defines the configuration for the columns of the component.\n   *\n   * **Note:** Use `TableColumn` for the intended design.\n   *\n   * __Note:__ When passing a custom React component to this prop, you have to make sure your component reads the `slot` prop and appends it to the most outer element of your component.\n   * Learn more about it [here](https://sap.github.io/ui5-webcomponents-react/?path=/docs/knowledge-base--page#adding-custom-components-to-slots).\n   */\n  columns?: ReactNode | ReactNode[];\n  /**\n   * Defines the component rows.\n   *\n   * **Note:** Use `TableRow` for the intended design.\n   */\n  children?: ReactNode | ReactNode[];\n  /**\n   * Fired when the user presses the `More` button or scrolls to the table's end.\n   *\n   * **Note:** The event will be fired if `growing` is set to `Button` or `Scroll`.\n   */\n  onLoadMore?: (event: Ui5CustomEvent<HTMLElement>) => void;\n  /**\n   * Fired when `TableColumn` is shown as a pop-in instead of hiding it.\n   */\n  onPopinChange?: (event: Ui5CustomEvent<HTMLElement, { poppedColumns: unknown[] }>) => void;\n  /**\n   * Fired when a row in `Active` mode is clicked or `Enter` key is pressed.\n   */\n  onRowClick?: (event: Ui5CustomEvent<HTMLElement, { row: ReactNode }>) => void;\n  /**\n   * Fired when selection is changed by user interaction in `SingleSelect` and `MultiSelect` modes.\n   */\n  onSelectionChange?: (\n    event: Ui5CustomEvent<HTMLElement, { selectedRows: unknown[]; previouslySelectedRows: unknown[] }>\n  ) => void;\n}\n\n/**\n * The `Table` component provides a set of sophisticated and convenient functions for responsive table design. It provides a comprehensive set of features for displaying and dealing with vast amounts of data.\n *\n * To render the `Table` properly, the order of the `columns` should match with the order of the item `cells` in the `rows`.\n *\n * Desktop and tablet devices are supported. On tablets, special consideration should be given to the number of visible columns and rows due to the limited performance of some devices.\n *\n * <ui5-link href=\"https://sap.github.io/ui5-webcomponents/playground/components/Table\" target=\"_blank\">UI5 Web Components Playground</ui5-link>\n */\nconst Table = withWebComponent<TablePropTypes, TableDomRef>(\n  'ui5-table',\n  ['busyDelay', 'growing', 'growingButtonSubtext', 'growingButtonText', 'mode', 'noDataText'],\n  ['busy', 'hideNoData', 'stickyColumnHeader'],\n  ['columns'],\n  ['load-more', 'popin-change', 'row-click', 'selection-change']\n);\n\nTable.displayName = 'Table';\n\nTable.defaultProps = {\n  busyDelay: 1000,\n  growing: TableGrowingMode.None,\n  mode: TableMode.None\n};\n\nexport { Table };\n"],"names":["Table","withWebComponent","displayName","defaultProps","busyDelay","growing","TableGrowingMode","None","mode","TableMode"],"mappings":";;;;;AAqHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACMA,KAAK,GAAGC,gBAAgB,CAC5B,WAD4B,EAE5B,CAAC,WAAD,EAAc,SAAd,EAAyB,sBAAzB,EAAiD,mBAAjD,EAAsE,MAAtE,EAA8E,YAA9E,CAF4B,EAG5B,CAAC,MAAD,EAAS,YAAT,EAAuB,oBAAvB,CAH4B,EAI5B,CAAC,SAAD,CAJ4B,EAK5B,CAAC,WAAD,EAAc,cAAd,EAA8B,WAA9B,EAA2C,kBAA3C,CAL4B;AAQ9BD,KAAK,CAACE,WAAN,GAAoB,OAApB;AAEAF,KAAK,CAACG,YAAN,GAAqB;AACnBC,EAAAA,SAAS,EAAE,IADQ;AAEnBC,EAAAA,OAAO,EAAEC,gBAAgB,CAACC,IAFP;AAGnBC,EAAAA,IAAI,EAAEC,SAAS,CAACF;AAHG,CAArB;;;;"}