import _extends from '@babel/runtime/helpers/extends';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import { isIE } from '@ui5/webcomponents-react-base/dist/Device';
import { useSyncRef, useIsRTL } from '@ui5/webcomponents-react-base/dist/hooks';
import { deprecationNotice, debounce } from '@ui5/webcomponents-react-base/dist/Utils';
import { FlexBox } from '@ui5/webcomponents-react/dist/FlexBox';
import { FlexBoxAlignItems } from '@ui5/webcomponents-react/dist/FlexBoxAlignItems';
import { FlexBoxJustifyContent } from '@ui5/webcomponents-react/dist/FlexBoxJustifyContent';
import { Toolbar } from '@ui5/webcomponents-react/dist/Toolbar';
import { ToolbarDesign } from '@ui5/webcomponents-react/dist/ToolbarDesign';
import { ToolbarSeparator } from '@ui5/webcomponents-react/dist/ToolbarSeparator';
import { ToolbarStyle } from '@ui5/webcomponents-react/dist/ToolbarStyle';
import React, { useEffect, forwardRef, useState, useRef, useCallback, Children } from 'react';
import { createUseStyles } from 'react-jss';
import { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';
import clsx from 'clsx';

var stopPropagation = function stopPropagation(e) {
  var _e$stopImmediatePropa;

  e.stopPropagation();
  (_e$stopImmediatePropa = e.stopImmediatePropagation) === null || _e$stopImmediatePropa === void 0 ? void 0 : _e$stopImmediatePropa.call(e);
};

var useDeprecationNoticeForTooltip = function useDeprecationNoticeForTooltip(component, tooltip) {
  useEffect(function () {
    if (tooltip) {
      deprecationNotice(component, '`tooltip` has been deprecated, please use the native `title` attribute instead.');
    }
  }, [tooltip]);
};

var ActionsSpacer = function ActionsSpacer(_ref) {
  var onClick = _ref.onClick,
      noHover = _ref.noHover;
  return /*#__PURE__*/React.createElement("span", {
    style: {
      flexGrow: 1,
      height: '100%',
      cursor: noHover ? 'auto' : 'pointer'
    },
    className: "spacer",
    onClick: onClick
  });
}; // The Toolbar only recognizes spacers with the 'ToolbarSpacer' displayName

ActionsSpacer.displayName = 'ToolbarSpacer';

var DynamicPageTitleStyles = {
  container: {
    flex: '1 1 100%',
    backgroundColor: ThemingParameters.sapObjectHeader_Background,
    minHeight: '3rem',
    paddingTop: '0.5rem',
    paddingBottom: '0.5rem',
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'space-between',
    position: 'sticky',
    top: 0,
    zIndex: 2,
    cursor: 'pointer',
    '&[data-not-clickable="true"]': {
      cursor: 'unset',
      '&:hover': {
        backgroundColor: ThemingParameters.sapObjectHeader_Background
      }
    },
    '&:hover': {
      // TODO background color should be sapObjectHeader_Hover_Background (same color as sapTile_Active_Background)
      backgroundColor: ThemingParameters.sapTile_Active_Background
    }
  },
  iEClass: {
    position: 'fixed',
    // page width - padding - scrollbar
    width: 'calc(100% - 18px - 4rem)'
  },
  breadcrumbs: {
    minWidth: '50%',
    padding: '0.5rem 0 0.25rem 0'
  },
  titleMainSection: {
    flex: '1 1 100%',
    alignItems: 'baseline'
  },
  title: {
    color: ThemingParameters.sapGroup_TitleTextColor,
    fontSize: ThemingParameters.sapFontHeader3Size,
    paddingTop: '0.3125rem',
    overflowWrap: 'break-word',
    hyphens: 'auto'
  },
  subTitleRight: {
    color: ThemingParameters.sapContent_LabelColor,
    fontSize: ThemingParameters.sapFontSize,
    overflowWrap: 'break-word',
    hyphens: 'auto'
  },
  subTitleBottom: {
    color: ThemingParameters.sapContent_LabelColor,
    fontSize: ThemingParameters.sapFontSize,
    marginTop: '0.25rem',
    overflowWrap: 'break-word',
    hyphens: 'auto'
  },
  content: {
    display: 'flex',
    flexShrink: 1.6
  },
  toolbar: {
    flex: '1 1.6 100%',
    cursor: 'auto',
    '&:hover': {
      backgroundColor: 'inherit'
    },
    '&>:first-child': {
      height: '100%'
    }
  }
};

var _excluded = ["actions", "breadcrumbs", "children", "header", "subHeader", "showSubHeaderRight", "navigationActions", "className", "style", "tooltip", "onToggleHeaderContentVisibility", "onToolbarOverflowChange"],
    _excluded2 = ["onClick"];
var useStyles = createUseStyles(DynamicPageTitleStyles, {
  name: 'DynamicPageTitle'
});
/**
 * The dynamic page title defines the elements in the top header.
 * It can contain Breadcrumbs, Title, Subtitle, Content, KPIs and Actions.
 */

var DynamicPageTitle = /*#__PURE__*/forwardRef(function (props, ref) {
  var _ref = props,
      actions = _ref.actions,
      breadcrumbs = _ref.breadcrumbs,
      children = _ref.children,
      header = _ref.header,
      subHeader = _ref.subHeader,
      showSubHeaderRight = _ref.showSubHeaderRight,
      navigationActions = _ref.navigationActions,
      className = _ref.className,
      style = _ref.style,
      tooltip = _ref.tooltip,
      onToggleHeaderContentVisibility = _ref.onToggleHeaderContentVisibility,
      onToolbarOverflowChange = _ref.onToolbarOverflowChange,
      rest = _objectWithoutProperties(_ref, _excluded);

  useDeprecationNoticeForTooltip('DynamicPageTitle', props.tooltip);
  var classes = useStyles();
  var containerClasses = clsx(classes.container, className, isIE() && classes.iEClass);

  var _useSyncRef = useSyncRef(ref),
      _useSyncRef2 = _slicedToArray(_useSyncRef, 2),
      componentRef = _useSyncRef2[0],
      dynamicPageTitleRef = _useSyncRef2[1];

  var _useState = useState(undefined),
      _useState2 = _slicedToArray(_useState, 2),
      showNavigationInTopArea = _useState2[0],
      setShowNavigationInTopArea = _useState2[1];

  var isRtl = useIsRTL(dynamicPageTitleRef);
  var isMounted = useRef(false);
  useEffect(function () {
    isMounted.current = true;
    return function () {
      isMounted.current = false;
    };
  }, [isMounted]);

  rest.onClick;
      var propsWithoutOmitted = _objectWithoutProperties(rest, _excluded2);

  var onHeaderClick = useCallback(function (e) {
    if (typeof (props === null || props === void 0 ? void 0 : props.onClick) === 'function') {
      props.onClick(e);
    }

    if (typeof onToggleHeaderContentVisibility === 'function' && !(props !== null && props !== void 0 && props['data-not-clickable'])) {
      onToggleHeaderContentVisibility(e);
    }
  }, [props === null || props === void 0 ? void 0 : props.onClick, onToggleHeaderContentVisibility, props === null || props === void 0 ? void 0 : props['data-not-clickable']]);
  useEffect(function () {
    var observer = new ResizeObserver(debounce(function (_ref2) {
      var _borderBoxSize$inline;

      var _ref3 = _slicedToArray(_ref2, 1),
          titleContainer = _ref3[0];

      // Firefox implements `borderBoxSize` as a single content rect, rather than an array
      var borderBoxSize = Array.isArray(titleContainer.borderBoxSize) ? titleContainer.borderBoxSize[0] : titleContainer.borderBoxSize; // Safari doesn't implement `borderBoxSize`

      var titleContainerWidth = (_borderBoxSize$inline = borderBoxSize === null || borderBoxSize === void 0 ? void 0 : borderBoxSize.inlineSize) !== null && _borderBoxSize$inline !== void 0 ? _borderBoxSize$inline : titleContainer.target.getBoundingClientRect().width;

      if (titleContainerWidth < 1280 && !showNavigationInTopArea === true && isMounted.current) {
        setShowNavigationInTopArea(true);
      } else if (titleContainerWidth >= 1280 && !showNavigationInTopArea === false && isMounted.current) {
        setShowNavigationInTopArea(false);
      }
    }, 150));

    if (dynamicPageTitleRef.current) {
      observer.observe(dynamicPageTitleRef.current);
    }

    return function () {
      observer.disconnect();
    };
  }, [dynamicPageTitleRef.current, showNavigationInTopArea, isMounted]);
  var paddingLeftRtl = isRtl ? 'paddingRight' : 'paddingLeft';

  var handleToolbarsOverflowChange = function handleToolbarsOverflowChange(e) {
    if (typeof onToolbarOverflowChange === 'function') {
      var origin = 'actions';

      if (e.target.dataset.componentName === 'DynamicPageTitleNavActions') {
        origin = 'navigationActions';
      }

      onToolbarOverflowChange(_objectSpread(_objectSpread({}, e), {}, {
        origin: origin
      }));
    }
  };

  return /*#__PURE__*/React.createElement(FlexBox, _extends({
    className: containerClasses,
    style: style,
    ref: componentRef,
    tooltip: tooltip,
    "data-component-name": "DynamicPageTitle",
    onClick: onHeaderClick
  }, propsWithoutOmitted), (breadcrumbs || navigationActions && showNavigationInTopArea) && /*#__PURE__*/React.createElement(FlexBox, {
    justifyContent: FlexBoxJustifyContent.SpaceBetween,
    "data-component-name": "DynamicPageTitleBreadcrumbs"
  }, breadcrumbs && /*#__PURE__*/React.createElement("div", {
    className: classes.breadcrumbs,
    onClick: stopPropagation
  }, breadcrumbs), showNavigationInTopArea && /*#__PURE__*/React.createElement(Toolbar, {
    design: ToolbarDesign.Auto,
    toolbarStyle: ToolbarStyle.Clear,
    active: true,
    className: classes.toolbar,
    onClick: stopPropagation,
    "data-component-name": "DynamicPageTitleNavActions",
    onOverflowChange: handleToolbarsOverflowChange
  }, /*#__PURE__*/React.createElement(ActionsSpacer, {
    onClick: onHeaderClick,
    noHover: props === null || props === void 0 ? void 0 : props['data-not-clickable']
  }), navigationActions)), /*#__PURE__*/React.createElement(FlexBox, {
    alignItems: FlexBoxAlignItems.Center,
    style: {
      flexGrow: 1,
      width: '100%'
    }
  }, /*#__PURE__*/React.createElement(FlexBox, {
    className: classes.titleMainSection
  }, header && /*#__PURE__*/React.createElement("div", {
    className: classes.title,
    "data-component-name": "DynamicPageTitleHeader"
  }, header), subHeader && showSubHeaderRight && /*#__PURE__*/React.createElement("div", {
    className: classes.subTitleRight,
    style: _defineProperty({}, paddingLeftRtl, '0.5rem'),
    "data-component-name": "DynamicPageTitleSubHeader"
  }, subHeader), children && /*#__PURE__*/React.createElement("div", {
    className: classes.content,
    style: _defineProperty({}, paddingLeftRtl, '0.5rem'),
    "data-component-name": "DynamicPageTitleContent"
  }, children)), (actions || !showNavigationInTopArea && navigationActions) && /*#__PURE__*/React.createElement(Toolbar, {
    design: ToolbarDesign.Auto,
    toolbarStyle: ToolbarStyle.Clear,
    active: true,
    className: classes.toolbar,
    onClick: stopPropagation,
    "data-component-name": "DynamicPageTitleActions",
    onOverflowChange: handleToolbarsOverflowChange
  }, /*#__PURE__*/React.createElement(ActionsSpacer, {
    onClick: onHeaderClick,
    noHover: props === null || props === void 0 ? void 0 : props['data-not-clickable']
  }), actions, !showNavigationInTopArea && Children.count(actions) > 0 && Children.count(navigationActions) > 0 && /*#__PURE__*/React.createElement(ToolbarSeparator, null), !showNavigationInTopArea && navigationActions)), subHeader && !showSubHeaderRight && /*#__PURE__*/React.createElement(FlexBox, null, /*#__PURE__*/React.createElement("div", {
    className: classes.subTitleBottom,
    "data-component-name": "DynamicPageTitleSubHeader"
  }, subHeader)));
});
DynamicPageTitle.displayName = 'DynamicPageTitle';

export { DynamicPageTitle };
//# sourceMappingURL=DynamicPageTitle.js.map
