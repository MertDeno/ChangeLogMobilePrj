{"version":3,"file":"ComboBox.js","sources":["../src/webComponents/ComboBox/index.tsx"],"sourcesContent":["import { ValueState } from '@ui5/webcomponents-react/dist/ValueState';\nimport { withWebComponent } from '@ui5/webcomponents-react/dist/withWebComponent';\nimport { CommonProps } from '@ui5/webcomponents-react/interfaces/CommonProps';\nimport { Ui5CustomEvent } from '@ui5/webcomponents-react/interfaces/Ui5CustomEvent';\nimport { Ui5DomRef } from '@ui5/webcomponents-react/interfaces/Ui5DomRef';\nimport { ReactNode } from 'react';\n\nimport '@ui5/webcomponents/dist/ComboBox.js';\n\ninterface ComboBoxAttributes {\n  /**\n   * Sets the accessible aria name of the component.\n   */\n  accessibleName?: string;\n  /**\n   * Receives id(or many ids) of the elements that label the component\n   */\n  accessibleNameRef?: string;\n  /**\n   * Defines whether the component is in disabled state.\n   *\n   * **Note:** A disabled component is completely noninteractive.\n   */\n  disabled?: boolean;\n  /**\n   * Defines the filter type of the component. Available options are: `StartsWithPerTerm`, `StartsWith` and `Contains`.\n   */\n  filter?: string;\n  /**\n   * Indicates whether a loading indicator should be shown in the picker.\n   */\n  loading?: boolean;\n  /**\n   * Defines a short hint intended to aid the user with data entry when the component has no value.\n   */\n  placeholder?: string;\n  /**\n   * Defines whether the component is read-only.\n   *\n   * **Note:** A read-only component is not editable, but still provides visual feedback upon user interaction.\n   */\n  readonly?: boolean;\n  /**\n   * Defines whether the component is required.\n   */\n  required?: boolean;\n  /**\n   * Defines the value of the component.\n   */\n  value?: string;\n  /**\n   * Defines the value state of the component.\n   *\n   * Available options are:\n   *\n   * *   `None`\n   * *   `Error`\n   * *   `Warning`\n   * *   `Success`\n   * *   `Information`\n   */\n  valueState?: ValueState | keyof typeof ValueState;\n}\n\nexport interface ComboBoxDomRef extends ComboBoxAttributes, Ui5DomRef {}\n\nexport interface ComboBoxPropTypes extends ComboBoxAttributes, Omit<CommonProps, 'onChange' | 'onInput'> {\n  /**\n   * Defines the component items.\n   */\n  children?: ReactNode | ReactNode[];\n  /**\n   * Defines the icon to be displayed in the input field.\n   *\n   * __Note:__ When passing a custom React component to this prop, you have to make sure your component reads the `slot` prop and appends it to the most outer element of your component.\n   * Learn more about it [here](https://sap.github.io/ui5-webcomponents-react/?path=/docs/knowledge-base--page#adding-custom-components-to-slots).\n   */\n  icon?: ReactNode;\n  /**\n   * Defines the value state message that will be displayed as pop up under the component.\n   *\n   * **Note:** If not specified, a default text (in the respective language) will be displayed.\n   * **Note:** The `valueStateMessage` would be displayed, when the `ComboBox` is in `Information`, `Warning` or `Error` value state.\n   *\n   * __Note:__ When passing a custom React component to this prop, you have to make sure your component reads the `slot` prop and appends it to the most outer element of your component.\n   * Learn more about it [here](https://sap.github.io/ui5-webcomponents-react/?path=/docs/knowledge-base--page#adding-custom-components-to-slots).\n   */\n  valueStateMessage?: ReactNode | ReactNode[];\n  /**\n   * Fired when the input operation has finished by pressing Enter, focusout or an item is selected.\n   */\n  onChange?: (event: Ui5CustomEvent<HTMLInputElement>) => void;\n  /**\n   * Fired when typing in input.\n   *\n   * **Note:** filterValue property is updated, input is changed.\n   */\n  onInput?: (event: Ui5CustomEvent<HTMLInputElement>) => void;\n  /**\n   * Fired when selection is changed by user interaction\n   */\n  onSelectionChange?: (event: Ui5CustomEvent<HTMLInputElement, { item: ReactNode }>) => void;\n}\n\n/**\n * The `ComboBox` component represents a drop-down menu with a list of the available options and a text input field to narrow down the options. It is commonly used to enable users to select an option from a predefined list.\n *\n * <ui5-link href=\"https://sap.github.io/ui5-webcomponents/playground/components/ComboBox\" target=\"_blank\">UI5 Web Components Playground</ui5-link>\n */\nconst ComboBox = withWebComponent<ComboBoxPropTypes, ComboBoxDomRef>(\n  'ui5-combobox',\n  ['accessibleName', 'accessibleNameRef', 'filter', 'placeholder', 'value', 'valueState'],\n  ['disabled', 'loading', 'readonly', 'required'],\n  ['icon', 'valueStateMessage'],\n  ['change', 'input', 'selection-change']\n);\n\nComboBox.displayName = 'ComboBox';\n\nComboBox.defaultProps = {\n  filter: 'StartsWithPerTerm',\n  valueState: ValueState.None\n};\n\nexport { ComboBox };\n"],"names":["ComboBox","withWebComponent","displayName","defaultProps","filter","valueState","ValueState","None"],"mappings":";;;;AAwGA;AACA;AACA;AACA;AACA;IACMA,QAAQ,GAAGC,gBAAgB,CAC/B,cAD+B,EAE/B,CAAC,gBAAD,EAAmB,mBAAnB,EAAwC,QAAxC,EAAkD,aAAlD,EAAiE,OAAjE,EAA0E,YAA1E,CAF+B,EAG/B,CAAC,UAAD,EAAa,SAAb,EAAwB,UAAxB,EAAoC,UAApC,CAH+B,EAI/B,CAAC,MAAD,EAAS,mBAAT,CAJ+B,EAK/B,CAAC,QAAD,EAAW,OAAX,EAAoB,kBAApB,CAL+B;AAQjCD,QAAQ,CAACE,WAAT,GAAuB,UAAvB;AAEAF,QAAQ,CAACG,YAAT,GAAwB;AACtBC,EAAAA,MAAM,EAAE,mBADc;AAEtBC,EAAAA,UAAU,EAAEC,UAAU,CAACC;AAFD,CAAxB;;;;"}