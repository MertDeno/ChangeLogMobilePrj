import _extends from '@babel/runtime/helpers/extends';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import { isPhone } from '@ui5/webcomponents-base/dist/Device.js';
import { addCustomCSS } from '@ui5/webcomponents-base/dist/Theming.js';
import { useI18nBundle, useSyncRef } from '@ui5/webcomponents-react-base/dist/hooks';
import { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';
import { AVAILABLE_ACTIONS, CANCEL, X_OF_Y } from '@ui5/webcomponents-react/dist/assets/i18n/i18n-defaults';
import { Button } from '@ui5/webcomponents-react/dist/Button';
import { ButtonDesign } from '@ui5/webcomponents-react/dist/ButtonDesign';
import { ResponsivePopover } from '@ui5/webcomponents-react/dist/ResponsivePopover';
import clsx from 'clsx';
import React, { useEffect, forwardRef, useRef, useReducer, Children, useCallback, cloneElement } from 'react';
import { createPortal } from 'react-dom';
import { createUseStyles } from 'react-jss';
import { deprecationNotice } from '@ui5/webcomponents-react-base/dist/Utils';

var useDeprecationNoticeForTooltip = function useDeprecationNoticeForTooltip(component, tooltip) {
  useEffect(function () {
    if (tooltip) {
      deprecationNotice(component, '`tooltip` has been deprecated, please use the native `title` attribute instead.');
    }
  }, [tooltip]);
};

var styles = {
  /*
   *  is being applied to the encapsulating ul element
   */
  actionSheet: {
    margin: 0,
    padding: '0.1875rem 0.375rem',
    '& [ui5-button]': {
      display: 'block'
    },
    '& [ui5-button]:not([data-cancel-btn])::part(button)': {
      justifyContent: 'flex-start'
    }
  },
  contentMobile: {
    backgroundColor: ThemingParameters.sapGroup_ContentBackground,
    padding: '0.25rem 0.5rem',
    boxSizing: 'border-box',
    overflow: 'auto',
    maxHeight: '82vh',
    borderTopLeftRadius: ThemingParameters.sapElement_BorderCornerRadius,
    borderTopRightRadius: ThemingParameters.sapElement_BorderCornerRadius,
    boxShadow: ThemingParameters.sapContent_Shadow2,
    '& > *': {
      margin: '0.25rem 0'
    }
  }
};
var styles$1 = styles;

var _excluded = ["a11yConfig", "allowTargetOverlap", "alwaysShowHeader", "children", "className", "footer", "header", "headerText", "hideArrow", "horizontalAlign", "initialFocus", "modal", "placementType", "portalContainer", "showCancelButton", "slot", "style", "verticalAlign", "onAfterClose", "onAfterOpen", "onBeforeClose", "onBeforeOpen"];
var useStyles = createUseStyles(styles$1, {
  name: 'ActionSheet'
});

if (isPhone()) {
  addCustomCSS('ui5-responsive-popover', "\n  :host([data-actionsheet]) [ui5-button] {\n    display: none;\n  }\n  :host([data-actionsheet]) [ui5-dialog] {\n    top: auto !important;\n    bottom: 0;\n    height: auto;\n    border-radius: 0;\n    background-color: transparent;\n    box-shadow: none;\n    box-sizing: border-box;\n    min-height: unset;\n  }\n  :host([data-actionsheet]) [ui5-title] {\n    color: ".concat(ThemingParameters.sapContent_ContrastTextColor, " !important;\n    text-shadow: none;\n    text-align: start !important;\n    padding-left:1rem !important;\n  }\n  "));
}
/**
 * The `ActionSheet` holds a list of buttons from which the user can select to complete an action. <br />
 * The children of the action sheet should be `Button` components. Elements in the `ActionSheet` are left-aligned. Actions should be arranged in order of importance, from top to bottom.
 */


var ActionSheet = /*#__PURE__*/forwardRef(function (props, ref) {
  var _a11yConfig$actionShe, _a11yConfig$actionShe2, _a11yConfig$actionShe3, _a11yConfig$actionShe4;

  var a11yConfig = props.a11yConfig,
      allowTargetOverlap = props.allowTargetOverlap,
      alwaysShowHeader = props.alwaysShowHeader,
      children = props.children,
      className = props.className,
      footer = props.footer,
      header = props.header,
      headerText = props.headerText,
      hideArrow = props.hideArrow,
      horizontalAlign = props.horizontalAlign,
      initialFocus = props.initialFocus,
      modal = props.modal,
      placementType = props.placementType,
      portalContainer = props.portalContainer,
      showCancelButton = props.showCancelButton,
      slot = props.slot,
      style = props.style,
      verticalAlign = props.verticalAlign,
      onAfterClose = props.onAfterClose,
      onAfterOpen = props.onAfterOpen,
      onBeforeClose = props.onBeforeClose,
      onBeforeOpen = props.onBeforeOpen,
      rest = _objectWithoutProperties(props, _excluded);

  useDeprecationNoticeForTooltip('ActionSheet', props.tooltip);
  var i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  var classes = useStyles();

  var _useSyncRef = useSyncRef(ref),
      _useSyncRef2 = _slicedToArray(_useSyncRef, 2),
      componentRef = _useSyncRef2[0],
      popoverRef = _useSyncRef2[1];

  var actionBtnsRef = useRef(null);

  var _useReducer = useReducer(function (_, action) {
    return parseInt(action.target.dataset.actionBtnIndex);
  }, 0),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      focusedItem = _useReducer2[0],
      setFocusedItem = _useReducer2[1];

  var childrenToRender = Children.toArray(children).filter(Boolean);
  var childrenArrayLength = childrenToRender.length;
  var childrenLength = isPhone() && showCancelButton ? childrenArrayLength + 1 : childrenArrayLength;

  var handleCancelBtnClick = function handleCancelBtnClick() {
    popoverRef.current.close();
  };

  var onActionButtonClicked = function onActionButtonClicked(handler) {
    return function (e) {
      popoverRef.current.close();

      if (typeof handler === 'function') {
        handler(e);
      }
    };
  };

  var handleFocus = function handleFocus(handler) {
    return function (e) {
      if (typeof handler === 'function') {
        handler(e);
      }

      setFocusedItem(e);
    };
  };

  var handleKeyDown = useCallback(function (e) {
    var currentIndex = parseInt(e.target.dataset.actionBtnIndex);

    if (e.key === 'ArrowDown' && currentIndex + 1 < childrenLength) {
      actionBtnsRef.current.querySelector("[data-action-btn-index=\"".concat(currentIndex + 1, "\"]")).focus();
    }

    if (e.key === 'ArrowUp' && currentIndex > 0) {
      actionBtnsRef.current.querySelector("[data-action-btn-index=\"".concat(currentIndex - 1, "\"]")).focus();
    }
  }, [childrenLength, actionBtnsRef.current]);

  var renderActionSheetButton = function renderActionSheetButton(element, index, childrenArray) {
    var _element$props, _element$props2, _element$props3;

    return /*#__PURE__*/cloneElement(element, _objectSpread(_objectSpread({
      role: 'button',
      'aria-label': "".concat(i18nBundle.getText(X_OF_Y, index + 1, childrenArray.length), " ").concat((_element$props = element.props) === null || _element$props === void 0 ? void 0 : _element$props.children),
      key: index,
      tabIndex: focusedItem === index ? 0 : -1
    }, element.props), {}, {
      design: ButtonDesign.Transparent,
      onClick: onActionButtonClicked((_element$props2 = element.props) === null || _element$props2 === void 0 ? void 0 : _element$props2.onClick),
      onFocus: handleFocus((_element$props3 = element.props) === null || _element$props3 === void 0 ? void 0 : _element$props3.onFocus),
      'data-action-btn-index': index
    }));
  };

  var handleAfterOpen = useCallback(function (e) {
    if (isPhone()) {
      actionBtnsRef.current.querySelector("[data-action-btn-index=\"".concat(focusedItem, "\"]")).focus();
    }

    if (typeof onAfterOpen === 'function') {
      onAfterOpen(e);
    }
  }, [onAfterOpen, actionBtnsRef.current, focusedItem]);
  var displayHeader = alwaysShowHeader || isPhone();
  return /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(ResponsivePopover, _extends({
    "aria-modal": true,
    role: "dialog",
    style: style,
    slot: slot,
    allowTargetOverlap: allowTargetOverlap,
    headerText: displayHeader ? headerText : undefined,
    horizontalAlign: horizontalAlign,
    initialFocus: initialFocus,
    modal: modal,
    hideArrow: hideArrow,
    placementType: placementType,
    verticalAlign: verticalAlign,
    footer: footer,
    header: displayHeader ? header : undefined,
    onAfterClose: onAfterClose,
    onBeforeClose: onBeforeClose,
    onBeforeOpen: onBeforeOpen
  }, rest, {
    onAfterOpen: handleAfterOpen,
    ref: componentRef,
    className: clsx(classes.actionSheet, className),
    "data-actionsheet": true
  }), /*#__PURE__*/React.createElement("div", {
    className: isPhone() ? classes.contentMobile : undefined,
    "data-component-name": "ActionSheetMobileContent",
    role: (_a11yConfig$actionShe = a11yConfig === null || a11yConfig === void 0 ? void 0 : (_a11yConfig$actionShe2 = a11yConfig.actionSheetMobileContent) === null || _a11yConfig$actionShe2 === void 0 ? void 0 : _a11yConfig$actionShe2.role) !== null && _a11yConfig$actionShe !== void 0 ? _a11yConfig$actionShe : 'presentation',
    "aria-label": (_a11yConfig$actionShe3 = a11yConfig === null || a11yConfig === void 0 ? void 0 : (_a11yConfig$actionShe4 = a11yConfig.actionSheetMobileContent) === null || _a11yConfig$actionShe4 === void 0 ? void 0 : _a11yConfig$actionShe4.ariaLabel) !== null && _a11yConfig$actionShe3 !== void 0 ? _a11yConfig$actionShe3 : i18nBundle.getText(AVAILABLE_ACTIONS),
    onKeyDown: handleKeyDown,
    ref: actionBtnsRef
  }, childrenToRender.map(renderActionSheetButton), isPhone() && showCancelButton && /*#__PURE__*/React.createElement(Button, {
    design: ButtonDesign.Negative,
    onClick: handleCancelBtnClick,
    tabIndex: focusedItem === childrenLength - 1 ? 0 : -1,
    "data-action-btn-index": childrenLength - 1,
    "data-cancel-btn": true,
    onFocus: setFocusedItem
  }, i18nBundle.getText(CANCEL)))), portalContainer);
});
ActionSheet.defaultProps = {
  showCancelButton: true,
  alwaysShowHeader: true,
  portalContainer: document.body
};
ActionSheet.displayName = 'ActionSheet';

export { ActionSheet };
//# sourceMappingURL=ActionSheet.js.map
