import _extends from '@babel/runtime/helpers/extends';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import { createUseStyles } from 'react-jss';
import { FlexBoxAlignItems } from '@ui5/webcomponents-react/dist/FlexBoxAlignItems';
import { FlexBoxDirection } from '@ui5/webcomponents-react/dist/FlexBoxDirection';
import { FlexBoxJustifyContent } from '@ui5/webcomponents-react/dist/FlexBoxJustifyContent';
import { FlexBoxWrap } from '@ui5/webcomponents-react/dist/FlexBoxWrap';
import React, { useEffect, forwardRef } from 'react';
import { deprecationNotice } from '@ui5/webcomponents-react-base/dist/Utils';
import clsx from 'clsx';

var useDeprecationNoticeForTooltip = function useDeprecationNoticeForTooltip(component, tooltip) {
  useEffect(function () {
    if (tooltip) {
      deprecationNotice(component, '`tooltip` has been deprecated, please use the native `title` attribute instead.');
    }
  }, [tooltip]);
};

var styles = {
  flexBox: {
    display: 'flex'
  },
  fitContainer: {
    width: '100%',
    height: '100%'
  },
  flexBoxDisplayInline: {
    display: 'inline-flex'
  },
  justifyContentStart: {
    justifyContent: 'flex-start'
  },
  justifyContentEnd: {
    justifyContent: 'flex-end'
  },
  justifyContentCenter: {
    justifyContent: 'center'
  },
  justifyContentSpaceAround: {
    justifyContent: 'space-around'
  },
  justifyContentSpaceBetween: {
    justifyContent: 'space-between'
  },
  flexBoxDirectionColumn: {
    flexDirection: 'column'
  },
  flexBoxDirectionColumnReverse: {
    flexDirection: 'column-reverse'
  },
  flexBoxDirectionRow: {
    flexDirection: 'row'
  },
  flexBoxDirectionRowReverse: {
    flexDirection: 'row-reverse'
  },
  alignItemsStart: {
    alignItems: 'flex-start'
  },
  alignItemsEnd: {
    alignItems: 'flex-end'
  },
  alignItemsCenter: {
    alignItems: 'center'
  },
  alignItemsStretch: {
    alignItems: 'stretch'
  },
  alignItemsBaseline: {
    alignItems: 'baseline'
  },
  flexWrapNoWrap: {
    flexWrap: 'nowrap'
  },
  flexWrapWrap: {
    flexWrap: 'wrap'
  },
  flexWrapWrapReverse: {
    flexWrap: 'wrap-reverse'
  }
};

var _excluded = ["children", "justifyContent", "direction", "alignItems", "displayInline", "wrap", "style", "className", "tooltip", "fitContainer", "slot", "as"];
var useStyles = createUseStyles(styles, {
  name: 'FlexBox'
});

/**
 * The `FlexBox` builds the container for a flexible box layout by leveraging the CSS flexbox layout.
 */
var FlexBox = /*#__PURE__*/forwardRef(function (props, ref) {
  var children = props.children,
      justifyContent = props.justifyContent,
      direction = props.direction,
      alignItems = props.alignItems,
      displayInline = props.displayInline,
      wrap = props.wrap,
      style = props.style,
      className = props.className,
      tooltip = props.tooltip,
      fitContainer = props.fitContainer,
      slot = props.slot,
      as = props.as,
      rest = _objectWithoutProperties(props, _excluded);

  useDeprecationNoticeForTooltip('FlexBox', props.tooltip);
  var classes = useStyles();
  var flexBoxClasses = clsx(classes.flexBox, classes["flexBoxDirection".concat(direction)], classes["justifyContent".concat(justifyContent)], classes["alignItems".concat(alignItems)], classes["flexWrap".concat(wrap)], displayInline && classes.flexBoxDisplayInline, fitContainer && classes.fitContainer, className);
  var CustomTag = as;
  return /*#__PURE__*/React.createElement(CustomTag, _extends({
    ref: ref,
    className: flexBoxClasses,
    style: style,
    title: tooltip,
    slot: slot
  }, rest), children);
});
FlexBox.defaultProps = {
  as: 'div',
  alignItems: FlexBoxAlignItems.Stretch,
  direction: FlexBoxDirection.Row,
  displayInline: false,
  fitContainer: false,
  justifyContent: FlexBoxJustifyContent.Start,
  wrap: FlexBoxWrap.NoWrap
};
FlexBox.displayName = 'FlexBox';

export { FlexBox };
//# sourceMappingURL=FlexBox.js.map
