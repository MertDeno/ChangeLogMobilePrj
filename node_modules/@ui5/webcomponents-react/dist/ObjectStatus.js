import _extends from '@babel/runtime/helpers/extends';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import '@ui5/webcomponents-icons/dist/hint.js';
import '@ui5/webcomponents-icons/dist/status-critical.js';
import '@ui5/webcomponents-icons/dist/status-negative.js';
import '@ui5/webcomponents-icons/dist/status-positive.js';
import { Icon } from '@ui5/webcomponents-react/dist/Icon';
import { ValueState } from '@ui5/webcomponents-react/dist/ValueState';
import React, { useEffect, forwardRef } from 'react';
import { createUseStyles } from 'react-jss';
import { deprecationNotice } from '@ui5/webcomponents-react-base/dist/Utils';
import { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';
import clsx from 'clsx';

var useDeprecationNoticeForTooltip = function useDeprecationNoticeForTooltip(component, tooltip) {
  useEffect(function () {
    if (tooltip) {
      deprecationNotice(component, '`tooltip` has been deprecated, please use the native `title` attribute instead.');
    }
  }, [tooltip]);
};

var createInvertedValueStateStyles = function createInvertedValueStateStyles(baseColor) {
  return {
    background: ThemingParameters["".concat(baseColor, "_Background")],
    color: ThemingParameters["".concat(baseColor, "_TextColor")],
    '& [ui5-icon]': {
      color: ThemingParameters["".concat(baseColor, "_TextColor")]
    },
    '&$active:hover': {
      background: ThemingParameters["".concat(baseColor, "_Hover_Background")],
      color: ThemingParameters["".concat(baseColor, "_Hover_TextColor")],
      '& [ui5-icon]': {
        color: ThemingParameters["".concat(baseColor, "_Hover_TextColor")]
      }
    },
    '&$active:active': {
      background: ThemingParameters["".concat(baseColor, "_Active_Background")],
      color: ThemingParameters["".concat(baseColor, "_Active_TextColor")],
      '& [ui5-icon]': {
        color: ThemingParameters["".concat(baseColor, "_Active_TextColor")]
      }
    }
  };
};

var createInvertedIndicationStyles = function createInvertedIndicationStyles(baseColor) {
  return {
    color: ThemingParameters["".concat(baseColor, "_TextColor")],
    backgroundColor: ThemingParameters["".concat(baseColor)],
    '& [ui5-icon]': {
      color: ThemingParameters["".concat(baseColor, "_TextColor")]
    },
    '&$active:hover': {
      background: ThemingParameters["".concat(baseColor, "_Hover_Background")]
    },
    '&$active:active': {
      background: ThemingParameters["".concat(baseColor, "_Active_Background")]
    }
  };
};

var styles = {
  objectStatus: {
    fontFamily: ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.sapFontSize,
    fontWeight: 'normal',
    position: 'relative',
    display: 'inline-block',
    verticalAlign: 'top',
    width: 'fit-content'
  },
  icon: {
    width: '1rem',
    textAlign: 'center',
    display: 'inline-block',
    height: '1rem',
    lineHeight: '1rem',
    verticalAlign: 'top',
    paddingRight: '0.25rem',
    '&:only-child': {
      paddingRight: 0
    }
  },
  text: {
    lineHeight: '1rem',
    display: 'inline-block',
    height: 'inherit',
    verticalAlign: 'top'
  },
  success: {
    color: ThemingParameters.sapPositiveTextColor,
    '& [ui5-icon]': {
      color: ThemingParameters.sapPositiveElementColor
    }
  },
  warning: {
    color: ThemingParameters.sapCriticalTextColor,
    '& [ui5-icon]': {
      color: ThemingParameters.sapCriticalElementColor
    }
  },
  error: {
    color: ThemingParameters.sapNegativeTextColor,
    '& [ui5-icon]': {
      color: ThemingParameters.sapNegativeElementColor
    }
  },
  information: {
    color: ThemingParameters.sapInformativeTextColor,
    '& [ui5-icon]': {
      color: ThemingParameters.sapInformativeElementColor
    }
  },
  none: {
    color: ThemingParameters.sapNeutralTextColor,
    '& [ui5-icon]': {
      color: ThemingParameters.sapNeutralElementColor
    }
  },
  indication01: {
    color: ThemingParameters.sapIndicationColor_1,
    '& [ui5-icon]': {
      color: ThemingParameters.sapIndicationColor_1
    }
  },
  indication02: {
    color: ThemingParameters.sapIndicationColor_2,
    '& [ui5-icon]': {
      color: ThemingParameters.sapIndicationColor_2
    }
  },
  indication03: {
    color: ThemingParameters.sapIndicationColor_3,
    '& [ui5-icon]': {
      color: ThemingParameters.sapIndicationColor_3
    }
  },
  indication04: {
    color: ThemingParameters.sapIndicationColor_4,
    '& [ui5-icon]': {
      color: ThemingParameters.sapIndicationColor_4
    }
  },
  indication05: {
    color: ThemingParameters.sapIndicationColor_5,
    '& [ui5-icon]': {
      color: ThemingParameters.sapIndicationColor_5
    }
  },
  indication06: {
    color: ThemingParameters.sapIndicationColor_6,
    '& [ui5-icon]': {
      color: ThemingParameters.sapIndicationColor_6
    }
  },
  indication07: {
    color: ThemingParameters.sapIndicationColor_7,
    '& [ui5-icon]': {
      color: ThemingParameters.sapIndicationColor_7
    }
  },
  indication08: {
    color: ThemingParameters.sapIndicationColor_8,
    '& [ui5-icon]': {
      color: ThemingParameters.sapIndicationColor_8
    }
  },
  active: {
    '&:hover, &:active': {
      cursor: 'pointer',
      '&:not($inverted) $text, $icon:only-child': {
        textDecoration: 'underline'
      }
    }
  },
  inverted: {
    height: 'auto',
    minHeight: '1rem',
    minWidth: '1.25rem',
    padding: '0.0625rem 0.25rem',
    borderRadius: ThemingParameters.sapElement_BorderCornerRadius,
    fontFamily: ThemingParameters.sapFontBoldFamily,
    fontSize: ThemingParameters.sapFontSmallSize,
    '& [ui5-icon]': {
      paddingTop: '0.125rem',
      width: ThemingParameters.sapFontSmallSize,
      height: ThemingParameters.sapFontSmallSize
    },
    '&$error': createInvertedValueStateStyles('sapButton_Negative'),
    '&$warning': createInvertedValueStateStyles('sapButton_Critical'),
    '&$success': createInvertedValueStateStyles('sapButton_Success'),
    '&$information': createInvertedValueStateStyles('sapButton_Information'),
    '&$none': createInvertedValueStateStyles('sapButton_Neutral'),
    '&$indication01': createInvertedIndicationStyles('sapIndicationColor_1'),
    '&$indication02': createInvertedIndicationStyles('sapIndicationColor_2'),
    '&$indication03': createInvertedIndicationStyles('sapIndicationColor_3'),
    '&$indication04': createInvertedIndicationStyles('sapIndicationColor_4'),
    '&$indication05': createInvertedIndicationStyles('sapIndicationColor_5'),
    '&$indication06': createInvertedIndicationStyles('sapIndicationColor_6'),
    '&$indication07': createInvertedIndicationStyles('sapIndicationColor_7'),
    '&$indication08': createInvertedIndicationStyles('sapIndicationColor_8')
  }
};
var styles$1 = styles;

var _excluded = ["state", "showDefaultIcon", "children", "icon", "className", "style", "tooltip", "active", "inverted", "onClick"];

var getDefaultIcon = function getDefaultIcon(state) {
  switch (state) {
    case ValueState.Error:
      return /*#__PURE__*/React.createElement(Icon, {
        name: "status-negative"
      });

    case ValueState.Success:
      return /*#__PURE__*/React.createElement(Icon, {
        name: "status-positive"
      });

    case ValueState.Warning:
      return /*#__PURE__*/React.createElement(Icon, {
        name: "status-critical"
      });

    case ValueState.Information:
      return /*#__PURE__*/React.createElement(Icon, {
        name: "hint"
      });

    default:
      return null;
  }
};

var useStyles = createUseStyles(styles$1, {
  name: 'ObjectStatus'
});
/**
 * Status information that can be either text with a value state, or an icon.
 */

var ObjectStatus = /*#__PURE__*/forwardRef(function (props, ref) {
  var state = props.state,
      showDefaultIcon = props.showDefaultIcon,
      children = props.children,
      icon = props.icon,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip,
      active = props.active,
      inverted = props.inverted,
      onClick = props.onClick,
      rest = _objectWithoutProperties(props, _excluded);

  useDeprecationNoticeForTooltip('ObjectStatus', props.tooltip);

  var iconToRender = function () {
    if (icon) {
      return icon;
    }

    if (showDefaultIcon) {
      return getDefaultIcon(state);
    }

    return null;
  }();

  var classes = useStyles();
  var objStatusClasses = clsx(classes.objectStatus, classes["".concat(state).toLowerCase()], active && classes.active, inverted && classes.inverted, className);
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: objStatusClasses,
    style: style,
    title: tooltip,
    onClick: active ? onClick : undefined
  }, rest), iconToRender && /*#__PURE__*/React.createElement("span", {
    className: classes.icon
  }, iconToRender), children && /*#__PURE__*/React.createElement("span", {
    className: classes.text
  }, children));
});
ObjectStatus.displayName = 'ObjectStatus';
ObjectStatus.defaultProps = {
  state: ValueState.None
};

export { ObjectStatus };
//# sourceMappingURL=ObjectStatus.js.map
