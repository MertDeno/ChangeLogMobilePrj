{"version":3,"file":"TimePicker.js","sources":["../src/webComponents/TimePicker/index.tsx"],"sourcesContent":["import { ValueState } from '@ui5/webcomponents-react/dist/ValueState';\nimport { withWebComponent } from '@ui5/webcomponents-react/dist/withWebComponent';\nimport { CommonProps } from '@ui5/webcomponents-react/interfaces/CommonProps';\nimport { Ui5CustomEvent } from '@ui5/webcomponents-react/interfaces/Ui5CustomEvent';\nimport { Ui5DomRef } from '@ui5/webcomponents-react/interfaces/Ui5DomRef';\nimport { ReactNode } from 'react';\n\nimport '@ui5/webcomponents/dist/TimePicker.js';\n\ninterface TimePickerAttributes {\n  /**\n   * Determines whether the `TimePicker` is displayed as disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Determines the format, displayed in the input field. Example: HH:mm:ss -> 11:42:35 hh:mm:ss a -> 2:23:15 PM mm:ss -> 12:04 (only minutes and seconds)\n   */\n  formatPattern?: string;\n  /**\n   * Defines a short hint, intended to aid the user with data entry when the component has no value.\n   *\n   * **Note:** When no placeholder is set, the format pattern is displayed as a placeholder. Passing an empty string as the value of this property will make the component appear empty - without placeholder or format pattern.\n   */\n  placeholder?: string;\n  /**\n   * Determines whether the `TimePicker` is displayed as readonly.\n   */\n  readonly?: boolean;\n  /**\n   * Defines a formatted time value.\n   */\n  value?: string;\n  /**\n   * Defines the value state of the `TimePicker`.\n   *\n   * Available options are:\n   *\n   * *   `None`\n   * *   `Error`\n   * *   `Warning`\n   * *   `Success`\n   * *   `Information`\n   */\n  valueState?: ValueState | keyof typeof ValueState;\n}\n\nexport interface TimePickerDomRef extends TimePickerAttributes, Ui5DomRef {\n  /**\n   * Currently selected time represented as JavaScript Date instance\n   */\n  readonly dateValue: Date;\n  /**\n   * Closes the picker\n   *\n   */\n  closePicker: () => void;\n  /**\n   * Formats a Java Script date object into a string representing a locale date and time according to the <code>formatPattern</code> property of the TimePicker instance\n   * @param {Date} date - A Java Script date object to be formatted as string\n   */\n  formatValue: (date: Date) => void;\n  /**\n   * Checks if the picker is open\n   *\n   */\n  isOpen: () => void;\n  /**\n   * Checks if a value is valid against the current <code>formatPattern</code> value.\n   *\n   * <br><br> <b>Note:</b> an empty string is considered as valid value.\n   * @param {string} value - The value to be tested against the current date format\n   */\n  isValid: (value: string) => void;\n  /**\n   * Opens the picker.\n   *\n   */\n  openPicker: () => void;\n}\n\nexport interface TimePickerPropTypes extends TimePickerAttributes, Omit<CommonProps, 'onChange' | 'onInput'> {\n  /**\n   * Defines the value state message that will be displayed as pop up under the `TimePicker`.\n   *\n   * **Note:** If not specified, a default text (in the respective language) will be displayed.\n   * **Note:** The `valueStateMessage` would be displayed, when the `TimePicker` is in `Information`, `Warning` or `Error` value state.\n   *\n   * __Note:__ When passing a custom React component to this prop, you have to make sure your component reads the `slot` prop and appends it to the most outer element of your component.\n   * Learn more about it [here](https://sap.github.io/ui5-webcomponents-react/?path=/docs/knowledge-base--page#adding-custom-components-to-slots).\n   */\n  valueStateMessage?: ReactNode;\n  /**\n   * Fired when the input operation has finished by clicking the \"OK\" button or when the text in the input field has changed and the focus leaves the input field.\n   */\n  onChange?: (event: Ui5CustomEvent<HTMLInputElement>) => void;\n  /**\n   * Fired when the value of the `TimePicker` is changed at each key stroke.\n   */\n  onInput?: (event: Ui5CustomEvent<HTMLInputElement>) => void;\n}\n\n/**\n * The `TimePicker` component provides an input field with assigned sliders which are opened on user action. The `TimePicker` allows users to select a localized time using touch, mouse, or keyboard input. It consists of two parts: the time input field and the sliders.\n *\n * <ui5-link href=\"https://sap.github.io/ui5-webcomponents/playground/components/TimePicker\" target=\"_blank\">UI5 Web Components Playground</ui5-link>\n */\nconst TimePicker = withWebComponent<TimePickerPropTypes, TimePickerDomRef>(\n  'ui5-time-picker',\n  ['formatPattern', 'placeholder', 'value', 'valueState'],\n  ['disabled', 'readonly'],\n  ['valueStateMessage'],\n  ['change', 'input']\n);\n\nTimePicker.displayName = 'TimePicker';\n\nTimePicker.defaultProps = {\n  valueState: ValueState.None\n};\n\nexport { TimePicker };\n"],"names":["TimePicker","withWebComponent","displayName","defaultProps","valueState","ValueState","None"],"mappings":";;;;AAqGA;AACA;AACA;AACA;AACA;IACMA,UAAU,GAAGC,gBAAgB,CACjC,iBADiC,EAEjC,CAAC,eAAD,EAAkB,aAAlB,EAAiC,OAAjC,EAA0C,YAA1C,CAFiC,EAGjC,CAAC,UAAD,EAAa,UAAb,CAHiC,EAIjC,CAAC,mBAAD,CAJiC,EAKjC,CAAC,QAAD,EAAW,OAAX,CALiC;AAQnCD,UAAU,CAACE,WAAX,GAAyB,YAAzB;AAEAF,UAAU,CAACG,YAAX,GAA0B;AACxBC,EAAAA,UAAU,EAAEC,UAAU,CAACC;AADC,CAA1B;;;;"}