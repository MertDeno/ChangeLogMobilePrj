{"version":3,"file":"SegmentedButtonItem.js","sources":["../src/webComponents/SegmentedButtonItem/index.tsx"],"sourcesContent":["import { ButtonDesign } from '@ui5/webcomponents-react/dist/ButtonDesign';\nimport { withWebComponent } from '@ui5/webcomponents-react/dist/withWebComponent';\nimport { CommonProps } from '@ui5/webcomponents-react/interfaces/CommonProps';\nimport { Ui5DomRef } from '@ui5/webcomponents-react/interfaces/Ui5DomRef';\nimport { ReactNode, MouseEventHandler } from 'react';\n\nimport '@ui5/webcomponents/dist/SegmentedButtonItem.js';\n\ninterface SegmentedButtonItemAttributes {\n  /**\n   * Determines whether the component is displayed as pressed.\n   */\n  pressed?: boolean;\n  /**\n   * Sets the accessible aria name of the component.\n   */\n  accessibleName?: string;\n  /**\n   * Receives id(or many ids) of the elements that label the component.\n   */\n  accessibleNameRef?: string;\n  /**\n   * Defines whether the component is disabled. A disabled component can't be pressed or focused, and it is not in the tab chain.\n   */\n  disabled?: boolean;\n  /**\n   * Defines the icon to be displayed as graphical element within the component. The SAP-icons font provides numerous options.\n   *\n   * Example: See all the available icons in the <ui5-link target=\"_blank\" href=\"https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html\" class=\"api-table-content-cell-link\">Icon Explorer</ui5-link>.\n   */\n  icon?: string;\n}\n\nexport interface SegmentedButtonItemDomRef extends SegmentedButtonItemAttributes, Ui5DomRef {}\n\nexport interface SegmentedButtonItemPropTypes extends SegmentedButtonItemAttributes, Omit<CommonProps, 'onClick'> {\n  /**\n   * Defines the text of the component.\n   *\n   * **Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.\n   */\n  children?: ReactNode | ReactNode[];\n  /**\n   * Fired when the component is activated either with a mouse/tap or by using the Enter or Space key.\n   *\n   * **Note:** The event will not be fired if the `disabled` property is set to `true`.\n   */\n  onClick?: MouseEventHandler<HTMLElement>;\n}\n\n/**\n * Users can use the `SegmentedButtonItem` as part of a `SegmentedButton`.\n *\n * Clicking or tapping on a `SegmentedButtonItem` changes its state to `pressed`. The item returns to its initial state when the user clicks or taps on it again. By applying additional custom CSS-styling classes, apps can give a different style to any `SegmentedButtonItem`.\n *\n * <ui5-link href=\"https://sap.github.io/ui5-webcomponents/playground/components/SegmentedButtonItem\" target=\"_blank\">UI5 Web Components Playground</ui5-link>\n */\nconst SegmentedButtonItem = withWebComponent<SegmentedButtonItemPropTypes, SegmentedButtonItemDomRef>(\n  'ui5-segmented-button-item',\n  ['accessibleName', 'accessibleNameRef', 'icon'],\n  ['pressed', 'disabled'],\n  [],\n  ['click']\n);\n\nSegmentedButtonItem.displayName = 'SegmentedButtonItem';\n\nexport { SegmentedButtonItem };\n"],"names":["SegmentedButtonItem","withWebComponent","displayName"],"mappings":";;;AAkDA;AACA;AACA;AACA;AACA;AACA;AACA;IACMA,mBAAmB,GAAGC,gBAAgB,CAC1C,2BAD0C,EAE1C,CAAC,gBAAD,EAAmB,mBAAnB,EAAwC,MAAxC,CAF0C,EAG1C,CAAC,SAAD,EAAY,UAAZ,CAH0C,EAI1C,EAJ0C,EAK1C,CAAC,OAAD,CAL0C;AAQ5CD,mBAAmB,CAACE,WAApB,GAAkC,qBAAlC;;;;"}