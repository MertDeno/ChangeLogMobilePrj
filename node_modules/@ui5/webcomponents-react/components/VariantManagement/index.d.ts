import '@ui5/webcomponents-fiori/dist/illustrations/UnableToLoad.js';
import '@ui5/webcomponents-icons/dist/decline.js';
import '@ui5/webcomponents-icons/dist/navigation-down-arrow.js';
import '@ui5/webcomponents-icons/dist/search.js';
import { PopoverPlacementType } from '@ui5/webcomponents-react/dist/PopoverPlacementType';
import { TitleLevel } from '@ui5/webcomponents-react/dist/TitleLevel';
import { SelectedVariant } from '@ui5/webcomponents-react/dist/VariantManagementContext';
import { CommonProps } from '@ui5/webcomponents-react/interfaces/CommonProps';
import React, { ReactNode } from 'react';
import { Ui5CustomEvent } from '../../interfaces/Ui5CustomEvent';
import { VariantItemPropTypes } from './VariantItem';
interface UpdatedVariant extends SelectedVariant {
    prevVariant?: VariantItemPropTypes;
}
export interface VariantManagementPropTypes extends Omit<CommonProps, 'onSelect'> {
    /**
     * Variant items displayed by the VariantManagement component.
     *
     * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use `VariantItem` in order to preserve the intended design.
     */
    children?: ReactNode | ReactNode[];
    /**
     * Determines on which side the VariantManagement popover is placed at.
     */
    placement?: PopoverPlacementType | keyof typeof PopoverPlacementType;
    /**
     * Describes the title of the VariantManagement popover.
     *
     * __Note:__ If not set, the default title is used.
     */
    titleText?: string;
    /**
     * Defines whether the VariantManagement should be closed if an item was selected.
     */
    closeOnItemSelect?: boolean;
    /**
     * Describes the `HTML Title` level of the variants.
     */
    level?: TitleLevel | keyof typeof TitleLevel;
    /**
     * Defines whether the VariantManagement is disabled.
     */
    disabled?: boolean;
    /**
     * Fired after a variant has been selected.
     */
    onSelect?: (event: Ui5CustomEvent<HTMLElement, {
        selectedVariant: SelectedVariant;
        selectedItems: unknown[];
        previouslySelectedItems: unknown[];
    }>) => void;
    /**
     * Indicator for modified but not saved variants.
     *
     * __Note:__ You can change the indicator by setting `dirtyStateText`.
     */
    dirtyState?: boolean;
    /**
     * Text for the dirty state indicator.
     */
    dirtyStateText?: string;
    /**
     * Indicates that the 'Favorites' feature is used. Only variants marked as favorites will be displayed in the variant list.
     */
    showOnlyFavorites?: boolean;
    /**
     * Indicates that set as default is visible in the Save View and the Manage Views dialogs.
     */
    hideSetAsDefault?: boolean;
    /**
     * Indicates that the Public indicator is visible in the Save View and the Manage Views dialogs.
     */
    hideShare?: boolean;
    /**
     * Indicates that Apply Automatically is visible in the Save View and the Manage Views dialogs.
     */
    hideApplyAutomatically?: boolean;
    /**
     * Indicates that the Save View dialog button is visible.
     */
    hideSaveAs?: boolean;
    /**
     * Indicates that the Manage Views dialog button is visible.
     */
    hideManageVariants?: boolean;
    /**
     * Displays the cancel button in the popover.
     */
    showCancelButton?: boolean;
    /**
     * Indicates that the control is in error state. If set to true error message will be displayed whenever the variant is opened.
     */
    inErrorState?: boolean;
    /**
     * Defines where modals are rendered into via `React.createPortal`.
     *
     * Defaults to: `document.body`
     */
    portalContainer?: Element;
    /**
     * The event is fired when the "Save" button is clicked inside the Save View dialog.
     */
    onSaveAs?: (e: CustomEvent<SelectedVariant>) => void;
    /**
     * The event is fired when the "Save" button is clicked inside the Manage Views dialog.
     */
    onSaveManageViews?: (e: CustomEvent<{
        deletedVariants: VariantItemPropTypes[];
        prevVariants: VariantItemPropTypes[];
        updatedVariants: UpdatedVariant[];
        variants: SelectedVariant[];
    }>) => void;
    /**
     * The event is fired when the "Save" button is clicked in the `VariantManagement` popover.
     *
     * __Note:__ The save button is only displayed if the `VariantManagement` is in `dirtyState` and the selected variant is not in `readOnly` mode.
     */
    onSave?: (e: CustomEvent<SelectedVariant>) => void;
}
/**
 * The `VariantManagement` component can be used to manage variants, such as FilterBar variants or AnalyticalTable variants.
 */
declare const VariantManagement: React.ForwardRefExoticComponent<Pick<VariantManagementPropTypes, "id" | "color" | "translate" | "hidden" | "dir" | "slot" | "style" | "title" | "accessKey" | "draggable" | "lang" | "className" | "prefix" | "children" | "contentEditable" | "inputMode" | "tabIndex" | "disabled" | "tooltip" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "contextMenu" | "placeholder" | "spellCheck" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "showCancelButton" | "portalContainer" | "titleText" | "level" | "placement" | "dirtyState" | "dirtyStateText" | "closeOnItemSelect" | "showOnlyFavorites" | "hideSetAsDefault" | "hideShare" | "hideApplyAutomatically" | "hideSaveAs" | "hideManageVariants" | "inErrorState" | "onSaveAs" | "onSaveManageViews" | "onSave"> & React.RefAttributes<HTMLDivElement>>;
export { VariantManagement };
