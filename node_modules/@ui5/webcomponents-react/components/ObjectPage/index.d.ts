import { ObjectPageMode } from '@ui5/webcomponents-react/dist/ObjectPageMode';
import { CommonProps } from '@ui5/webcomponents-react/interfaces/CommonProps';
import React, { ReactElement, ReactNode } from 'react';
import { ObjectPageSectionPropTypes } from '../ObjectPageSection';
export interface ObjectPagePropTypes extends Omit<CommonProps, 'placeholder'> {
    /**
     * Defines the the upper, always static, title section of the `ObjectPage`.
     *
     * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use `DynamicPageTitle` in order to preserve the intended design.
     * __Note:__ If not defined otherwise the prop `showSubHeaderRight` of the `DynamicPageTitle` is set to `true` by default.
     */
    headerTitle?: ReactElement;
    /**
     * Defines the dynamic header section of the `ObjectPage`.
     *
     * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use `DynamicPageHeader` in order to preserve the intended design.
     */
    headerContent?: ReactElement;
    /**
     * React element which defines the footer content.
     *
     * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use `Bar` with `design={BarDesign.FloatingFooter}` in order to preserve the intended design.
     */
    footer?: ReactElement;
    /**
     * Defines the image of the `ObjectPage`. You can pass a path to an image or an `Avatar` component.
     */
    image?: string | ReactElement;
    /**
     * Defines the content area of the `ObjectPage`. It consists of sections and subsections.
     *
     * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use `ObjectPageSection` and `ObjectPageSubSection` in order to preserve the intended design.
     */
    children?: ReactElement<ObjectPageSectionPropTypes> | ReactElement<ObjectPageSectionPropTypes>[];
    /**
     * Defines the ID of the currently `ObjectPageSection` section.
     */
    selectedSectionId?: string;
    /**
     * Defines the ID of the currently `ObjectPageSubSection` section.
     */
    selectedSubSectionId?: string;
    /**
     * Defines where modals are rendered into via `React.createPortal`.
     *
     * Defaults to: `document.body`
     */
    portalContainer?: Element;
    /**
     * Fired when the selected section changes.
     */
    onSelectedSectionChange?: (event: CustomEvent<{
        selectedSectionIndex: number;
        selectedSectionId: string;
        section: HTMLDivElement;
    }>) => void;
    /**
     * Defines whether the `headerContent` is hidden by scrolling down.
     */
    alwaysShowContentHeader?: boolean;
    /**
     * Defines whether the title is displayed in the content section of the header or above the image.
     */
    showTitleInHeaderContent?: boolean;
    /**
     * Defines whether the image should be displayed in a circle or in a square.<br />
     * __Note:__ If the `image` is not a `string`, this prop has no effect.
     */
    imageShapeCircle?: boolean;
    /**
     * Defines the `ObjectPage` mode.
     *
     * - "Default": All `ObjectPageSections` and `ObjectPageSubSections` are displayed on one page. Selecting tabs will scroll to the corresponding section.
     * - "IconTabBar": All `ObjectPageSections` are displayed on separate pages. Selecting tabs will lead to the corresponding page.
     */
    mode?: ObjectPageMode | keyof typeof ObjectPageMode;
    /**
     * Defines whether the pin button of the header is displayed.
     */
    showHideHeaderButton?: boolean;
    /**
     * Defines whether the `headerContent` is pinnable.
     */
    headerContentPinnable?: boolean;
    /**
     * Defines internally used a11y properties.
     */
    a11yConfig?: {
        objectPageTopHeader?: {
            role?: string;
            ariaRoledescription?: string;
        };
        dynamicPageAnchorBar?: {
            role?: string;
        };
    };
    /**
     * If set, only the specified placeholder will be displayed as content of the `ObjectPage`, no sections or sub-sections will be rendered.
     *
     * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use placeholder components like the `IllustratedMessage` or custom skeletons pages in order to preserve the intended design.
     */
    placeholder?: ReactNode;
}
/**
 * A component that allows apps to easily display information related to a business object.<br />
 * The `ObjectPage` is composed of a header (title and content) and block content wrapped in sections and subsections that structure the information.
 */
declare const ObjectPage: React.ForwardRefExoticComponent<Pick<ObjectPagePropTypes, "id" | "color" | "translate" | "hidden" | "dir" | "footer" | "slot" | "style" | "title" | "image" | "accessKey" | "draggable" | "lang" | "className" | "prefix" | "children" | "contentEditable" | "inputMode" | "tabIndex" | "tooltip" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "contextMenu" | "placeholder" | "spellCheck" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "mode" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "a11yConfig" | "portalContainer" | "headerContent" | "headerContentPinnable" | "showHideHeaderButton" | "alwaysShowContentHeader" | "headerTitle" | "imageShapeCircle" | "selectedSectionId" | "selectedSubSectionId" | "onSelectedSectionChange" | "showTitleInHeaderContent"> & React.RefAttributes<HTMLDivElement>>;
export { ObjectPage };
