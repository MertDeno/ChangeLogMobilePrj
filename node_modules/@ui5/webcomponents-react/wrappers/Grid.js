import _extends from '@babel/runtime/helpers/extends';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import _wrapRegExp from '@babel/runtime/helpers/wrapRegExp';
import { isIE } from '@ui5/webcomponents-react-base/dist/Device';
import { useViewportRange } from '@ui5/webcomponents-react-base/dist/useViewportRange';
import { GridPosition } from '@ui5/webcomponents-react/dist/GridPosition';
import React, { useEffect, forwardRef, useCallback, cloneElement, Children } from 'react';
import { createUseStyles } from 'react-jss';
import { deprecationNotice } from '@ui5/webcomponents-react-base/dist/Utils';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import clsx from 'clsx';

var useDeprecationNoticeForTooltip = function useDeprecationNoticeForTooltip(component, tooltip) {
  useEffect(function () {
    if (tooltip) {
      deprecationNotice(component, '`tooltip` has been deprecated, please use the native `title` attribute instead.');
    }
  }, [tooltip]);
};

var generateGridSpans = function generateGridSpans() {
  var gridSpan = {};

  for (var i = 1; i <= 12; i++) {
    gridSpan["gridSpan".concat(i)] = _defineProperty({
      gridColumn: "span ".concat(i)
    }, '-ms-grid-column-span', i);
  }

  return gridSpan;
};

var styles = _objectSpread(_objectSpread({
  grid: {
    display: 'grid',
    gridTemplateColumns: "repeat(12, 1fr)",
    '-ms-grid-columns': '(1fr)[12]'
  }
}, generateGridSpans()), {}, {
  positionCenter: {
    marginLeft: 'auto',
    marginRight: 'auto'
  },
  positionRight: {
    marginLeft: 'auto',
    marginRight: 0
  }
});

var _excluded = ["position", "children", "hSpacing", "vSpacing", "style", "className", "tooltip", "slot", "defaultIndent", "defaultSpan"];

var INDENT_PATTERN = /*#__PURE__*/_wrapRegExp(/^(XL([0-9]|1[0-2]))? ?(L([0-9]|1[0-2]))? ?(M([0-9]|1[0-2]))? ?(S([0-9]|1[0-2]))?$/i, {
  LargeDesktop: 2,
  Desktop: 4,
  Tablet: 6,
  Phone: 8
});

var SPAN_PATTERN = /*#__PURE__*/_wrapRegExp(/^(XL([1-9]|1[0-2]))? ?(L([1-9]|1[0-2]))? ?(M([1-9]|1[0-2]))? ?(S([1-9]|1[0-2]))?$/i, {
  LargeDesktop: 2,
  Desktop: 4,
  Tablet: 6,
  Phone: 8
});

var DefaultSpanMap = new Map();
DefaultSpanMap.set('Phone', 1);
DefaultSpanMap.set('Tablet', 2);
DefaultSpanMap.set('Desktop', 4);
DefaultSpanMap.set('LargeDesktop', 4);
var DefaultIndentMap = new Map();
DefaultIndentMap.set('Phone', 0);
DefaultIndentMap.set('Tablet', 0);
DefaultIndentMap.set('Desktop', 0);
DefaultIndentMap.set('LargeDesktop', 0);

var getSpanFromString = function getSpanFromString(span, currentRange) {
  var _spanConfig$groups$cu;

  var spanConfig = SPAN_PATTERN.exec(span);
  return (_spanConfig$groups$cu = spanConfig === null || spanConfig === void 0 ? void 0 : spanConfig.groups[currentRange]) !== null && _spanConfig$groups$cu !== void 0 ? _spanConfig$groups$cu : DefaultSpanMap.get(currentRange);
};

var getIndentFromString = function getIndentFromString(indent, currentRange) {
  var _indentConfig$groups$;

  var indentConfig = INDENT_PATTERN.exec(indent);
  return (_indentConfig$groups$ = indentConfig === null || indentConfig === void 0 ? void 0 : indentConfig.groups[currentRange]) !== null && _indentConfig$groups$ !== void 0 ? _indentConfig$groups$ : DefaultIndentMap.get(currentRange);
};

var getIECellPlacement = function getIECellPlacement(col, row, span) {
  var colStart;
  var safeSpan = parseInt(span);
  var added = col + safeSpan;

  if (added <= 12) {
    colStart = col + 1;
    col = added;
  } else {
    colStart = 1;
    col = safeSpan;
    row++;
  }

  return [col, row, colStart];
};

var useStyles = createUseStyles(styles, {
  name: 'Grid'
});
/**
 * A layout container component used for aligning items with various sizes in a simple grid.
 */

var Grid = /*#__PURE__*/forwardRef(function (props, ref) {
  var position = props.position,
      children = props.children,
      hSpacing = props.hSpacing,
      vSpacing = props.vSpacing,
      style = props.style,
      className = props.className,
      tooltip = props.tooltip,
      slot = props.slot,
      defaultIndent = props.defaultIndent,
      defaultSpan = props.defaultSpan,
      rest = _objectWithoutProperties(props, _excluded);

  useDeprecationNoticeForTooltip('Grid', props.tooltip);
  var classes = useStyles();
  var currentRange = useViewportRange();
  var gridClasses = clsx(classes.grid, GridPosition.Center === position && classes.positionCenter, GridPosition.Right === position && classes.positionRight, className);
  var column = 0;
  var row = 1;
  var renderGridElements = useCallback(function (child) {
    var _child$props$dataLay, _child$props$dataLay2;

    if (!child) return null;
    var childSpan = getSpanFromString((_child$props$dataLay = child.props['data-layout-span']) !== null && _child$props$dataLay !== void 0 ? _child$props$dataLay : defaultSpan, currentRange);
    var childClass = classes["gridSpan".concat(childSpan)];
    var childrenWithGridLayout = [/*#__PURE__*/React.createElement("div", {
      className: childClass
    }, child)];
    var indentSpan = getIndentFromString((_child$props$dataLay2 = child.props['data-layout-indent']) !== null && _child$props$dataLay2 !== void 0 ? _child$props$dataLay2 : defaultIndent, currentRange);

    if (indentSpan && indentSpan > 0) {
      childrenWithGridLayout.unshift( /*#__PURE__*/React.createElement("span", {
        className: classes["gridSpan".concat(indentSpan)]
      }));
    }

    if (isIE()) {
      return childrenWithGridLayout.map(function (item, index) {
        var colStart;

        if (childrenWithGridLayout.length === 2 && index === 0) {
          var _getIECellPlacement = getIECellPlacement(column, row, indentSpan);

          var _getIECellPlacement2 = _slicedToArray(_getIECellPlacement, 3);

          column = _getIECellPlacement2[0];
          row = _getIECellPlacement2[1];
          colStart = _getIECellPlacement2[2];
          return /*#__PURE__*/cloneElement(item, {
            style: {
              marginRight: vSpacing,
              marginBottom: hSpacing,
              msGridRow: row,
              msGridColumn: colStart
            }
          });
        }

        var _getIECellPlacement3 = getIECellPlacement(column, row, childSpan);

        var _getIECellPlacement4 = _slicedToArray(_getIECellPlacement3, 3);

        column = _getIECellPlacement4[0];
        row = _getIECellPlacement4[1];
        colStart = _getIECellPlacement4[2];
        return /*#__PURE__*/cloneElement(item, {
          style: {
            marginRight: vSpacing,
            marginBottom: hSpacing,
            msGridRow: row,
            msGridColumn: colStart
          }
        });
      });
    }

    return childrenWithGridLayout;
  }, [currentRange, defaultSpan, defaultIndent, classes, vSpacing, hSpacing]);
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: gridClasses,
    style: _objectSpread({
      gridRowGap: vSpacing,
      gridColumnGap: hSpacing
    }, style),
    title: tooltip,
    slot: slot
  }, rest), Children.map(children, renderGridElements));
});
Grid.displayName = 'Grid';
Grid.defaultProps = {
  hSpacing: '1rem',
  vSpacing: '1rem',
  defaultIndent: 'XL0 L0 M0 S0',
  defaultSpan: 'XL3 L3 M6 S12'
};

export { Grid };
//# sourceMappingURL=Grid.js.map
