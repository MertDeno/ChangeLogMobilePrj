import _extends from '@babel/runtime/helpers/extends';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import '@ui5/webcomponents-icons/dist/alert.js';
import '@ui5/webcomponents-icons/dist/error.js';
import '@ui5/webcomponents-icons/dist/information.js';
import '@ui5/webcomponents-icons/dist/slim-arrow-left.js';
import '@ui5/webcomponents-icons/dist/sys-enter-2.js';
import { useSyncRef, useI18nBundle } from '@ui5/webcomponents-react-base/dist/hooks';
import { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';
import { ALL } from '@ui5/webcomponents-react/dist/assets/i18n/i18n-defaults';
import { Bar } from '@ui5/webcomponents-react/dist/Bar';
import { Button } from '@ui5/webcomponents-react/dist/Button';
import { ButtonDesign } from '@ui5/webcomponents-react/dist/ButtonDesign';
import { FlexBox } from '@ui5/webcomponents-react/dist/FlexBox';
import { FlexBoxDirection } from '@ui5/webcomponents-react/dist/FlexBoxDirection';
import { GroupHeaderListItem } from '@ui5/webcomponents-react/dist/GroupHeaderListItem';
import { Icon } from '@ui5/webcomponents-react/dist/Icon';
import { List } from '@ui5/webcomponents-react/dist/List';
import { MessageViewContext } from '@ui5/webcomponents-react/dist/MessageViewContext';
import { SegmentedButton } from '@ui5/webcomponents-react/dist/SegmentedButton';
import { SegmentedButtonItem } from '@ui5/webcomponents-react/dist/SegmentedButtonItem';
import { Title } from '@ui5/webcomponents-react/dist/Title';
import { TitleLevel } from '@ui5/webcomponents-react/dist/TitleLevel';
import { ValueState as ValueState$1 } from '@ui5/webcomponents-react/dist/ValueState';
import clsx from 'clsx';
import React, { useEffect, forwardRef, useState, Children, useCallback, Fragment } from 'react';
import { createUseStyles } from 'react-jss';
import { deprecationNotice } from '@ui5/webcomponents-react-base/dist/Utils';

var useDeprecationNoticeForTooltip = function useDeprecationNoticeForTooltip(component, tooltip) {
  useEffect(function () {
    if (tooltip) {
      deprecationNotice(component, '`tooltip` has been deprecated, please use the native `title` attribute instead.');
    }
  }, [tooltip]);
};

var ValueState;

(function (ValueState) {
  ValueState["Error"] = "Error";
  ValueState["None"] = "None";
  ValueState["Success"] = "Success";
  ValueState["Warning"] = "Warning";
  ValueState["Information"] = "Information";
})(ValueState || (ValueState = {}));

var getIconNameForType = function getIconNameForType(type) {
  switch (type) {
    case ValueState.Error:
    case 'Error':
      return 'error';

    case ValueState.Success:
    case 'Success':
      return 'sys-enter-2';

    case ValueState.Warning:
    case 'Warning':
      return 'alert';

    default:
      return 'information';
  }
};

var _excluded = ["children", "groupItems", "showDetailsPageHeader", "className", "onItemSelect", "tooltip"];
var resolveMessageTypes = function resolveMessageTypes(children) {
  var _map$reduce;

  return (children !== null && children !== void 0 ? children : []).map(function (message) {
    var _message$props;

    return message === null || message === void 0 ? void 0 : (_message$props = message.props) === null || _message$props === void 0 ? void 0 : _message$props.type;
  }).reduce(function (acc, type) {
    var finalType = type === ValueState$1.None ? ValueState$1.Information : type;

    if (acc.hasOwnProperty(finalType)) {
      acc[finalType]++;
    }

    return acc;
  }, (_map$reduce = {}, _defineProperty(_map$reduce, ValueState$1.Error, 0), _defineProperty(_map$reduce, ValueState$1.Warning, 0), _defineProperty(_map$reduce, ValueState$1.Success, 0), _defineProperty(_map$reduce, ValueState$1.Information, 0), _map$reduce));
};
var resolveMessageGroups = function resolveMessageGroups(children) {
  var groups = (children !== null && children !== void 0 ? children : []).reduce(function (acc, val) {
    var _val$props$groupName, _val$props;

    var groupName = (_val$props$groupName = val === null || val === void 0 ? void 0 : (_val$props = val.props) === null || _val$props === void 0 ? void 0 : _val$props.groupName) !== null && _val$props$groupName !== void 0 ? _val$props$groupName : '';

    if (acc.hasOwnProperty(groupName)) {
      acc[groupName].push(val);
    } else {
      acc[groupName] = [val];
    }

    return acc;
  }, {});
  return Object.entries(groups).sort(function (a, b) {
    return a[0].localeCompare(b[0]);
  });
};
var useStyles = createUseStyles({
  container: {
    width: '100%',
    overflow: 'hidden',
    display: 'flex',
    height: 500,
    '& > *': {
      width: '100%',
      flexShrink: 0,
      transition: 'transform 200ms ease-in-out'
    }
  },
  showDetails: {
    '& > *': {
      transform: 'translateX(-100%)'
    }
  },
  button: {
    '&[data-key="Error"]:not([pressed])': {
      color: ThemingParameters.sapNegativeElementColor
    },
    '&[data-key="Warning"]:not([pressed])': {
      color: ThemingParameters.sapCriticalElementColor
    },
    '&[data-key="Success"]:not([pressed])': {
      color: ThemingParameters.sapPositiveElementColor
    },
    '&[data-key="Information"]:not([pressed])': {
      color: ThemingParameters.sapNeutralElementColor
    }
  },
  detailsContainer: {
    padding: '1rem'
  },
  detailsIcon: {
    flexShrink: 0,
    margin: '0 1rem 0 0.5rem',
    '&[data-type="Error"]': {
      color: ThemingParameters.sapNegativeElementColor
    },
    '&[data-type="Warning"]': {
      color: ThemingParameters.sapCriticalElementColor
    },
    '&[data-type="Success"]': {
      color: ThemingParameters.sapPositiveElementColor
    },
    '&[data-type="Information"]': {
      color: ThemingParameters.sapNeutralElementColor
    }
  },
  detailsTitle: {
    marginBottom: '1rem'
  },
  detailsText: {
    fontFamily: ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.sapFontSize,
    lineHeight: 1.4,
    color: ThemingParameters.sapTextColor,
    marginBottom: '1rem'
  }
}, {
  name: 'MessageView'
});
var MessageView = /*#__PURE__*/forwardRef(function (props, ref) {
  var children = props.children,
      groupItems = props.groupItems,
      showDetailsPageHeader = props.showDetailsPageHeader,
      className = props.className,
      onItemSelect = props.onItemSelect,
      tooltip = props.tooltip,
      rest = _objectWithoutProperties(props, _excluded);

  useDeprecationNoticeForTooltip('MessageView', props.tooltip);

  var _useSyncRef = useSyncRef(ref),
      _useSyncRef2 = _slicedToArray(_useSyncRef, 2),
      componentRef = _useSyncRef2[0],
      internalRef = _useSyncRef2[1];

  var classes = useStyles();
  var i18nBundle = useI18nBundle('@ui5/webcomponents-react');

  var _useState = useState('All'),
      _useState2 = _slicedToArray(_useState, 2),
      listFilter = _useState2[0],
      setListFilter = _useState2[1];

  var _useState3 = useState(null),
      _useState4 = _slicedToArray(_useState3, 2),
      selectedMessage = _useState4[0],
      setSelectedMessage = _useState4[1];

  var childrenArray = Children.toArray(children);
  var messageTypes = resolveMessageTypes(childrenArray);
  var filledTypes = Object.values(messageTypes).filter(function (count) {
    return count > 0;
  }).length;
  var filteredChildren = listFilter === 'All' ? childrenArray : childrenArray.filter(function (message) {
    var _message$props4;

    if (listFilter === ValueState$1.Information) {
      var _message$props2, _message$props3;

      return (message === null || message === void 0 ? void 0 : (_message$props2 = message.props) === null || _message$props2 === void 0 ? void 0 : _message$props2.type) === ValueState$1.Information || (message === null || message === void 0 ? void 0 : (_message$props3 = message.props) === null || _message$props3 === void 0 ? void 0 : _message$props3.type) === ValueState$1.None;
    }

    return (message === null || message === void 0 ? void 0 : (_message$props4 = message.props) === null || _message$props4 === void 0 ? void 0 : _message$props4.type) === listFilter;
  });
  var groupedMessages = resolveMessageGroups(filteredChildren);
  var navigateBack = useCallback(function () {
    setSelectedMessage(null);
  }, [setSelectedMessage]);
  useEffect(function () {
    if (internalRef.current) {
      internalRef.current.navigateBack = navigateBack;
    }
  }, [internalRef.current, navigateBack]);

  var handleListFilterChange = function handleListFilterChange(e) {
    setListFilter(e.detail.selectedItem.dataset.key);
  };

  var outerClasses = clsx(classes.container, className, selectedMessage && classes.showDetails);
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: componentRef,
    title: tooltip
  }, rest, {
    className: outerClasses
  }), /*#__PURE__*/React.createElement(MessageViewContext.Provider, {
    value: {
      selectMessage: setSelectedMessage
    }
  }, /*#__PURE__*/React.createElement("div", null, filledTypes > 1 && /*#__PURE__*/React.createElement(Bar, {
    startContent: /*#__PURE__*/React.createElement(SegmentedButton, {
      onSelectionChange: handleListFilterChange
    }, /*#__PURE__*/React.createElement(SegmentedButtonItem, {
      "data-key": "All",
      pressed: listFilter === 'All'
    }, i18nBundle.getText(ALL)), Object.entries(messageTypes).map(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 2),
          valueState = _ref2[0],
          count = _ref2[1];

      if (count === 0) {
        return null;
      }

      return /*#__PURE__*/React.createElement(SegmentedButtonItem, {
        key: valueState,
        "data-key": valueState,
        pressed: listFilter === valueState,
        icon: getIconNameForType(valueState),
        className: classes.button
      }, count);
    }))
  }), /*#__PURE__*/React.createElement(List, {
    onItemClick: onItemSelect
  }, groupItems ? groupedMessages.map(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
        groupName = _ref4[0],
        items = _ref4[1];

    return /*#__PURE__*/React.createElement(Fragment, {
      key: groupName
    }, groupName && /*#__PURE__*/React.createElement(GroupHeaderListItem, null, groupName), items);
  }) : filteredChildren)), /*#__PURE__*/React.createElement("div", null, showDetailsPageHeader && /*#__PURE__*/React.createElement(Bar, {
    startContent: /*#__PURE__*/React.createElement(Button, {
      design: ButtonDesign.Transparent,
      icon: "slim-arrow-left",
      onClick: navigateBack
    })
  }), selectedMessage && /*#__PURE__*/React.createElement(FlexBox, {
    className: classes.detailsContainer
  }, /*#__PURE__*/React.createElement(Icon, {
    "data-type": selectedMessage.type,
    name: getIconNameForType(selectedMessage.type),
    className: classes.detailsIcon
  }), /*#__PURE__*/React.createElement(FlexBox, {
    direction: FlexBoxDirection.Column
  }, /*#__PURE__*/React.createElement(Title, {
    level: TitleLevel.H5,
    className: classes.detailsTitle
  }, selectedMessage.titleText), /*#__PURE__*/React.createElement("div", {
    className: classes.detailsText
  }, selectedMessage.children))))));
});
MessageView.displayName = 'MessageView';
MessageView.defaultProps = {
  showDetailsPageHeader: false,
  groupItems: false
};

export { MessageView, resolveMessageGroups, resolveMessageTypes };
//# sourceMappingURL=MessageView.js.map
