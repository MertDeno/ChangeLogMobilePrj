import _extends from '@babel/runtime/helpers/extends';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import { isIE } from '@ui5/webcomponents-react-base/dist/Device';
import { useSyncRef, useIsRTL, useI18nBundle, useResponsiveContentPadding } from '@ui5/webcomponents-react-base/dist/hooks';
import { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';
import { deprecationNotice, enrichEventWithDetails, debounce } from '@ui5/webcomponents-react-base/dist/Utils';
import { FlexBox } from '@ui5/webcomponents-react/dist/FlexBox';
import { GlobalStyleClasses } from '@ui5/webcomponents-react/dist/GlobalStyleClasses';
import { PageBackgroundDesign } from '@ui5/webcomponents-react/dist/PageBackgroundDesign';
import clsx from 'clsx';
import React, { useEffect, useState, forwardRef, useCallback, useRef, cloneElement } from 'react';
import { createUseStyles } from 'react-jss';
import { addCustomCSS } from '@ui5/webcomponents-base/dist/Theming.js';
import '@ui5/webcomponents-icons/dist/pushpin-off.js';
import '@ui5/webcomponents-icons/dist/slim-arrow-down.js';
import '@ui5/webcomponents-icons/dist/slim-arrow-up.js';
import { EXPAND_HEADER, COLLAPSE_HEADER, UNPIN_HEADER, PIN_HEADER } from '@ui5/webcomponents-react/dist/assets/i18n/i18n-defaults';
import { Button } from '@ui5/webcomponents-react/dist/Button';
import { ToggleButton } from '@ui5/webcomponents-react/dist/ToggleButton';
import _defineProperty from '@babel/runtime/helpers/defineProperty';

var useDeprecationNoticeForTooltip = function useDeprecationNoticeForTooltip(component, tooltip) {
  useEffect(function () {
    if (tooltip) {
      deprecationNotice(component, '`tooltip` has been deprecated, please use the native `title` attribute instead.');
    }
  }, [tooltip]);
};

var useObserveHeights = function useObserveHeights(objectPage, topHeader, headerContentRef, anchorBarRef, _ref) {
  var _anchorBarRef$current, _anchorBarRef$current2;

  var noHeader = _ref.noHeader;

  var _useState = useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      topHeaderHeight = _useState2[0],
      setTopHeaderHeight = _useState2[1];

  var _useState3 = useState(0),
      _useState4 = _slicedToArray(_useState3, 2),
      headerContentHeight = _useState4[0],
      setHeaderContentHeight = _useState4[1];

  var _useState5 = useState(true),
      _useState6 = _slicedToArray(_useState5, 2),
      isIntersecting = _useState6[0],
      setIsIntersecting = _useState6[1];

  useEffect(function () {
    var headerIntersectionObserver = new IntersectionObserver(function (_ref2) {
      var _ref3 = _slicedToArray(_ref2, 1),
          header = _ref3[0];

      if (header.isIntersecting) {
        setIsIntersecting(true);
      } else {
        setIsIntersecting(false);
        setHeaderContentHeight(0);
      }
    }, {
      rootMargin: "-".concat(topHeaderHeight, "px 0px 0px 0px"),
      root: objectPage === null || objectPage === void 0 ? void 0 : objectPage.current,
      threshold: 0.3
    });

    if (headerContentRef !== null && headerContentRef !== void 0 && headerContentRef.current) {
      headerIntersectionObserver.observe(headerContentRef.current);
    }

    return function () {
      headerIntersectionObserver.disconnect();
    };
  }, [topHeaderHeight, setHeaderContentHeight, headerContentRef.current, setIsIntersecting]); // top header

  useEffect(function () {
    var headerContentResizeObserver = new ResizeObserver(function (_ref4) {
      var _borderBoxSize$blockS;

      var _ref5 = _slicedToArray(_ref4, 1),
          header = _ref5[0];

      // Firefox implements `borderBoxSize` as a single content rect, rather than an array
      var borderBoxSize = Array.isArray(header.borderBoxSize) ? header.borderBoxSize[0] : header.borderBoxSize; // Safari doesn't implement `borderBoxSize`

      setTopHeaderHeight((_borderBoxSize$blockS = borderBoxSize === null || borderBoxSize === void 0 ? void 0 : borderBoxSize.blockSize) !== null && _borderBoxSize$blockS !== void 0 ? _borderBoxSize$blockS : header.target.getBoundingClientRect().height);
    });

    if (topHeader !== null && topHeader !== void 0 && topHeader.current) {
      headerContentResizeObserver.observe(topHeader.current);
    }

    return function () {
      headerContentResizeObserver.disconnect();
    };
  }, [topHeader === null || topHeader === void 0 ? void 0 : topHeader.current, setTopHeaderHeight]); // header content

  useEffect(function () {
    var headerContentResizeObserver = new ResizeObserver(function (_ref6) {
      var _ref7 = _slicedToArray(_ref6, 1),
          headerContent = _ref7[0];

      if (isIntersecting) {
        var _borderBoxSize$blockS2;

        // Firefox implements `borderBoxSize` as a single content rect, rather than an array
        var borderBoxSize = Array.isArray(headerContent.borderBoxSize) ? headerContent.borderBoxSize[0] : headerContent.borderBoxSize; // Safari doesn't implement `borderBoxSize`

        setHeaderContentHeight((_borderBoxSize$blockS2 = borderBoxSize === null || borderBoxSize === void 0 ? void 0 : borderBoxSize.blockSize) !== null && _borderBoxSize$blockS2 !== void 0 ? _borderBoxSize$blockS2 : headerContent.target.getBoundingClientRect().height);
      }
    });

    if (headerContentRef !== null && headerContentRef !== void 0 && headerContentRef.current) {
      headerContentResizeObserver.observe(headerContentRef.current);
    }

    return function () {
      headerContentResizeObserver.disconnect();
    };
  }, [headerContentRef === null || headerContentRef === void 0 ? void 0 : headerContentRef.current, setHeaderContentHeight, isIntersecting]);
  var anchorBarHeight = (_anchorBarRef$current = anchorBarRef === null || anchorBarRef === void 0 ? void 0 : (_anchorBarRef$current2 = anchorBarRef.current) === null || _anchorBarRef$current2 === void 0 ? void 0 : _anchorBarRef$current2.offsetHeight) !== null && _anchorBarRef$current !== void 0 ? _anchorBarRef$current : 33;
  var totalHeaderHeight = (noHeader ? 0 : topHeaderHeight + headerContentHeight) + anchorBarHeight;
  return {
    topHeaderHeight: topHeaderHeight,
    headerContentHeight: headerContentHeight,
    anchorBarHeight: anchorBarHeight,
    totalHeaderHeight: totalHeaderHeight
  };
};

addCustomCSS('ui5-button', "\n  :host([data-ui5wcr-dynamic-page-header-action]){\n    width: 1.375rem;\n    height: 1.375rem;\n    min-width: 1.375rem;\n  }\n  :host([data-ui5wcr-dynamic-page-header-action]) .ui5-button-root {\n    padding: 0;\n  }");
addCustomCSS('ui5-toggle-button', "\n    :host([data-ui5wcr-dynamic-page-header-action]){\n    width: 1.375rem;\n    height: 1.375rem;\n    min-width: 1.375rem;\n  }\n  :host([data-ui5wcr-dynamic-page-header-action]) .ui5-button-root {\n    padding: 0;\n  }");
var anchorBarStyles = {
  anchorBarActionButton: {
    position: 'absolute',
    top: "-0.6875rem",
    marginLeft: "-0.6875rem",
    left: '50%',
    zIndex: 3,
    '&:before, &:after': {
      content: '""',
      position: 'absolute',
      width: '4rem',
      top: '50%',
      height: '0.0625rem'
    },
    '&:before': {
      right: '100%',
      backgroundImage: "linear-gradient(to left, ".concat(ThemingParameters.sapHighlightColor, ", rgba(8,84,160,0))")
    },
    '&:after': {
      backgroundImage: "linear-gradient(to right, ".concat(ThemingParameters.sapHighlightColor, ", rgba(8,84,160,0))"),
      left: '100%'
    }
  },
  anchorBarActionButtonRtl: {
    marginRight: "-0.6875rem",
    marginLeft: 0
  },
  anchorBarActionButtonExpandable: {},
  anchorBarActionButtonPinnable: {},
  anchorBarActionPinnableAndExpandable: {
    '&$anchorBarActionButtonPinnable': {
      marginLeft: '0.25rem',
      '&:before': {
        backgroundColor: 'white'
      }
    },
    '&$anchorBarActionButtonExpandable': {
      marginLeft: '-1.75rem'
    }
  },
  anchorBarActionPinnableAndExpandableRtl: {
    '&$anchorBarActionButtonPinnable': {
      marginRight: '0.25rem',
      '&:before': {
        backgroundColor: 'white'
      }
    },
    '&$anchorBarActionButtonExpandable': {
      marginRight: '-1.75rem'
    }
  }
};
var useStyles$1 = createUseStyles(anchorBarStyles, {
  name: 'DynamicPageAnchorBar'
});

/**
 * The dynamic page anchor bar contains the expand/collapse (expands or collapses the header content)
 * and pin button (pins the content header).
 */
var DynamicPageAnchorBar = /*#__PURE__*/forwardRef(function (props, ref) {
  var _a11yConfig$dynamicPa, _a11yConfig$dynamicPa2;

  var showHideHeaderButton = props.showHideHeaderButton,
      headerContentVisible = props.headerContentVisible,
      headerContentPinnable = props.headerContentPinnable,
      headerPinned = props.headerPinned,
      setHeaderPinned = props.setHeaderPinned,
      onToggleHeaderContentVisibility = props.onToggleHeaderContentVisibility,
      onHoverToggleButton = props.onHoverToggleButton,
      style = props.style,
      a11yConfig = props.a11yConfig;
  useDeprecationNoticeForTooltip('DynamicPageAnchorBar', props.tooltip);
  var classes = useStyles$1();

  var _useSyncRef = useSyncRef(ref),
      _useSyncRef2 = _slicedToArray(_useSyncRef, 2),
      componentRef = _useSyncRef2[0],
      anchorBarRef = _useSyncRef2[1];

  var isRTL = useIsRTL(anchorBarRef);
  var shouldRenderHeaderPinnableButton = headerContentPinnable && headerContentVisible;
  var showBothActions = shouldRenderHeaderPinnableButton && showHideHeaderButton;
  var onPinHeader = useCallback(function (e) {
    setHeaderPinned(e.target.pressed);
  }, [setHeaderPinned]);
  var anchorBarActionButtonClasses = clsx(classes.anchorBarActionButton, isRTL && classes.anchorBarActionButtonRtl);
  var bothActionClasses = clsx(classes.anchorBarActionPinnableAndExpandable, isRTL && classes.anchorBarActionPinnableAndExpandableRtl);

  var onToggleHeaderButtonClick = function onToggleHeaderButtonClick(e) {
    onToggleHeaderContentVisibility(enrichEventWithDetails(e, {
      visible: !headerContentVisible
    }));
  };

  var i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  return /*#__PURE__*/React.createElement("section", {
    "data-component-name": "DynamicPageAnchorBar",
    style: style,
    role: (_a11yConfig$dynamicPa = a11yConfig === null || a11yConfig === void 0 ? void 0 : (_a11yConfig$dynamicPa2 = a11yConfig.dynamicPageAnchorBar) === null || _a11yConfig$dynamicPa2 === void 0 ? void 0 : _a11yConfig$dynamicPa2.role) !== null && _a11yConfig$dynamicPa !== void 0 ? _a11yConfig$dynamicPa : 'navigation',
    className: showHideHeaderButton || headerContentPinnable ? classes.anchorBarActionButton : null,
    ref: componentRef
  }, showHideHeaderButton && /*#__PURE__*/React.createElement(Button, {
    icon: !headerContentVisible ? 'slim-arrow-down' : 'slim-arrow-up',
    "data-ui5wcr-dynamic-page-header-action": "",
    className: clsx(anchorBarActionButtonClasses, classes.anchorBarActionButtonExpandable, showBothActions && bothActionClasses),
    onClick: onToggleHeaderButtonClick,
    onMouseOver: onHoverToggleButton,
    onMouseLeave: onHoverToggleButton,
    title: i18nBundle.getText(!headerContentVisible ? EXPAND_HEADER : COLLAPSE_HEADER),
    "aria-label": i18nBundle.getText(!headerContentVisible ? EXPAND_HEADER : COLLAPSE_HEADER)
  }), shouldRenderHeaderPinnableButton && /*#__PURE__*/React.createElement(ToggleButton, {
    icon: "pushpin-off",
    "data-ui5wcr-dynamic-page-header-action": "",
    className: clsx(anchorBarActionButtonClasses, classes.anchorBarActionButtonPinnable, showBothActions && bothActionClasses),
    pressed: headerPinned,
    onClick: onPinHeader,
    title: i18nBundle.getText(headerPinned ? UNPIN_HEADER : PIN_HEADER),
    "aria-label": i18nBundle.getText(headerPinned ? UNPIN_HEADER : PIN_HEADER)
  }));
});
DynamicPageAnchorBar.displayName = 'DynamicPageAnchorBar';

var _headerCollapsed;
var DynamicPageCssVariables = {
  headerDisplay: '--ui5wcr_DynamicPage_header_display'
};
var styles = {
  dynamicPage: _defineProperty({
    width: '100%',
    height: '100%',
    maxHeight: '100%',
    position: 'relative',
    whiteSpace: 'normal',
    fontFamily: ThemingParameters.sapFontFamily,
    backgroundColor: ThemingParameters.sapBackgroundColor,
    overflowX: 'hidden',
    overflowY: 'auto'
  }, DynamicPageCssVariables.headerDisplay, 'block'),
  headerCollapsed: (_headerCollapsed = {}, _defineProperty(_headerCollapsed, DynamicPageCssVariables.headerDisplay, 'none'), _defineProperty(_headerCollapsed, '& $anchorBar > section[role="navigation"]', {
    top: '-0.025rem'
  }), _headerCollapsed),
  anchorBar: {
    position: 'sticky',
    boxShadow: ThemingParameters.sapContent_HeaderShadow,
    height: '1px',
    zIndex: 2,
    '& > section[role="navigation"]': {
      top: 0
    }
  },
  iEClass: {
    position: 'fixed',
    //page width - scrollbar
    width: 'calc(100% - 18px)'
  },
  iEBackgroundElement: {
    position: 'fixed',
    backgroundColor: ThemingParameters.sapObjectHeader_Background
  },
  contentContainer: {
    paddingTop: '1rem',
    boxSizing: 'border-box',
    width: '100%',
    height: 'auto',
    fontFamily: ThemingParameters.sapFontFamily,
    zIndex: 0
  },
  backgroundStandard: {
    background: ThemingParameters.sapBackgroundColor
  },
  backgroundSolid: {
    background: ThemingParameters.sapBackgroundColor
  },
  backgroundList: {
    background: ThemingParameters.sapGroup_ContentBackground
  },
  backgroundTransparent: {
    background: 'transparent'
  },
  footer: {
    bottom: '0.5rem',
    margin: '0 0.5rem',
    left: 0,
    right: 0
  }
};

var _excluded = ["headerTitle", "headerContent", "tooltip", "style", "backgroundDesign", "showHideHeaderButton", "headerContentPinnable", "alwaysShowContentHeader", "children", "className", "footer", "a11yConfig"],
    _excluded2 = ["onScroll"];

/**
 * Defines the current state of the component.
 */
var HEADER_STATES;

(function (HEADER_STATES) {
  HEADER_STATES["AUTO"] = "AUTO";
  HEADER_STATES["VISIBLE_PINNED"] = "VISIBLE_PINNED";
  HEADER_STATES["HIDDEN_PINNED"] = "HIDDEN_PINNED";
  HEADER_STATES["VISIBLE"] = "VISIBLE";
  HEADER_STATES["HIDDEN"] = "HIDDEN";
})(HEADER_STATES || (HEADER_STATES = {}));

var useStyles = createUseStyles(styles, {
  name: 'DynamicPage'
});
/**
 * The dynamic page is a generic layout control designed to support various floorplans and use cases.
 * The content of both the header and the page can differ from floorplan to floorplan.
 *
 * The header of the dynamic page is collapsible, which helps users to focus on the actual page content, but still ensures that important header information
 * and actions are readily available.
 */

var DynamicPage = /*#__PURE__*/forwardRef(function (props, ref) {
  var _headerTitle$props, _headerContentRef$cur, _headerContentRef$cur2, _dynamicPageRef$curre3, _dynamicPageRef$curre4;

  var headerTitle = props.headerTitle,
      headerContent = props.headerContent,
      tooltip = props.tooltip,
      style = props.style,
      backgroundDesign = props.backgroundDesign,
      showHideHeaderButton = props.showHideHeaderButton,
      headerContentPinnable = props.headerContentPinnable,
      alwaysShowContentHeader = props.alwaysShowContentHeader,
      children = props.children,
      className = props.className,
      footer = props.footer,
      a11yConfig = props.a11yConfig,
      rest = _objectWithoutProperties(props, _excluded);

  rest.onScroll;
      var propsWithoutOmitted = _objectWithoutProperties(rest, _excluded2);

  useDeprecationNoticeForTooltip('DynamicPage', props.tooltip);
  var anchorBarRef = useRef();

  var _useSyncRef = useSyncRef(ref),
      _useSyncRef2 = _slicedToArray(_useSyncRef, 2),
      componentRef = _useSyncRef2[0],
      dynamicPageRef = _useSyncRef2[1];

  var contentRef = useRef(); // @ts-ignore

  var _useSyncRef3 = useSyncRef(headerTitle === null || headerTitle === void 0 ? void 0 : headerTitle.ref),
      _useSyncRef4 = _slicedToArray(_useSyncRef3, 2),
      componentRefTopHeader = _useSyncRef4[0],
      topHeaderRef = _useSyncRef4[1]; // @ts-ignore


  var _useSyncRef5 = useSyncRef(headerContent === null || headerContent === void 0 ? void 0 : headerContent.ref),
      _useSyncRef6 = _slicedToArray(_useSyncRef5, 2),
      componentRefHeaderContent = _useSyncRef6[0],
      headerContentRef = _useSyncRef6[1];

  var _useState = useState(alwaysShowContentHeader ? HEADER_STATES.VISIBLE_PINNED : isIE() ? HEADER_STATES.VISIBLE : HEADER_STATES.AUTO),
      _useState2 = _slicedToArray(_useState, 2),
      headerState = _useState2[0],
      setHeaderState = _useState2[1];

  var classes = useStyles();
  var dynamicPageClasses = clsx(classes.dynamicPage, GlobalStyleClasses.sapScrollBar, classes["background".concat(backgroundDesign)], className, [HEADER_STATES.HIDDEN, HEADER_STATES.HIDDEN_PINNED].includes(headerState) && classes.headerCollapsed); // observe heights of header parts

  var _useObserveHeights = useObserveHeights(dynamicPageRef, topHeaderRef, headerContentRef, anchorBarRef, {
    noHeader: false
  }),
      topHeaderHeight = _useObserveHeights.topHeaderHeight,
      headerContentHeight = _useObserveHeights.headerContentHeight;

  var _useState3 = useState(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isOverflowing = _useState4[0],
      setIsOverflowing = _useState4[1];

  useEffect(function () {
    var observer = new IntersectionObserver(debounce(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
          element = _ref2[0];

      setIsOverflowing(!element.isIntersecting);
    }, 250), {
      root: dynamicPageRef.current,
      threshold: 0.98,
      rootMargin: '0px 0px -60px 0px' // negative bottom margin for footer height

    });

    if (contentRef.current) {
      observer.observe(contentRef.current);
    }

    return function () {
      observer.disconnect();
    };
  }, []);
  useEffect(function () {
    var oneTimeScrollHandler = function oneTimeScrollHandler() {
      if (!isIE()) {
        setHeaderState(HEADER_STATES.AUTO);
      }
    };

    if (headerState === HEADER_STATES.VISIBLE || headerState === HEADER_STATES.HIDDEN) {
      var _dynamicPageRef$curre;

      (_dynamicPageRef$curre = dynamicPageRef.current) === null || _dynamicPageRef$curre === void 0 ? void 0 : _dynamicPageRef$curre.addEventListener('scroll', oneTimeScrollHandler, {
        once: true
      });
    }

    return function () {
      var _dynamicPageRef$curre2;

      (_dynamicPageRef$curre2 = dynamicPageRef.current) === null || _dynamicPageRef$curre2 === void 0 ? void 0 : _dynamicPageRef$curre2.removeEventListener('scroll', oneTimeScrollHandler);
    };
  }, [dynamicPageRef, headerState]);

  var onToggleHeaderContentVisibility = function onToggleHeaderContentVisibility(e) {
    var shouldHideHeader = !e.detail.visible;
    setHeaderState(function (oldState) {
      if (oldState === HEADER_STATES.VISIBLE_PINNED || oldState === HEADER_STATES.HIDDEN_PINNED) {
        return shouldHideHeader ? HEADER_STATES.HIDDEN_PINNED : HEADER_STATES.VISIBLE_PINNED;
      }

      return shouldHideHeader ? HEADER_STATES.HIDDEN : HEADER_STATES.VISIBLE;
    });
  };

  var onHoverToggleButton = function onHoverToggleButton(e) {
    // TODO background color should be sapObjectHeader_Hover_Background (same color as sapTile_Active_Background)
    topHeaderRef.current.style.backgroundColor = (e === null || e === void 0 ? void 0 : e.type) === 'mouseover' ? ThemingParameters.sapTile_Active_Background : null;
  };

  var onToggleHeaderContent = function onToggleHeaderContent(e) {
    onToggleHeaderContentVisibility(enrichEventWithDetails(e, {
      visible: !headerContentHeight
    }));
  };

  var handleHeaderPinnedChange = function handleHeaderPinnedChange(headerWillPin) {
    if (headerWillPin) {
      setHeaderState(HEADER_STATES.VISIBLE_PINNED);
    } else {
      setHeaderState(HEADER_STATES.VISIBLE);
    }
  };

  useEffect(function () {
    if (alwaysShowContentHeader) {
      setHeaderState(HEADER_STATES.VISIBLE_PINNED);
    } else if (!isIE()) {
      setHeaderState(HEADER_STATES.AUTO);
    }
  }, [alwaysShowContentHeader, setHeaderState]);
  var anchorBarClasses = clsx(classes.anchorBar, isIE() && classes.iEClass);
  var responsivePaddingClass = useResponsiveContentPadding(dynamicPageRef.current);

  var onDynamicPageScroll = function onDynamicPageScroll(e) {
    if (typeof (props === null || props === void 0 ? void 0 : props.onScroll) === 'function') {
      props.onScroll(e);
    }

    if (headerState === HEADER_STATES.HIDDEN_PINNED && e.target.scrollTop === 0) {
      setHeaderState(HEADER_STATES.VISIBLE_PINNED);
    }
  };

  return /*#__PURE__*/React.createElement("div", _extends({
    ref: componentRef,
    title: tooltip,
    className: dynamicPageClasses,
    style: style,
    onScroll: onDynamicPageScroll
  }, propsWithoutOmitted), headerTitle && /*#__PURE__*/cloneElement(headerTitle, {
    'data-not-clickable': alwaysShowContentHeader && !headerContentPinnable || !headerContent || !showHideHeaderButton && !headerContentPinnable,
    ref: componentRefTopHeader,
    className: headerTitle !== null && headerTitle !== void 0 && (_headerTitle$props = headerTitle.props) !== null && _headerTitle$props !== void 0 && _headerTitle$props.className ? "".concat(responsivePaddingClass, " ").concat(headerTitle.props.className) : responsivePaddingClass,
    onToggleHeaderContentVisibility: onToggleHeaderContent
  }), headerContent && /*#__PURE__*/cloneElement(headerContent, {
    ref: componentRefHeaderContent,
    className: headerContent.props.className ? "".concat(responsivePaddingClass, " ").concat(headerContent.props.className) : responsivePaddingClass,
    headerPinned: headerState === HEADER_STATES.VISIBLE_PINNED || headerState === HEADER_STATES.VISIBLE,
    topHeaderHeight: topHeaderHeight
  }), /*#__PURE__*/React.createElement(FlexBox, {
    "data-component-name": "DynamicPageAnchorBar",
    className: anchorBarClasses,
    ref: anchorBarRef,
    style: {
      top: headerState === HEADER_STATES.VISIBLE_PINNED || headerState === HEADER_STATES.VISIBLE ? ((_headerContentRef$cur = headerContentRef === null || headerContentRef === void 0 ? void 0 : (_headerContentRef$cur2 = headerContentRef.current) === null || _headerContentRef$cur2 === void 0 ? void 0 : _headerContentRef$cur2.offsetHeight) !== null && _headerContentRef$cur !== void 0 ? _headerContentRef$cur : 0) + topHeaderHeight : topHeaderHeight
    }
  }, /*#__PURE__*/React.createElement(DynamicPageAnchorBar, {
    headerContentPinnable: headerContentPinnable,
    showHideHeaderButton: showHideHeaderButton,
    headerContentVisible: !!headerContentHeight,
    onToggleHeaderContentVisibility: onToggleHeaderContentVisibility,
    setHeaderPinned: handleHeaderPinnedChange,
    headerPinned: headerState === HEADER_STATES.VISIBLE_PINNED || headerState === HEADER_STATES.HIDDEN_PINNED,
    onHoverToggleButton: onHoverToggleButton,
    a11yConfig: a11yConfig
  })), isIE() && /*#__PURE__*/React.createElement("div", {
    className: classes.iEBackgroundElement,
    style: {
      height: "".concat(headerContentHeight + topHeaderHeight, "px"),
      width: "calc(100% - ".concat((dynamicPageRef === null || dynamicPageRef === void 0 ? void 0 : (_dynamicPageRef$curre3 = dynamicPageRef.current) === null || _dynamicPageRef$curre3 === void 0 ? void 0 : _dynamicPageRef$curre3.clientHeight) < (dynamicPageRef === null || dynamicPageRef === void 0 ? void 0 : (_dynamicPageRef$curre4 = dynamicPageRef.current) === null || _dynamicPageRef$curre4 === void 0 ? void 0 : _dynamicPageRef$curre4.scrollHeight) ? '18px' : '0px', ")")
    }
  }), /*#__PURE__*/React.createElement("div", {
    ref: contentRef,
    "data-component-name": "DynamicPageContent",
    className: "".concat(classes.contentContainer, " ").concat(responsivePaddingClass),
    style: {
      marginTop: isIE() ? "".concat(headerContentHeight + topHeaderHeight + 34, "px") : 0,
      paddingBottom: footer ? '1rem' : 0
    }
  }, children), footer && /*#__PURE__*/React.createElement("footer", {
    className: classes.footer,
    style: {
      position: isOverflowing ? 'sticky' : 'absolute'
    },
    "data-component-name": "DynamicPageFooter"
  }, footer));
});
DynamicPage.displayName = 'DynamicPage';
DynamicPage.defaultProps = {
  backgroundDesign: PageBackgroundDesign.Solid,
  showHideHeaderButton: true,
  headerContentPinnable: true,
  alwaysShowContentHeader: false
};

export { DynamicPage };
//# sourceMappingURL=DynamicPage.js.map
