import _extends from '@babel/runtime/helpers/extends';
import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import { getEffectiveScopingSuffixForTag } from '@ui5/webcomponents-base/dist/CustomElementsScope.js';
import { deprecationNotice } from '@ui5/webcomponents-react-base/dist/Utils';
import { useSyncRef } from '@ui5/webcomponents-react-base/dist/hooks';
import React, { forwardRef, useRef, useEffect, Children, cloneElement } from 'react';

var _excluded = ["className", "tooltip", "children"];

var capitalizeFirstLetter = function capitalizeFirstLetter(s) {
  return s.charAt(0).toUpperCase() + s.slice(1);
};

var camelToKebabCase = function camelToKebabCase(s) {
  return s.replace(/([A-Z])/g, function (a, b) {
    return "-".concat(b.toLowerCase());
  });
};

var kebabToCamelCase = function kebabToCamelCase(str) {
  return str.replace(/([-_]\w)/g, function (g) {
    return g[1].toUpperCase();
  });
};

var createEventPropName = function createEventPropName(eventName) {
  return "on".concat(capitalizeFirstLetter(kebabToCamelCase(eventName)));
};

var withWebComponent = function withWebComponent(tagName, regularProperties, booleanProperties, slotProperties, eventProperties) {
  var WithWebComponent = /*#__PURE__*/forwardRef(function (props, wcRef) {
    var className = props.className,
        tooltip = props.tooltip,
        children = props.children,
        rest = _objectWithoutProperties(props, _excluded); //@ts-ignore


    var _useSyncRef = useSyncRef(wcRef),
        _useSyncRef2 = _slicedToArray(_useSyncRef, 2),
        componentRef = _useSyncRef2[0],
        ref = _useSyncRef2[1];

    var eventRegistry = useRef({}); // regular props (no booleans, no slots and no events)

    var regularProps = regularProperties.reduce(function (acc, name) {
      if (rest.hasOwnProperty(name)) {
        return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, camelToKebabCase(name), rest[name]));
      }

      return acc;
    }, {}); // boolean properties - only attach if they are truthy

    var booleanProps = booleanProperties.reduce(function (acc, name) {
      if (rest[name] === true || rest[name] === 'true') {
        return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, camelToKebabCase(name), true));
      }

      return acc;
    }, {});
    var slots = slotProperties.reduce(function (acc, name) {
      var slotValue = rest[name];
      if (!slotValue) return acc;
      var slottedChildren = [];
      var index = 0;

      var removeFragments = function removeFragments(element) {
        if (!element) return;

        if (element.type === React.Fragment) {
          var _element$props;

          Children.toArray((_element$props = element.props) === null || _element$props === void 0 ? void 0 : _element$props.children).filter(Boolean).forEach(function (item) {
            removeFragments(item);
          });
        } else {
          slottedChildren.push( /*#__PURE__*/cloneElement(element, {
            key: "".concat(name, "-").concat(index),
            slot: name
          }));
          index++;
        }
      };

      if (Array.isArray(slotValue)) {
        slotValue.forEach(function (item) {
          removeFragments(item);
        });
      } else {
        removeFragments(slotValue);
      }

      return [].concat(_toConsumableArray(acc), slottedChildren);
    }, []); // event binding

    useEffect(function () {
      eventProperties.forEach(function (eventName) {
        var eventHandler = rest[createEventPropName(eventName)];

        if (typeof eventHandler === 'function') {
          eventRegistry.current[eventName] = eventHandler;
          ref.current.addEventListener(eventName, eventRegistry.current[eventName]);
        }
      });
      return function () {
        // eslint-disable-next-line guard-for-in
        for (var eventName in eventRegistry.current) {
          var _ref$current;

          (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.removeEventListener(eventName, eventRegistry.current[eventName]);
        }
      };
    }, eventProperties.map(function (eventName) {
      return rest[createEventPropName(eventName)];
    })); // non web component related props, just pass them

    var nonWebComponentRelatedProps = Object.entries(rest).filter(function (_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
          key = _ref2[0];

      return !regularProperties.includes(key);
    }).filter(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 1),
          key = _ref4[0];

      return !slotProperties.includes(key);
    }).filter(function (_ref5) {
      var _ref6 = _slicedToArray(_ref5, 1),
          key = _ref6[0];

      return !booleanProperties.includes(key);
    }).filter(function (_ref7) {
      var _ref8 = _slicedToArray(_ref7, 1),
          key = _ref8[0];

      return !eventProperties.map(function (eventName) {
        return createEventPropName(eventName);
      }).includes(key);
    }).reduce(function (acc, _ref9) {
      var _ref10 = _slicedToArray(_ref9, 2),
          key = _ref10[0],
          val = _ref10[1];

      return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, val));
    }, {});
    var tagNameSuffix = getEffectiveScopingSuffixForTag(tagName);
    var Component = tagNameSuffix ? "".concat(tagName, "-").concat(tagNameSuffix) : tagName;
    useEffect(function () {
      if (tooltip) {
        // strip ui5 prefix and convert to PascalCase
        var componentName = tagName.substring(3).replace(/(^\w|-\w)/g, function (text) {
          return text.replace(/-/, '').toUpperCase();
        });
        deprecationNotice(componentName, '`tooltip` has been deprecated, please use the native `title` attribute instead.');
      }
    }, [tooltip]);
    return /*#__PURE__*/React.createElement(Component, _extends({
      ref: componentRef,
      title: tooltip
    }, booleanProps, regularProps, nonWebComponentRelatedProps, {
      class: className
    }), slots, children);
  });
  return WithWebComponent;
};

export { withWebComponent };
//# sourceMappingURL=withWebComponent.js.map
