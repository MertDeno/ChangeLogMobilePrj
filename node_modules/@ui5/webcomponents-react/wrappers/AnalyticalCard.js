import _extends from '@babel/runtime/helpers/extends';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import { createUseStyles } from 'react-jss';
import React, { useEffect, forwardRef } from 'react';
import clsx from 'clsx';
import { deprecationNotice } from '@ui5/webcomponents-react-base/dist/Utils';
import { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';
import * as spacing from '@ui5/webcomponents-react-base/dist/spacing';

var useDeprecationNoticeForTooltip = function useDeprecationNoticeForTooltip(component, tooltip) {
  useEffect(function () {
    if (tooltip) {
      deprecationNotice(component, '`tooltip` has been deprecated, please use the native `title` attribute instead.');
    }
  }, [tooltip]);
};

var styles = {
  card: {
    backgroundColor: ThemingParameters.sapTile_Background,
    border: "0.0625rem solid ".concat(ThemingParameters.sapTile_BorderColor),
    boxShadow: ThemingParameters.sapContent_Shadow0,
    borderRadius: ThemingParameters.sapElement_BorderCornerRadius,
    textAlign: 'start',
    overflow: 'hidden',
    position: 'relative',
    fontFamily: ThemingParameters.sapFontFamily,
    boxSizing: 'border-box',
    width: '20rem'
  },
  content: spacing.sapUiContentPadding
};
var styles$1 = styles;

var _excluded = ["children", "style", "className", "tooltip", "header"];
var useStyles = createUseStyles(styles$1, {
  name: 'AnalyticalCard'
});
/**
 * The `AnalyticalCard` is mainly used for data visualization. It consists of two areas â€“ a header area and a chart area with a visual representation of the data.<br />
 */

var AnalyticalCard = /*#__PURE__*/forwardRef(function (props, ref) {
  var children = props.children,
      style = props.style,
      className = props.className,
      tooltip = props.tooltip,
      header = props.header,
      rest = _objectWithoutProperties(props, _excluded);

  useDeprecationNoticeForTooltip('AnalyticalCard', props.tooltip);
  var classes = useStyles();
  var classNameString = clsx(classes.card, className);
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: classNameString,
    style: style,
    title: tooltip
  }, rest), header, /*#__PURE__*/React.createElement("div", {
    className: classes.content
  }, children));
});
AnalyticalCard.displayName = 'AnalyticalCard';

export { AnalyticalCard };
//# sourceMappingURL=AnalyticalCard.js.map
