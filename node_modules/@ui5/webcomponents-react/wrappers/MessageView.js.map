{"version":3,"file":"MessageView.js","sources":["../src/internal/useDeprecationNotiveForTooltip.ts","../src/enums/ValueState.ts","../src/components/MessageView/utils.ts","../src/components/MessageView/index.tsx"],"sourcesContent":["import { deprecationNotice } from '@ui5/webcomponents-react-base/dist/Utils';\nimport { useEffect } from 'react';\n\nexport const useDeprecationNoticeForTooltip = (component, tooltip) => {\n  useEffect(() => {\n    if (tooltip) {\n      deprecationNotice(component, '`tooltip` has been deprecated, please use the native `title` attribute instead.');\n    }\n  }, [tooltip]);\n};\n","export enum ValueState {\n  Error = 'Error',\n  None = 'None',\n  Success = 'Success',\n  Warning = 'Warning',\n  Information = 'Information'\n}\n","import { ValueState } from '../../enums/ValueState';\n\nexport const getIconNameForType = (type: ValueState | keyof typeof ValueState): string => {\n  switch (type) {\n    case ValueState.Error:\n    case 'Error':\n      return 'error';\n    case ValueState.Success:\n    case 'Success':\n      return 'sys-enter-2';\n    case ValueState.Warning:\n    case 'Warning':\n      return 'alert';\n    default:\n      return 'information';\n  }\n};\n","import '@ui5/webcomponents-icons/dist/alert.js';\nimport '@ui5/webcomponents-icons/dist/error.js';\nimport '@ui5/webcomponents-icons/dist/information.js';\nimport '@ui5/webcomponents-icons/dist/slim-arrow-left.js';\nimport '@ui5/webcomponents-icons/dist/sys-enter-2.js';\nimport { useI18nBundle, useSyncRef } from '@ui5/webcomponents-react-base/dist/hooks';\nimport { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';\nimport { ALL } from '@ui5/webcomponents-react/dist/assets/i18n/i18n-defaults';\nimport { Bar } from '@ui5/webcomponents-react/dist/Bar';\nimport { Button } from '@ui5/webcomponents-react/dist/Button';\nimport { ButtonDesign } from '@ui5/webcomponents-react/dist/ButtonDesign';\nimport { FlexBox } from '@ui5/webcomponents-react/dist/FlexBox';\nimport { FlexBoxDirection } from '@ui5/webcomponents-react/dist/FlexBoxDirection';\nimport { GroupHeaderListItem } from '@ui5/webcomponents-react/dist/GroupHeaderListItem';\nimport { Icon } from '@ui5/webcomponents-react/dist/Icon';\nimport { List } from '@ui5/webcomponents-react/dist/List';\nimport { MessageViewContext } from '@ui5/webcomponents-react/dist/MessageViewContext';\nimport { SegmentedButton } from '@ui5/webcomponents-react/dist/SegmentedButton';\nimport { SegmentedButtonItem } from '@ui5/webcomponents-react/dist/SegmentedButtonItem';\nimport { Title } from '@ui5/webcomponents-react/dist/Title';\nimport { TitleLevel } from '@ui5/webcomponents-react/dist/TitleLevel';\nimport { ValueState } from '@ui5/webcomponents-react/dist/ValueState';\nimport { CommonProps } from '@ui5/webcomponents-react/interfaces/CommonProps';\nimport { Ui5CustomEvent } from '@ui5/webcomponents-react/interfaces/Ui5CustomEvent';\nimport clsx from 'clsx';\nimport React, {\n  Children,\n  forwardRef,\n  Fragment,\n  ReactElement,\n  ReactNode,\n  Ref,\n  useCallback,\n  useEffect,\n  useState\n} from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { useDeprecationNoticeForTooltip } from '../../internal/useDeprecationNotiveForTooltip';\nimport type { MessageItemPropTypes } from './MessageItem';\nimport { getIconNameForType } from './utils';\n\nexport interface MessageViewDomRef extends HTMLDivElement {\n  /**\n   * Navigates back to the list page\n   */\n  navigateBack: () => void;\n}\n\nexport interface MessageViewPropTypes extends CommonProps {\n  /**\n   * Defines whether the messages are grouped or not.\n   */\n  groupItems?: boolean;\n\n  /**\n   * Defines whether the header of details page will be shown.\n   */\n  showDetailsPageHeader?: boolean;\n\n  /**\n   * A list with message items. If only one item is provided, the initial page will be the details page for the item.\n   *\n   * * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use `Message` in order to preserve the intended design.\n   */\n  children: ReactNode | ReactNode[];\n\n  /**\n   * Event is fired when the details of a message are shown\n   */\n  onItemSelect?: (event: Ui5CustomEvent<HTMLElement, { item: ReactNode }>) => void;\n}\n\nexport const resolveMessageTypes = (children: ReactElement<MessageItemPropTypes>[]) => {\n  return (children ?? [])\n    .map((message) => message?.props?.type)\n    .reduce(\n      (acc, type) => {\n        const finalType = type === ValueState.None ? ValueState.Information : type;\n        if (acc.hasOwnProperty(finalType)) {\n          acc[finalType]++;\n        }\n        return acc;\n      },\n      {\n        [ValueState.Error]: 0,\n        [ValueState.Warning]: 0,\n        [ValueState.Success]: 0,\n        [ValueState.Information]: 0\n      }\n    );\n};\n\nexport const resolveMessageGroups = (children: ReactElement<MessageItemPropTypes>[]) => {\n  const groups = (children ?? []).reduce((acc, val) => {\n    const groupName = val?.props?.groupName ?? '';\n    if (acc.hasOwnProperty(groupName)) {\n      acc[groupName].push(val);\n    } else {\n      acc[groupName] = [val];\n    }\n    return acc;\n  }, {});\n\n  return Object.entries<ReactElement<MessageItemPropTypes>[]>(groups).sort((a, b) => {\n    return a[0].localeCompare(b[0]);\n  });\n};\n\nconst useStyles = createUseStyles(\n  {\n    container: {\n      width: '100%',\n      overflow: 'hidden',\n      display: 'flex',\n      height: 500,\n      '& > *': {\n        width: '100%',\n        flexShrink: 0,\n        transition: 'transform 200ms ease-in-out'\n      }\n    },\n    showDetails: {\n      '& > *': {\n        transform: 'translateX(-100%)'\n      }\n    },\n    button: {\n      '&[data-key=\"Error\"]:not([pressed])': { color: ThemingParameters.sapNegativeElementColor },\n      '&[data-key=\"Warning\"]:not([pressed])': { color: ThemingParameters.sapCriticalElementColor },\n      '&[data-key=\"Success\"]:not([pressed])': { color: ThemingParameters.sapPositiveElementColor },\n      '&[data-key=\"Information\"]:not([pressed])': { color: ThemingParameters.sapNeutralElementColor }\n    },\n    detailsContainer: {\n      padding: '1rem'\n    },\n    detailsIcon: {\n      flexShrink: 0,\n      margin: '0 1rem 0 0.5rem',\n      '&[data-type=\"Error\"]': { color: ThemingParameters.sapNegativeElementColor },\n      '&[data-type=\"Warning\"]': { color: ThemingParameters.sapCriticalElementColor },\n      '&[data-type=\"Success\"]': { color: ThemingParameters.sapPositiveElementColor },\n      '&[data-type=\"Information\"]': { color: ThemingParameters.sapNeutralElementColor }\n    },\n    detailsTitle: {\n      marginBottom: '1rem'\n    },\n    detailsText: {\n      fontFamily: ThemingParameters.sapFontFamily,\n      fontSize: ThemingParameters.sapFontSize,\n      lineHeight: 1.4,\n      color: ThemingParameters.sapTextColor,\n      marginBottom: '1rem'\n    }\n  },\n  { name: 'MessageView' }\n);\n\nconst MessageView = forwardRef((props: MessageViewPropTypes, ref: Ref<MessageViewDomRef>) => {\n  const { children, groupItems, showDetailsPageHeader, className, onItemSelect, tooltip, ...rest } = props;\n\n  useDeprecationNoticeForTooltip('MessageView', props.tooltip);\n\n  const [componentRef, internalRef] = useSyncRef<MessageViewDomRef>(ref);\n\n  const classes = useStyles();\n  const i18nBundle = useI18nBundle('@ui5/webcomponents-react');\n\n  const [listFilter, setListFilter] = useState('All');\n  const [selectedMessage, setSelectedMessage] = useState<MessageItemPropTypes>(null);\n\n  const childrenArray = Children.toArray(children);\n  const messageTypes = resolveMessageTypes(childrenArray as ReactElement<MessageItemPropTypes>[]);\n  const filledTypes = Object.values(messageTypes).filter((count) => count > 0).length;\n\n  const filteredChildren =\n    listFilter === 'All'\n      ? childrenArray\n      : childrenArray.filter((message: ReactElement<MessageItemPropTypes>) => {\n          if (listFilter === ValueState.Information) {\n            return message?.props?.type === ValueState.Information || message?.props?.type === ValueState.None;\n          }\n          return message?.props?.type === listFilter;\n        });\n\n  const groupedMessages = resolveMessageGroups(filteredChildren as ReactElement<MessageItemPropTypes>[]);\n\n  const navigateBack = useCallback(() => {\n    setSelectedMessage(null);\n  }, [setSelectedMessage]);\n\n  useEffect(() => {\n    if (internalRef.current) {\n      internalRef.current.navigateBack = navigateBack;\n    }\n  }, [internalRef.current, navigateBack]);\n\n  const handleListFilterChange = (e) => {\n    setListFilter(e.detail.selectedItem.dataset.key);\n  };\n\n  const outerClasses = clsx(classes.container, className, selectedMessage && classes.showDetails);\n\n  return (\n    <div ref={componentRef} title={tooltip} {...rest} className={outerClasses}>\n      <MessageViewContext.Provider\n        value={{\n          selectMessage: setSelectedMessage\n        }}\n      >\n        <div>\n          {filledTypes > 1 && (\n            <Bar\n              startContent={\n                <SegmentedButton onSelectionChange={handleListFilterChange}>\n                  <SegmentedButtonItem data-key=\"All\" pressed={listFilter === 'All'}>\n                    {i18nBundle.getText(ALL)}\n                  </SegmentedButtonItem>\n                  {Object.entries(messageTypes).map(([valueState, count]: [ValueState, number]) => {\n                    if (count === 0) {\n                      return null;\n                    }\n                    return (\n                      <SegmentedButtonItem\n                        key={valueState}\n                        data-key={valueState}\n                        pressed={listFilter === valueState}\n                        icon={getIconNameForType(valueState)}\n                        className={classes.button}\n                      >\n                        {count}\n                      </SegmentedButtonItem>\n                    );\n                  })}\n                </SegmentedButton>\n              }\n            />\n          )}\n          <List onItemClick={onItemSelect}>\n            {groupItems\n              ? groupedMessages.map(([groupName, items]) => {\n                  return (\n                    <Fragment key={groupName}>\n                      {groupName && <GroupHeaderListItem>{groupName}</GroupHeaderListItem>}\n                      {items}\n                    </Fragment>\n                  );\n                })\n              : filteredChildren}\n          </List>\n        </div>\n        <div>\n          {showDetailsPageHeader && (\n            <Bar\n              startContent={<Button design={ButtonDesign.Transparent} icon=\"slim-arrow-left\" onClick={navigateBack} />}\n            />\n          )}\n          {selectedMessage && (\n            <FlexBox className={classes.detailsContainer}>\n              <Icon\n                data-type={selectedMessage.type}\n                name={getIconNameForType(selectedMessage.type)}\n                className={classes.detailsIcon}\n              />\n              <FlexBox direction={FlexBoxDirection.Column}>\n                <Title level={TitleLevel.H5} className={classes.detailsTitle}>\n                  {selectedMessage.titleText}\n                </Title>\n                <div className={classes.detailsText}>{selectedMessage.children}</div>\n              </FlexBox>\n            </FlexBox>\n          )}\n        </div>\n      </MessageViewContext.Provider>\n    </div>\n  );\n});\n\nMessageView.displayName = 'MessageView';\n\nMessageView.defaultProps = {\n  showDetailsPageHeader: false,\n  groupItems: false\n};\n\nexport { MessageView };\n"],"names":["useDeprecationNoticeForTooltip","component","tooltip","useEffect","deprecationNotice","ValueState","getIconNameForType","type","Error","Success","Warning","resolveMessageTypes","children","map","message","props","reduce","acc","finalType","None","Information","hasOwnProperty","resolveMessageGroups","groups","val","groupName","push","Object","entries","sort","a","b","localeCompare","useStyles","createUseStyles","container","width","overflow","display","height","flexShrink","transition","showDetails","transform","button","color","ThemingParameters","sapNegativeElementColor","sapCriticalElementColor","sapPositiveElementColor","sapNeutralElementColor","detailsContainer","padding","detailsIcon","margin","detailsTitle","marginBottom","detailsText","fontFamily","sapFontFamily","fontSize","sapFontSize","lineHeight","sapTextColor","name","MessageView","forwardRef","ref","groupItems","showDetailsPageHeader","className","onItemSelect","rest","useSyncRef","componentRef","internalRef","classes","i18nBundle","useI18nBundle","useState","listFilter","setListFilter","selectedMessage","setSelectedMessage","childrenArray","Children","toArray","messageTypes","filledTypes","values","filter","count","length","filteredChildren","groupedMessages","navigateBack","useCallback","current","handleListFilterChange","e","detail","selectedItem","dataset","key","outerClasses","clsx","selectMessage","getText","ALL","valueState","items","ButtonDesign","Transparent","FlexBoxDirection","Column","TitleLevel","H5","titleText","displayName","defaultProps"],"mappings":"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"}