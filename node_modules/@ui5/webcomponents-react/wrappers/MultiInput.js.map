{"version":3,"file":"MultiInput.js","sources":["../src/webComponents/MultiInput/index.tsx"],"sourcesContent":["import { InputType } from '@ui5/webcomponents-react/dist/InputType';\nimport { ValueState } from '@ui5/webcomponents-react/dist/ValueState';\nimport { withWebComponent } from '@ui5/webcomponents-react/dist/withWebComponent';\nimport { CommonProps } from '@ui5/webcomponents-react/interfaces/CommonProps';\nimport { Ui5CustomEvent } from '@ui5/webcomponents-react/interfaces/Ui5CustomEvent';\nimport { Ui5DomRef } from '@ui5/webcomponents-react/interfaces/Ui5DomRef';\nimport { ReactNode } from 'react';\n\nimport '@ui5/webcomponents/dist/MultiInput.js';\n\ninterface MultiInputAttributes {\n  /**\n   * Determines whether a value help icon will be visualized in the end of the input. Pressing the icon will fire `value-help-trigger` event.\n   */\n  showValueHelpIcon?: boolean;\n  /**\n   * Sets the accessible aria name of the component.\n   */\n  accessibleName?: string;\n  /**\n   * Receives id(or many ids) of the elements that label the input.\n   */\n  accessibleNameRef?: string;\n  /**\n   * Defines whether the component is in disabled state.\n   *\n   * **Note:** A disabled component is completely noninteractive.\n   */\n  disabled?: boolean;\n  /**\n   * Sets the maximum number of characters available in the input field.\n   */\n  maxlength?: number;\n  /**\n   * Determines the name with which the component will be submitted in an HTML form.\n   *\n   * **Important:** For the `name` property to have effect, you must add the following import to your project: `import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n   *\n   * **Note:** When set, a native `input` HTML element will be created inside the component so that it can be submitted as part of an HTML form. Do not use this property unless you need to submit a form.\n   */\n  name?: string;\n  /**\n   * Defines a short hint intended to aid the user with data entry when the component has no value.\n   */\n  placeholder?: string;\n  /**\n   * Defines whether the component is read-only.\n   *\n   * **Note:** A read-only component is not editable, but still provides visual feedback upon user interaction.\n   */\n  readonly?: boolean;\n  /**\n   * Defines whether the component is required.\n   */\n  required?: boolean;\n  /**\n   * Defines whether the component should show suggestions, if such are present.\n   *\n   * **Note:** You need to import the `InputSuggestions` module from `\"@ui5/webcomponents/dist/features/InputSuggestions.js\"` to enable this functionality.\n   */\n  showSuggestions?: boolean;\n  /**\n   * Defines the HTML type of the component. Available options are: `Text`, `Email`, `Number`, `Password`, `Tel`, and `URL`.\n   *\n   * **Notes:**\n   *\n   * *   The particular effect of this property differs depending on the browser and the current language settings, especially for type `Number`.\n   * *   The property is mostly intended to be used with touch devices that use different soft keyboard layouts depending on the given input type.\n   */\n  type?: InputType | keyof typeof InputType;\n  /**\n   * Defines the value of the component.\n   *\n   * **Note:** The property is updated upon typing.\n   */\n  value?: string;\n  /**\n   * Defines the value state of the component.\n   *\n   * Available options are:\n   *\n   * *   `None`\n   * *   `Error`\n   * *   `Warning`\n   * *   `Success`\n   * *   `Information`\n   */\n  valueState?: ValueState | keyof typeof ValueState;\n}\n\nexport interface MultiInputDomRef extends MultiInputAttributes, Ui5DomRef {\n  /**\n   * The suggestion item on preview.\n   */\n  readonly previewItem: ReactNode;\n}\n\nexport interface MultiInputPropTypes extends MultiInputAttributes, Omit<CommonProps, 'onChange' | 'onInput'> {\n  /**\n   * Defines the component tokens.\n   *\n   * __Note:__ When passing a custom React component to this prop, you have to make sure your component reads the `slot` prop and appends it to the most outer element of your component.\n   * Learn more about it [here](https://sap.github.io/ui5-webcomponents-react/?path=/docs/knowledge-base--page#adding-custom-components-to-slots).\n   */\n  tokens?: ReactNode | ReactNode[];\n  /**\n   * Defines the suggestion items.\n   *\n   * Example:\n   *\n   * <pre>\n   *   <code>\n   *    &lt;MultiInput showSuggestions><br />\n   *    &nbsp;&nbsp;&lt;SuggestionItem text=\"Item #1\" /><br />\n   *    &nbsp;&nbsp;&lt;SuggestionItem text=\"Item #2\" /><br />\n   *    &lt;/MultiInput>\n   *  </code>\n   * </pre>\n   *\n   *\n   * **Note:** The suggestions would be displayed only if the `showSuggestions` property is set to `true`.\n   *\n   * **Note:** The `<SuggestionItem>` and `<SuggestionGroupItem>` are recommended to be used as suggestion items.\n   *\n   * **Note:** Importing the Input Suggestions Support feature:\n   * `import \"@ui5/webcomponents/dist/features/InputSuggestions.js\";`\n   * automatically imports the `<SuggestionItem>` and `<SuggestionGroupItem>` for your convenience.\n   */\n  children?: ReactNode | ReactNode[];\n  /**\n   * Defines the icon to be displayed in the component.\n   *\n   * __Note:__ When passing a custom React component to this prop, you have to make sure your component reads the `slot` prop and appends it to the most outer element of your component.\n   * Learn more about it [here](https://sap.github.io/ui5-webcomponents-react/?path=/docs/knowledge-base--page#adding-custom-components-to-slots).\n   */\n  icon?: ReactNode | ReactNode[];\n  /**\n   * Defines the value state message that will be displayed as pop up under the component.\n   *\n   * **Note:** If not specified, a default text (in the respective language) will be displayed.\n   *\n   * **Note:** The `valueStateMessage` would be displayed, when the component is in `Information`, `Warning` or `Error` value state.\n   *\n   * **Note:** If the component has `suggestionItems`, the `valueStateMessage` would be displayed as part of the same popover, if used on desktop, or dialog - on phone.\n   *\n   * __Note:__ When passing a custom React component to this prop, you have to make sure your component reads the `slot` prop and appends it to the most outer element of your component.\n   * Learn more about it [here](https://sap.github.io/ui5-webcomponents-react/?path=/docs/knowledge-base--page#adding-custom-components-to-slots).\n   */\n  valueStateMessage?: ReactNode | ReactNode[];\n  /**\n   * Fired when a token is about to be deleted.\n   */\n  onTokenDelete?: (event: Ui5CustomEvent<HTMLInputElement, { token: ReactNode }>) => void;\n  /**\n   * Fired when the value help icon is pressed and F4 or ALT/OPTION + ARROW\\_UP/ARROW\\_DOWN keyboard keys are used.\n   */\n  onValueHelpTrigger?: (event: Ui5CustomEvent<HTMLInputElement>) => void;\n  /**\n   * Fired when the input operation has finished by pressing Enter or on focusout.\n   */\n  onChange?: (event: Ui5CustomEvent<HTMLInputElement>) => void;\n  /**\n   * Fired when the value of the component changes at each keystroke, and when a suggestion item has been selected.\n   */\n  onInput?: (event: Ui5CustomEvent<HTMLInputElement>) => void;\n  /**\n   * Fired when the user navigates to a suggestion item via the ARROW keys, as a preview, before the final selection.\n   */\n  onSuggestionItemPreview?: (\n    event: Ui5CustomEvent<HTMLInputElement, { item: ReactNode; targetRef: ReactNode }>\n  ) => void;\n  /**\n   * Fired when a suggestion item, that is displayed in the suggestion popup, is selected.\n   */\n  onSuggestionItemSelect?: (event: Ui5CustomEvent<HTMLInputElement, { item: ReactNode }>) => void;\n}\n\n/**\n * ### Overview\n *\n * A `MultiInput` field allows the user to enter multiple values, which are displayed as `Token`. User can choose interaction for creating tokens. Fiori Guidelines say that user should create tokens when:\n *\n * *   Type a value in the input and press enter or focus out the input field (`change` event is fired)\n * *   Select a value from the suggestion list\n * (`suggestion-item-select` event is fired)\n *\n * <ui5-link href=\"https://sap.github.io/ui5-webcomponents/playground/components/MultiInput\" target=\"_blank\">UI5 Web Components Playground</ui5-link>\n */\nconst MultiInput = withWebComponent<MultiInputPropTypes, MultiInputDomRef>(\n  'ui5-multi-input',\n  ['accessibleName', 'accessibleNameRef', 'maxlength', 'name', 'placeholder', 'type', 'value', 'valueState'],\n  ['showValueHelpIcon', 'disabled', 'readonly', 'required', 'showSuggestions'],\n  ['tokens', 'icon', 'valueStateMessage'],\n  ['token-delete', 'value-help-trigger', 'change', 'input', 'suggestion-item-preview', 'suggestion-item-select']\n);\n\nMultiInput.displayName = 'MultiInput';\n\nMultiInput.defaultProps = {\n  type: InputType.Text,\n  valueState: ValueState.None\n};\n\nexport { MultiInput };\n"],"names":["MultiInput","withWebComponent","displayName","defaultProps","type","InputType","Text","valueState","ValueState","None"],"mappings":";;;;AAiLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACMA,UAAU,GAAGC,gBAAgB,CACjC,iBADiC,EAEjC,CAAC,gBAAD,EAAmB,mBAAnB,EAAwC,WAAxC,EAAqD,MAArD,EAA6D,aAA7D,EAA4E,MAA5E,EAAoF,OAApF,EAA6F,YAA7F,CAFiC,EAGjC,CAAC,mBAAD,EAAsB,UAAtB,EAAkC,UAAlC,EAA8C,UAA9C,EAA0D,iBAA1D,CAHiC,EAIjC,CAAC,QAAD,EAAW,MAAX,EAAmB,mBAAnB,CAJiC,EAKjC,CAAC,cAAD,EAAiB,oBAAjB,EAAuC,QAAvC,EAAiD,OAAjD,EAA0D,yBAA1D,EAAqF,wBAArF,CALiC;AAQnCD,UAAU,CAACE,WAAX,GAAyB,YAAzB;AAEAF,UAAU,CAACG,YAAX,GAA0B;AACxBC,EAAAA,IAAI,EAAEC,SAAS,CAACC,IADQ;AAExBC,EAAAA,UAAU,EAAEC,UAAU,CAACC;AAFC,CAA1B;;;;"}