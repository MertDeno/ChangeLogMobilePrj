import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import { FlexBox } from '@ui5/webcomponents-react/dist/FlexBox';
import { FlexBoxAlignItems } from '@ui5/webcomponents-react/dist/FlexBoxAlignItems';
import { FlexBoxDirection } from '@ui5/webcomponents-react/dist/FlexBoxDirection';
import { Label } from '@ui5/webcomponents-react/dist/Label';
import { WrappingType } from '@ui5/webcomponents-react/dist/WrappingType';
import React, { isValidElement, cloneElement } from 'react';
import { createUseStyles } from 'react-jss';
import { addCustomCSS } from '@ui5/webcomponents-base/dist/Theming.js';

//TODO: remove this when ui5-webcomponents adjusted this in their repo
addCustomCSS('ui5-checkbox', "\n:host .ui5-checkbox-icon {\n position:absolute;\n}\n ");
var CENTER_ALIGNED_CHILDREN = new Set(['CheckBox', 'RadioButton', 'Switch', 'RangeSlider', 'Slider']);
var useStyles = createUseStyles({
  label: {
    gridColumnEnd: 'span var(--ui5wcr_form_label_span)',
    justifySelf: 'var(--ui5wcr_form_label_text_align)',
    textAlign: 'var(--ui5wcr_form_label_text_align)'
  },
  content: {
    display: 'flex',
    gridColumnEnd: 'span var(--ui5wcr_form_content_span)'
  }
}, {
  name: 'FormItem'
});

var renderLabel = function renderLabel(label, classes, styles) {
  if (typeof label === 'string') {
    return /*#__PURE__*/React.createElement(Label, {
      className: classes.label,
      style: styles,
      wrappingType: WrappingType.Normal
    }, label ? "".concat(label, ":") : '');
  }

  if ( /*#__PURE__*/isValidElement(label)) {
    var _label$props = label.props,
        showColon = _label$props.showColon,
        wrappingType = _label$props.wrappingType,
        className = _label$props.className,
        style = _label$props.style,
        children = _label$props.children;
    return /*#__PURE__*/cloneElement(label, {
      showColon: showColon !== null && showColon !== void 0 ? showColon : true,
      wrappingType: wrappingType !== null && wrappingType !== void 0 ? wrappingType : WrappingType.Normal,
      className: "".concat(classes.label, " ").concat(className !== null && className !== void 0 ? className : ''),
      style: _objectSpread({
        gridColumnStart: styles.gridColumnStart,
        gridRowStart: styles.gridRowStart
      }, style || {})
    }, children !== null && children !== void 0 ? children : '');
  }

  return null;
};
/**
 * The `FormItem` is only used for calculating the final layout of the `Form`, thus it doesn't accept any other props than `label` and `children`, especially no `className`, `style` or `ref`.
 */


var FormItem = function FormItem(props) {
  var _ref = props,
      label = _ref.label,
      children = _ref.children,
      columnIndex = _ref.columnIndex,
      rowIndex = _ref.rowIndex,
      labelSpan = _ref.labelSpan,
      lastGroupItem = _ref.lastGroupItem;
  var classes = useStyles();
  var gridColumnStart = (columnIndex !== null && columnIndex !== void 0 ? columnIndex : 0) * 12 + 1;
  var gridRowStart = rowIndex !== null && rowIndex !== void 0 ? rowIndex : 0;
  var contentGridColumnStart = columnIndex != null ? labelSpan === 12 ? gridColumnStart : gridColumnStart + (labelSpan !== null && labelSpan !== void 0 ? labelSpan : 0) : undefined;

  if (labelSpan === 12) {
    return /*#__PURE__*/React.createElement(FlexBox, {
      direction: FlexBoxDirection.Column,
      alignItems: FlexBoxAlignItems.Start,
      style: {
        gridColumnStart: gridColumnStart,
        gridRowStart: gridRowStart,
        gridColumnEnd: 'span 12',
        placeItems: 'flex-start'
      }
    }, renderLabel(label, classes, {}), children);
  }

  var inlineLabelStyles = function inlineLabelStyles() {
    var _type;

    var styles = {
      gridColumnStart: gridColumnStart,
      gridRowStart: gridRowStart
    };

    if (CENTER_ALIGNED_CHILDREN.has(children === null || children === void 0 ? void 0 : (_type = children.type) === null || _type === void 0 ? void 0 : _type.displayName)) {
      return _objectSpread(_objectSpread({}, styles), {}, {
        alignSelf: 'center',
        paddingBottom: lastGroupItem ? '1rem' : 0
      });
    }

    return styles;
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, renderLabel(label, classes, inlineLabelStyles()), /*#__PURE__*/React.createElement("div", {
    className: classes.content,
    style: {
      gridColumnStart: contentGridColumnStart,
      gridRowStart: labelSpan === 12 ? gridRowStart + 1 : gridRowStart,
      paddingBottom: lastGroupItem ? '1rem' : 0
    }
  }, children));
};

FormItem.displayName = 'FormItem';

export { FormItem };
//# sourceMappingURL=FormItem.js.map
