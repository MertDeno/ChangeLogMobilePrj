{"version":3,"file":"StepInput.js","sources":["../src/webComponents/StepInput/index.tsx"],"sourcesContent":["import { ValueState } from '@ui5/webcomponents-react/dist/ValueState';\nimport { withWebComponent } from '@ui5/webcomponents-react/dist/withWebComponent';\nimport { CommonProps } from '@ui5/webcomponents-react/interfaces/CommonProps';\nimport { Ui5CustomEvent } from '@ui5/webcomponents-react/interfaces/Ui5CustomEvent';\nimport { Ui5DomRef } from '@ui5/webcomponents-react/interfaces/Ui5DomRef';\nimport { ReactNode } from 'react';\n\nimport '@ui5/webcomponents/dist/StepInput.js';\n\ninterface StepInputAttributes {\n  /**\n   * Sets the accessible aria name of the component.\n   */\n  accessibleName?: string;\n  /**\n   * Receives id(or many ids) of the elements that label the component.\n   */\n  accessibleNameRef?: string;\n  /**\n   * Determines whether the component is displayed as disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Defines a maximum value of the component.\n   */\n  max?: number;\n  /**\n   * Defines a minimum value of the component.\n   */\n  min?: number;\n  /**\n   * Determines the name with which the component will be submitted in an HTML form.\n   *\n   * **Important:** For the `name` property to have effect, you must add the following import to your project: `import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n   *\n   * **Note:** When set, a native `input` HTML element will be created inside the component so that it can be submitted as part of an HTML form. Do not use this property unless you need to submit a form.\n   */\n  name?: string;\n  /**\n   * Defines a short hint, intended to aid the user with data entry when the component has no value.\n   *\n   * **Note:** When no placeholder is set, the format pattern is displayed as a placeholder. Passing an empty string as the value of this property will make the component appear empty - without placeholder or format pattern.\n   */\n  placeholder?: string;\n  /**\n   * Determines whether the component is displayed as read-only.\n   */\n  readonly?: boolean;\n  /**\n   * Defines whether the component is required.\n   */\n  required?: boolean;\n  /**\n   * Defines a step of increasing/decreasing the value of the component.\n   */\n  step?: number;\n  /**\n   * Defines a value of the component.\n   */\n  value?: number;\n  /**\n   * Determines the number of digits after the decimal point of the component.\n   */\n  valuePrecision?: number;\n  /**\n   * Defines the value state of the component.\n   *\n   * Available options are:\n   *\n   * *   `None`\n   * *   `Error`\n   * *   `Warning`\n   * *   `Success`\n   * *   `Information`\n   */\n  valueState?: ValueState | keyof typeof ValueState;\n}\n\nexport interface StepInputDomRef extends StepInputAttributes, Ui5DomRef {}\n\nexport interface StepInputPropTypes extends StepInputAttributes, Omit<CommonProps, 'onChange'> {\n  /**\n   * Defines the value state message that will be displayed as pop up under the component.\n   *\n   * **Note:** If not specified, a default text (in the respective language) will be displayed.\n   * **Note:** The `valueStateMessage` would be displayed, when the component is in `Information`, `Warning` or `Error` value state.\n   *\n   * __Note:__ When passing a custom React component to this prop, you have to make sure your component reads the `slot` prop and appends it to the most outer element of your component.\n   * Learn more about it [here](https://sap.github.io/ui5-webcomponents-react/?path=/docs/knowledge-base--page#adding-custom-components-to-slots).\n   */\n  valueStateMessage?: ReactNode;\n  /**\n   * Fired when the input operation has finished by pressing Enter or on focusout.\n   */\n  onChange?: (event: Ui5CustomEvent<HTMLInputElement>) => void;\n}\n\n/**\n * The `StepInput` consists of an input field and buttons with icons to increase/decrease the value with the predefined step.\n *\n * The user can change the value of the component by pressing the increase/decrease buttons, by typing a number directly, by using the keyboard up/down and page up/down, or by using the mouse scroll wheel. Decimal values are supported.\n *\n * <ui5-link href=\"https://sap.github.io/ui5-webcomponents/playground/components/StepInput\" target=\"_blank\">UI5 Web Components Playground</ui5-link>\n */\nconst StepInput = withWebComponent<StepInputPropTypes, StepInputDomRef>(\n  'ui5-step-input',\n  [\n    'accessibleName',\n    'accessibleNameRef',\n    'max',\n    'min',\n    'name',\n    'placeholder',\n    'step',\n    'value',\n    'valuePrecision',\n    'valueState'\n  ],\n  ['disabled', 'readonly', 'required'],\n  ['valueStateMessage'],\n  ['change']\n);\n\nStepInput.displayName = 'StepInput';\n\nStepInput.defaultProps = {\n  step: 1,\n  value: 0,\n  valuePrecision: 0,\n  valueState: ValueState.None\n};\n\nexport { StepInput };\n"],"names":["StepInput","withWebComponent","displayName","defaultProps","step","value","valuePrecision","valueState","ValueState","None"],"mappings":";;;AAiGA;AACA;AACA;AACA;AACA;AACA;AACA;IACMA,SAAS,GAAGC,gBAAgB,CAChC,gBADgC,EAEhC,CACE,gBADF,EAEE,mBAFF,EAGE,KAHF,EAIE,KAJF,EAKE,MALF,EAME,aANF,EAOE,MAPF,EAQE,OARF,EASE,gBATF,EAUE,YAVF,CAFgC,EAchC,CAAC,UAAD,EAAa,UAAb,EAAyB,UAAzB,CAdgC,EAehC,CAAC,mBAAD,CAfgC,EAgBhC,CAAC,QAAD,CAhBgC;AAmBlCD,SAAS,CAACE,WAAV,GAAwB,WAAxB;AAEAF,SAAS,CAACG,YAAV,GAAyB;AACvBC,EAAAA,IAAI,EAAE,CADiB;AAEvBC,EAAAA,KAAK,EAAE,CAFgB;AAGvBC,EAAAA,cAAc,EAAE,CAHO;AAIvBC,EAAAA,UAAU,EAAEC,UAAU,CAACC;AAJA,CAAzB;;;;"}