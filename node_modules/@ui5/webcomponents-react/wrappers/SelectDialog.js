import _extends from '@babel/runtime/helpers/extends';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import { addCustomCSS } from '@ui5/webcomponents-base/dist/Theming.js';
import '@ui5/webcomponents-icons/dist/decline.js';
import '@ui5/webcomponents-icons/dist/search.js';
import { useI18nBundle, useSyncRef } from '@ui5/webcomponents-react-base/dist/hooks';
import { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';
import { deprecationNotice, enrichEventWithDetails } from '@ui5/webcomponents-react-base/dist/Utils';
import { CANCEL, SELECT, CLEAR, SEARCH, RESET, SELECTED } from '@ui5/webcomponents-react/dist/assets/i18n/i18n-defaults';
import { Bar } from '@ui5/webcomponents-react/dist/Bar';
import { BarDesign } from '@ui5/webcomponents-react/dist/BarDesign';
import { Button } from '@ui5/webcomponents-react/dist/Button';
import { ButtonDesign } from '@ui5/webcomponents-react/dist/ButtonDesign';
import { Dialog } from '@ui5/webcomponents-react/dist/Dialog';
import { Icon } from '@ui5/webcomponents-react/dist/Icon';
import { Input } from '@ui5/webcomponents-react/dist/Input';
import { List } from '@ui5/webcomponents-react/dist/List';
import { ListMode } from '@ui5/webcomponents-react/dist/ListMode';
import { Text } from '@ui5/webcomponents-react/dist/Text';
import { Title } from '@ui5/webcomponents-react/dist/Title';
import { Toolbar } from '@ui5/webcomponents-react/dist/Toolbar';
import { ToolbarDesign } from '@ui5/webcomponents-react/dist/ToolbarDesign';
import clsx from 'clsx';
import React, { useEffect, forwardRef, useState } from 'react';
import { createUseStyles } from 'react-jss';

var useDeprecationNoticeForTooltip = function useDeprecationNoticeForTooltip(component, tooltip) {
  useEffect(function () {
    if (tooltip) {
      deprecationNotice(component, '`tooltip` has been deprecated, please use the native `title` attribute instead.');
    }
  }, [tooltip]);
};

var _excluded = ["children", "className", "confirmButtonText", "growing", "headerText", "headerTextAlignCenter", "listProps", "mode", "numberOfSelectedItems", "rememberSelections", "showClearButton", "onAfterClose", "onClear", "onConfirm", "onLoadMore", "onSearch", "onSearchInput", "onSearchReset", "onBeforeOpen"];
var useStyles = createUseStyles({
  dialog: {
    '--_ui5_popup_content_padding': 0
  },
  spread: {
    width: '100%'
  },
  noShadow: {
    boxShadow: 'none'
  },
  inputIcon: {
    cursor: 'pointer',
    color: ThemingParameters.sapContent_IconColor
  },
  infoBar: {
    padding: '0 0.5rem',
    position: 'sticky',
    top: 0,
    zIndex: 1
  }
}, {
  name: 'SelectDialog'
}); // necessary for draggable dialog

addCustomCSS('ui5-dialog', "\n:host([data-component-name=\"SelectDialog\"]) .ui5-popup-header-root {\n  flex-direction: column;\n}\n ");
addCustomCSS('ui5-bar', "\n:host([data-component-name=\"SelectDialogSubHeader\"]) .ui5-bar-midcontent-container {\n  width: 100%;\n}\n\n:host([data-component-name=\"SelectDialogSubHeader\"]) .ui5-bar-startcontent-container {\n  display: none;\n}\n\n:host([data-component-name=\"SelectDialogSubHeader\"]) .ui5-bar-endcontent-container {\n  display: none;\n}\n ");

/**
 * The SelectDialog enables users to filter a comprehensive list via a search field and to select one or more items.
 */
var SelectDialog = /*#__PURE__*/forwardRef(function (props, ref) {
  var children = props.children,
      className = props.className,
      confirmButtonText = props.confirmButtonText,
      growing = props.growing,
      headerText = props.headerText,
      headerTextAlignCenter = props.headerTextAlignCenter,
      listProps = props.listProps,
      mode = props.mode,
      numberOfSelectedItems = props.numberOfSelectedItems,
      rememberSelections = props.rememberSelections,
      showClearButton = props.showClearButton,
      onAfterClose = props.onAfterClose,
      onClear = props.onClear,
      onConfirm = props.onConfirm,
      onLoadMore = props.onLoadMore,
      onSearch = props.onSearch,
      onSearchInput = props.onSearchInput,
      onSearchReset = props.onSearchReset,
      onBeforeOpen = props.onBeforeOpen,
      rest = _objectWithoutProperties(props, _excluded);

  useDeprecationNoticeForTooltip('SelectDialog', props.tooltip);
  var classes = useStyles();
  var i18nBundle = useI18nBundle('@ui5/webcomponents-react');

  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      searchValue = _useState2[0],
      setSearchValue = _useState2[1];

  var _useState3 = useState([]),
      _useState4 = _slicedToArray(_useState3, 2),
      selectedItems = _useState4[0],
      setSelectedItems = _useState4[1];

  var _useState5 = useState(true),
      _useState6 = _slicedToArray(_useState5, 2),
      listMounted = _useState6[0],
      setListMounted = _useState6[1];

  var _useSyncRef = useSyncRef(ref),
      _useSyncRef2 = _slicedToArray(_useSyncRef, 2),
      componentRef = _useSyncRef2[0],
      selectDialogRef = _useSyncRef2[1];

  var _useSyncRef3 = useSyncRef(listProps.ref),
      _useSyncRef4 = _slicedToArray(_useSyncRef3, 2),
      listComponentRef = _useSyncRef4[0],
      listRef = _useSyncRef4[1];

  var handleBeforeOpen = function handleBeforeOpen(e) {
    var _listRef$current;

    if (typeof onBeforeOpen === 'function') {
      onBeforeOpen(e);
    }

    if (mode === ListMode.MultiSelect && (_listRef$current = listRef.current) !== null && _listRef$current !== void 0 && _listRef$current.items) {
      setSelectedItems(listRef.current.items.filter(function (el) {
        return el.selected;
      }));
    }
  };

  var handleSearchInput = function handleSearchInput(e) {
    if (typeof onSearchInput === 'function') {
      onSearchInput(enrichEventWithDetails(e, {
        value: e.target.value
      }));
    }

    setSearchValue(e.target.value);
  };

  var handleSearchSubmit = function handleSearchSubmit(e) {
    if (typeof onSearch === 'function') {
      if (e.type === 'keyup' && e.code === 'Enter') {
        onSearch(enrichEventWithDetails(e, {
          value: e.target.value
        }));
      }

      if (e.type === 'click') {
        onSearch(enrichEventWithDetails(e, {
          value: searchValue
        }));
      }
    }
  };

  var handleResetSearch = function handleResetSearch(e) {
    if (typeof onSearchReset === 'function') {
      onSearchReset(enrichEventWithDetails(e, {
        prevValue: searchValue
      }));
    }

    setSearchValue('');
  };

  var handleSelectionChange = function handleSelectionChange(e) {
    if (typeof (listProps === null || listProps === void 0 ? void 0 : listProps.onSelectionChange) === 'function') {
      listProps.onSelectionChange(e);
    }

    if (mode === ListMode.MultiSelect) {
      setSelectedItems(e.detail.selectedItems);
    } else {
      if (typeof onConfirm === 'function') {
        onConfirm(e);
      }

      selectDialogRef.current.close();
    }
  };

  var handleClose = function handleClose() {
    selectDialogRef.current.close();
  };

  var handleClear = function handleClear(e) {
    if (typeof onClear === 'function') {
      onClear(enrichEventWithDetails(e, {
        prevSelectedItems: selectedItems
      }));
    }

    setSelectedItems([]);
    setListMounted(false);
    setListMounted(true);
  };

  var handleConfirm = function handleConfirm(e) {
    if (typeof onConfirm === 'function') {
      onConfirm(enrichEventWithDetails(e, {
        selectedItems: selectedItems
      }));
    }

    selectDialogRef.current.close();
  };

  var handleAfterClose = function handleAfterClose(e) {
    if (typeof onAfterClose === 'function') {
      onAfterClose(e);
    }

    if (!rememberSelections) {
      setListMounted(false);
      setListMounted(true);
    }
  };

  return /*#__PURE__*/React.createElement(Dialog, _extends({}, rest, {
    "data-component-name": "SelectDialog",
    ref: componentRef,
    className: clsx(classes.dialog, className),
    footer: /*#__PURE__*/React.createElement(Bar, {
      design: BarDesign.Footer,
      endContent: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {
        onClick: handleClose,
        design: ButtonDesign.Transparent
      }, i18nBundle.getText(CANCEL)), mode === ListMode.MultiSelect && /*#__PURE__*/React.createElement(Button, {
        onClick: handleConfirm,
        design: ButtonDesign.Emphasized
      }, confirmButtonText !== null && confirmButtonText !== void 0 ? confirmButtonText : i18nBundle.getText(SELECT)))
    }),
    onAfterClose: handleAfterClose,
    onBeforeOpen: handleBeforeOpen
  }), /*#__PURE__*/React.createElement(Bar, {
    slot: "header",
    startContent: !headerTextAlignCenter && /*#__PURE__*/React.createElement(Title, null, headerText),
    endContent: showClearButton && /*#__PURE__*/React.createElement(Button, {
      onClick: handleClear,
      design: ButtonDesign.Transparent
    }, i18nBundle.getText(CLEAR)),
    design: BarDesign.Header,
    className: clsx(classes.noShadow, classes.spread)
  }, headerTextAlignCenter && /*#__PURE__*/React.createElement(Title, null, headerText)), /*#__PURE__*/React.createElement(Bar, {
    slot: "header",
    design: BarDesign.Subheader,
    "data-component-name": "SelectDialogSubHeader",
    className: classes.noShadow
  }, /*#__PURE__*/React.createElement(Input, {
    className: classes.spread,
    accessibleName: i18nBundle.getText(SEARCH),
    value: searchValue,
    placeholder: i18nBundle.getText(SEARCH),
    onInput: handleSearchInput,
    onKeyUp: handleSearchSubmit,
    icon: /*#__PURE__*/React.createElement(React.Fragment, null, searchValue && /*#__PURE__*/React.createElement(Icon, {
      accessibleName: i18nBundle.getText(RESET),
      title: i18nBundle.getText(RESET),
      name: "decline",
      interactive: true,
      onClick: handleResetSearch,
      className: classes.inputIcon
    }), /*#__PURE__*/React.createElement(Icon, {
      name: "search",
      className: classes.inputIcon,
      onClick: handleSearchSubmit,
      accessibleName: i18nBundle.getText(SEARCH),
      title: i18nBundle.getText(SEARCH)
    }))
  })), mode === ListMode.MultiSelect && (!!selectedItems.length || numberOfSelectedItems > 0) && /*#__PURE__*/React.createElement(Toolbar, {
    design: ToolbarDesign.Info,
    className: classes.infoBar
  }, /*#__PURE__*/React.createElement(Text, null, "".concat(i18nBundle.getText(SELECTED), ": ").concat(numberOfSelectedItems !== null && numberOfSelectedItems !== void 0 ? numberOfSelectedItems : selectedItems.length))), /*#__PURE__*/React.createElement(List, _extends({}, listProps, {
    ref: listComponentRef,
    growing: growing,
    onLoadMore: onLoadMore,
    mode: mode,
    onSelectionChange: handleSelectionChange
  }), listMounted && children));
});
SelectDialog.defaultProps = {
  mode: ListMode.SingleSelect,
  listProps: {}
};
SelectDialog.displayName = 'SelectDialog';

export { SelectDialog };
//# sourceMappingURL=SelectDialog.js.map
