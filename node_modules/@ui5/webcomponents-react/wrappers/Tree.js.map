{"version":3,"file":"Tree.js","sources":["../src/webComponents/Tree/index.tsx"],"sourcesContent":["import { ListMode } from '@ui5/webcomponents-react/dist/ListMode';\nimport { withWebComponent } from '@ui5/webcomponents-react/dist/withWebComponent';\nimport { CommonProps } from '@ui5/webcomponents-react/interfaces/CommonProps';\nimport { Ui5CustomEvent } from '@ui5/webcomponents-react/interfaces/Ui5CustomEvent';\nimport { Ui5DomRef } from '@ui5/webcomponents-react/interfaces/Ui5DomRef';\nimport { ReactNode } from 'react';\n\nimport '@ui5/webcomponents/dist/Tree.js';\n\ninterface TreeAttributes {\n  /**\n   * Defines the component footer text.\n   */\n  footerText?: string;\n  /**\n   * Defines the component header text.\n   *\n   * **Note:** If the `header` slot is set, this property is ignored.\n   */\n  headerText?: string;\n  /**\n   * Defines the mode of the component. Since the tree uses a `List` to display its structure, the tree modes are exactly the same as the list modes, and are all applicable.\n   *\n   * **Note:**\n   *\n   * *   `None`\n   * *   `SingleSelect`\n   * *   `SingleSelectBegin`\n   * *   `SingleSelectEnd`\n   * *   `MultiSelect`\n   * *   `Delete`\n   */\n  mode?: ListMode | keyof typeof ListMode;\n  /**\n   * Defines the text that is displayed when the component contains no items.\n   */\n  noDataText?: string;\n}\n\nexport interface TreeDomRef extends TreeAttributes, Ui5DomRef {\n  /**\n   * Perform Depth-First-Search walk on the tree and run a callback on each node\n   * @param {(treeNode: HTMLElement, level: number) => void} callback - function to execute on each node of the tree with 2 arguments: the node and the level\n   */\n  walk: (callback: (treeNode: HTMLElement, level: number) => void) => void;\n}\n\nexport interface TreePropTypes extends TreeAttributes, CommonProps {\n  /**\n   * Defines the items of the component. Tree items may have other tree items as children.\n   *\n   * **Note:** Use `TreeItem` for the intended design.\n   */\n  children?: ReactNode | ReactNode[];\n  /**\n   * Defines the component header.\n   *\n   * **Note:** When the `header` slot is set, the `headerText` property is ignored.\n   *\n   * __Note:__ When passing a custom React component to this prop, you have to make sure your component reads the `slot` prop and appends it to the most outer element of your component.\n   * Learn more about it [here](https://sap.github.io/ui5-webcomponents-react/?path=/docs/knowledge-base--page#adding-custom-components-to-slots).\n   */\n  header?: ReactNode | ReactNode[];\n  /**\n   * Fired when a tree item is activated.\n   */\n  onItemClick?: (event: Ui5CustomEvent<HTMLElement, { item: ReactNode }>) => void;\n  /**\n   * Fired when the Delete button of any tree item is pressed.\n   *\n   * **Note:** A Delete button is displayed on each item, when the component `mode` property is set to `Delete`.\n   */\n  onItemDelete?: (event: Ui5CustomEvent<HTMLElement, { item: ReactNode }>) => void;\n  /**\n   * Fired when the mouse cursor leaves the tree item borders.\n   */\n  onItemMouseout?: (event: Ui5CustomEvent<HTMLElement, { item: ReactNode }>) => void;\n  /**\n   * Fired when the mouse cursor enters the tree item borders.\n   */\n  onItemMouseover?: (event: Ui5CustomEvent<HTMLElement, { item: ReactNode }>) => void;\n  /**\n   * Fired when a tree item is expanded or collapsed. _Note:_ You can call `preventDefault()` on the event object to suppress the event, if needed. This may be handy for example if you want to dynamically load tree items upon the user expanding a node. Even if you prevented the event's default behavior, you can always manually call `toggle()` on a tree item.\n   */\n  onItemToggle?: (event: Ui5CustomEvent<HTMLElement, { item: ReactNode }>) => void;\n  /**\n   * Fired when selection is changed by user interaction in `SingleSelect`, `SingleSelectBegin`, `SingleSelectEnd` and `MultiSelect` modes.\n   */\n  onSelectionChange?: (\n    event: Ui5CustomEvent<HTMLElement, { selectedItems: unknown[]; previouslySelectedItems: unknown[] }>\n  ) => void;\n}\n\n/**\n * The `Tree` component provides a tree structure for displaying data in a hierarchy.\n *\n * <ui5-link href=\"https://sap.github.io/ui5-webcomponents/playground/components/Tree\" target=\"_blank\">UI5 Web Components Playground</ui5-link>\n */\nconst Tree = withWebComponent<TreePropTypes, TreeDomRef>(\n  'ui5-tree',\n  ['footerText', 'headerText', 'mode', 'noDataText'],\n  [],\n  ['header'],\n  ['item-click', 'item-delete', 'item-mouseout', 'item-mouseover', 'item-toggle', 'selection-change']\n);\n\nTree.displayName = 'Tree';\n\nTree.defaultProps = {\n  mode: ListMode.None\n};\n\nexport { Tree };\n"],"names":["Tree","withWebComponent","displayName","defaultProps","mode","ListMode","None"],"mappings":";;;AA6FA;AACA;AACA;AACA;AACA;IACMA,IAAI,GAAGC,gBAAgB,CAC3B,UAD2B,EAE3B,CAAC,YAAD,EAAe,YAAf,EAA6B,MAA7B,EAAqC,YAArC,CAF2B,EAG3B,EAH2B,EAI3B,CAAC,QAAD,CAJ2B,EAK3B,CAAC,YAAD,EAAe,aAAf,EAA8B,eAA9B,EAA+C,gBAA/C,EAAiE,aAAjE,EAAgF,kBAAhF,CAL2B;AAQ7BD,IAAI,CAACE,WAAL,GAAmB,MAAnB;AAEAF,IAAI,CAACG,YAAL,GAAoB;AAClBC,EAAAA,IAAI,EAAEC,QAAQ,CAACC;AADG,CAApB;;;;"}