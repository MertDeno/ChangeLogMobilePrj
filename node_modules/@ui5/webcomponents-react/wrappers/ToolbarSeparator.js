import _extends from '@babel/runtime/helpers/extends';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import { useI18nBundle } from '@ui5/webcomponents-react-base/dist/hooks';
import { createUseStyles } from 'react-jss';
import { CssSizeVariables } from '@ui5/webcomponents-react-base/dist/CssSizeVariables';
import { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';
import React, { useEffect, forwardRef } from 'react';
import { SEPARATOR } from '@ui5/webcomponents-react/dist/assets/i18n/i18n-defaults';
import clsx from 'clsx';
import { deprecationNotice } from '@ui5/webcomponents-react-base/dist/Utils';

var useDeprecationNoticeForTooltip = function useDeprecationNoticeForTooltip(component, tooltip) {
  useEffect(function () {
    if (tooltip) {
      deprecationNotice(component, '`tooltip` has been deprecated, please use the native `title` attribute instead.');
    }
  }, [tooltip]);
};

var _excluded = ["style", "className"];
var styles = {
  separator: {
    width: '0.0625rem',
    height: CssSizeVariables.sapWcrToolbarSeparatorHeight,
    background: ThemingParameters.sapToolbar_SeparatorColor
  }
};
var useStyles = createUseStyles(styles, {
  name: 'ToolbarSeparator'
});
var ToolbarSeparator = /*#__PURE__*/forwardRef(function (props, ref) {
  var style = props.style,
      className = props.className,
      rest = _objectWithoutProperties(props, _excluded);

  useDeprecationNoticeForTooltip('ToolbarSeparator', props.tooltip);
  var classes = useStyles();
  var separatorClasses = clsx(classes.separator, className);
  var i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    style: style,
    className: separatorClasses,
    "aria-label": i18nBundle.getText(SEPARATOR)
  }, rest));
});
ToolbarSeparator.displayName = 'ToolbarSeparator';

export { ToolbarSeparator };
//# sourceMappingURL=ToolbarSeparator.js.map
