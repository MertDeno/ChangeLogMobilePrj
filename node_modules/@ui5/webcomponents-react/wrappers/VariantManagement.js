import _extends from '@babel/runtime/helpers/extends';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import '@ui5/webcomponents-icons/dist/decline.js';
import '@ui5/webcomponents-icons/dist/navigation-down-arrow.js';
import '@ui5/webcomponents-icons/dist/search.js';
import { useI18nBundle } from '@ui5/webcomponents-react-base/dist/hooks';
import { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';
import { deprecationNotice, enrichEventWithDetails } from '@ui5/webcomponents-react-base/dist/Utils';
import { FILE_ALREADY_EXISTS, SPECIFY_VIEW_NAME, PUBLIC, PRIVATE, MARK_AS_FAVORITE, MARK_AS_STANDARD, DELETE_VIEW, APPLY_AUTOMATICALLY, SELECTED_AS_FAVORITE, UNSELECTED_AS_FAVORITE, VIEW, CANCEL, SAVE, SHARING, DEFAULT, CREATED_BY, SAVE_VIEW, SET_AS_DEFAULT, MY_VIEWS, SEARCH, SAVE_AS, MANAGE, SEARCH_VARIANT, SELECT_VIEW, RESET } from '@ui5/webcomponents-react/dist/assets/i18n/i18n-defaults';
import { Bar } from '@ui5/webcomponents-react/dist/Bar';
import { Button } from '@ui5/webcomponents-react/dist/Button';
import { ButtonDesign } from '@ui5/webcomponents-react/dist/ButtonDesign';
import { FlexBox } from '@ui5/webcomponents-react/dist/FlexBox';
import { Icon } from '@ui5/webcomponents-react/dist/Icon';
import { IllustratedMessage } from '@ui5/webcomponents-react/dist/IllustratedMessage';
import { IllustrationMessageType } from '@ui5/webcomponents-react/dist/IllustrationMessageType';
import { Input } from '@ui5/webcomponents-react/dist/Input';
import { List } from '@ui5/webcomponents-react/dist/List';
import { ListMode } from '@ui5/webcomponents-react/dist/ListMode';
import { PopoverPlacementType } from '@ui5/webcomponents-react/dist/PopoverPlacementType';
import { ResponsivePopover } from '@ui5/webcomponents-react/dist/ResponsivePopover';
import { Title } from '@ui5/webcomponents-react/dist/Title';
import { TitleLevel } from '@ui5/webcomponents-react/dist/TitleLevel';
import { VariantManagementContext } from '@ui5/webcomponents-react/dist/VariantManagementContext';
import React, { useEffect, useReducer, useRef, useState, Children, forwardRef, isValidElement, useCallback, cloneElement } from 'react';
import { createPortal } from 'react-dom';
import { createUseStyles } from 'react-jss';
import { isPhone, isTablet } from '@ui5/webcomponents-base/dist/Device.js';
import { addCustomCSS } from '@ui5/webcomponents-base/dist/Theming.js';
import '@ui5/webcomponents-icons/dist/favorite.js';
import '@ui5/webcomponents-icons/dist/unfavorite.js';
import { Dialog } from '@ui5/webcomponents-react/dist/Dialog';
import { Table } from '@ui5/webcomponents-react/dist/Table';
import { TableColumn } from '@ui5/webcomponents-react/dist/TableColumn';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { CheckBox } from '@ui5/webcomponents-react/dist/CheckBox';
import { RadioButton } from '@ui5/webcomponents-react/dist/RadioButton';
import { TableCell } from '@ui5/webcomponents-react/dist/TableCell';
import { TableRow } from '@ui5/webcomponents-react/dist/TableRow';
import { Text } from '@ui5/webcomponents-react/dist/Text';
import { ValueState } from '@ui5/webcomponents-react/dist/ValueState';
import { FlexBoxAlignItems } from '@ui5/webcomponents-react/dist/FlexBoxAlignItems';
import { FlexBoxDirection } from '@ui5/webcomponents-react/dist/FlexBoxDirection';
import { Label } from '@ui5/webcomponents-react/dist/Label';
import clsx from 'clsx';

var stopPropagation = function stopPropagation(e) {
  var _e$stopImmediatePropa;

  e.stopPropagation();
  (_e$stopImmediatePropa = e.stopImmediatePropagation) === null || _e$stopImmediatePropa === void 0 ? void 0 : _e$stopImmediatePropa.call(e);
};

var useDeprecationNoticeForTooltip = function useDeprecationNoticeForTooltip(component, tooltip) {
  useEffect(function () {
    if (tooltip) {
      deprecationNotice(component, '`tooltip` has been deprecated, please use the native `title` attribute instead.');
    }
  }, [tooltip]);
};

var ManageViewsTableRows = function ManageViewsTableRows(props) {
  var variantNames = props.variantNames,
      changedVariantNames = props.changedVariantNames,
      setChangedVariantNames = props.setChangedVariantNames,
      handleRowChange = props.handleRowChange,
      handleDelete = props.handleDelete,
      defaultView = props.defaultView,
      setDefaultView = props.setDefaultView,
      showShare = props.showShare,
      showApplyAutomatically = props.showApplyAutomatically,
      showSetAsDefault = props.showSetAsDefault,
      labelReadOnly = props.labelReadOnly,
      favorite = props.favorite,
      children = props.children,
      global = props.global,
      isDefault = props.isDefault,
      applyAutomatically = props.applyAutomatically,
      author = props.author,
      setInvalidVariants = props.setInvalidVariants,
      hideDelete = props.hideDelete;
  var i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  var errorTextAlreadyExists = i18nBundle.getText(FILE_ALREADY_EXISTS);
  var errorTextEmpty = i18nBundle.getText(SPECIFY_VIEW_NAME);
  var publicText = i18nBundle.getText(PUBLIC);
  var privateText = i18nBundle.getText(PRIVATE);
  var a11yFavoriteText = i18nBundle.getText(MARK_AS_FAVORITE);
  var a11yStandardText = i18nBundle.getText(MARK_AS_STANDARD);
  var a11yDeleteText = i18nBundle.getText(DELETE_VIEW);
  var a11yApplyAutomaticallyText = i18nBundle.getText(APPLY_AUTOMATICALLY);
  var favoriteIconTitleText = i18nBundle.getText(SELECTED_AS_FAVORITE);
  var unfavoriteIconTitleText = i18nBundle.getText(UNSELECTED_AS_FAVORITE);
  var inputPlaceHolder = i18nBundle.getText(VIEW);

  var _useReducer = useReducer(function (prev) {
    return !prev;
  }, !!favorite),
      _useReducer2 = _slicedToArray(_useReducer, 2),
      internalFavorite = _useReducer2[0],
      setFavorite = _useReducer2[1];

  var iconName = internalFavorite ? 'favorite' : 'unfavorite';
  var inputRef = useRef(undefined);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      variantNameInvalid = _useState2[0],
      setVariantNameInvalid = _useState2[1];

  var onFavoriteClick = function onFavoriteClick(e) {
    setFavorite();
    handleRowChange(e, {
      currentVariant: children,
      favorite: !internalFavorite
    });
  };

  var handleVariantInput = function handleVariantInput(e) {
    if (variantNames.includes(e.target.value) || Array.from(changedVariantNames.values()).includes(e.target.value)) {
      setVariantNameInvalid(errorTextAlreadyExists);
      setInvalidVariants(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, "".concat(children), inputRef.current));
      });
      handleRowChange(e, {
        currentVariant: children,
        children: e.target.value
      });
    } else if (e.target.value.length === 0) {
      setVariantNameInvalid(errorTextEmpty);
      setInvalidVariants(function (prev) {
        return _objectSpread(_objectSpread({}, prev), {}, _defineProperty({}, children, inputRef.current));
      });
      handleRowChange(e, {
        currentVariant: children,
        children: e.target.value
      });
    } else {
      setVariantNameInvalid(false);
      setInvalidVariants(function (prev) {
        var invalidRows = _objectSpread({}, prev);

        if (prev.hasOwnProperty(children)) {
          delete invalidRows[children];
        }

        return invalidRows;
      });
      handleRowChange(e, {
        currentVariant: children,
        children: e.target.value
      });
    }

    setChangedVariantNames(function (prev) {
      var currentChangedVariants = new Map(prev);
      currentChangedVariants.set(children, e.target.value);
      return currentChangedVariants;
    });
  };

  var handleVariantFocus = function handleVariantFocus() {
    var filteredChangedValues = Array.from(changedVariantNames.values()).filter(function (item) {
      return item === inputRef.current.value;
    });

    if (filteredChangedValues.length === 1) {
      setVariantNameInvalid(false);
      setInvalidVariants(function (prev) {
        var invalidRows = _objectSpread({}, prev);

        if (prev.hasOwnProperty(children)) {
          delete invalidRows[children];
        }

        return invalidRows;
      });
    }
  };

  var handleDefaultChange = function handleDefaultChange() {
    setDefaultView(children);
  };

  var handleApplyAutomaticallyChange = function handleApplyAutomaticallyChange(e) {
    handleRowChange(e, {
      currentVariant: children,
      applyAutomatically: e.target.checked
    });
  };

  var renderView = function renderView() {
    if (labelReadOnly) {
      return /*#__PURE__*/React.createElement(Text, {
        style: {
          fontFamily: isDefault ? ThemingParameters.sapFontBoldFamily : ThemingParameters.sapFontFamily
        }
      }, children);
    }

    return /*#__PURE__*/React.createElement(Input, {
      placeholder: inputPlaceHolder,
      value: children,
      onInput: handleVariantInput,
      onFocus: handleVariantFocus,
      ref: inputRef,
      valueStateMessage: /*#__PURE__*/React.createElement("div", null, variantNameInvalid),
      valueState: !variantNameInvalid ? ValueState.None : ValueState.Error
    });
  };

  return /*#__PURE__*/React.createElement(TableRow, {
    "data-id": children,
    key: "".concat(children)
  }, /*#__PURE__*/React.createElement(TableCell, null, isDefault ? /*#__PURE__*/React.createElement(Icon, {
    name: "favorite",
    style: {
      color: ThemingParameters.sapContent_NonInteractiveIconColor
    }
  }) : /*#__PURE__*/React.createElement(Icon, {
    "aria-label": a11yFavoriteText,
    title: iconName === 'favorite' ? favoriteIconTitleText : unfavoriteIconTitleText,
    name: iconName,
    interactive: true,
    style: {
      color: ThemingParameters.sapContent_MarkerIconColor,
      cursor: 'pointer'
    },
    onClick: onFavoriteClick
  })), /*#__PURE__*/React.createElement(TableCell, null, renderView()), showShare && /*#__PURE__*/React.createElement(TableCell, null, global ? publicText : privateText), showSetAsDefault && /*#__PURE__*/React.createElement(TableCell, null, /*#__PURE__*/React.createElement(RadioButton, {
    "aria-label": a11yStandardText,
    checked: defaultView !== undefined ? defaultView === children : isDefault,
    onChange: handleDefaultChange
  })), showApplyAutomatically && /*#__PURE__*/React.createElement(TableCell, null, /*#__PURE__*/React.createElement(CheckBox, {
    "aria-label": a11yApplyAutomaticallyText,
    checked: applyAutomatically,
    onChange: handleApplyAutomaticallyChange
  })), /*#__PURE__*/React.createElement(TableCell, null, /*#__PURE__*/React.createElement(Text, null, author)), /*#__PURE__*/React.createElement(TableCell, null, !(hideDelete !== null && hideDelete !== void 0 ? hideDelete : global) && /*#__PURE__*/React.createElement(Button, {
    title: a11yDeleteText,
    accessibleName: a11yDeleteText,
    icon: "decline",
    design: ButtonDesign.Transparent,
    onClick: handleDelete,
    "data-children": children
  })));
};

addCustomCSS('ui5-dialog', "\n  :host([data-component-name=\"VariantManagementManageViewsDialog\"]) .ui5-popup-content{\n    padding: 0;\n  }\n  ");
var ManageViewsDialog = function ManageViewsDialog(props) {
  var children = props.children,
      onAfterClose = props.onAfterClose,
      handleSaveManageViews = props.handleSaveManageViews,
      showShare = props.showShare,
      showApplyAutomatically = props.showApplyAutomatically,
      showSetAsDefault = props.showSetAsDefault,
      variantNames = props.variantNames,
      portalContainer = props.portalContainer;
  var i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  var cancelText = i18nBundle.getText(CANCEL);
  var saveText = i18nBundle.getText(SAVE);
  var viewHeaderText = i18nBundle.getText(VIEW);
  var sharingHeaderText = i18nBundle.getText(SHARING);
  var defaultHeaderText = i18nBundle.getText(DEFAULT);
  var applyAutomaticallyHeaderText = i18nBundle.getText(APPLY_AUTOMATICALLY);
  var createdByHeaderText = i18nBundle.getText(CREATED_BY);

  var _useState = useState(new Map()),
      _useState2 = _slicedToArray(_useState, 2),
      changedVariantNames = _useState2[0],
      setChangedVariantNames = _useState2[1];

  var _useState3 = useState({}),
      _useState4 = _slicedToArray(_useState3, 2),
      invalidVariants = _useState4[0],
      setInvalidVariants = _useState4[1];

  var columns = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(TableColumn, {
    key: "favorite-variant-item"
  }), /*#__PURE__*/React.createElement(TableColumn, null, viewHeaderText), showShare && /*#__PURE__*/React.createElement(TableColumn, {
    demandPopin: true,
    minWidth: 600
  }, sharingHeaderText), showSetAsDefault && /*#__PURE__*/React.createElement(TableColumn, {
    demandPopin: true,
    minWidth: 600,
    popinText: defaultHeaderText
  }, defaultHeaderText), showApplyAutomatically && /*#__PURE__*/React.createElement(TableColumn, {
    demandPopin: true,
    minWidth: 600,
    popinText: applyAutomaticallyHeaderText
  }, applyAutomaticallyHeaderText), /*#__PURE__*/React.createElement(TableColumn, {
    demandPopin: true,
    minWidth: 600,
    popinText: createdByHeaderText
  }, createdByHeaderText), /*#__PURE__*/React.createElement(TableColumn, {
    key: "delete-variant-item"
  }));
  var manageViewsRef = useRef(null);
  useEffect(function () {
    manageViewsRef.current.show();
    return function () {
      var _manageViewsRef$curre;

      (_manageViewsRef$curre = manageViewsRef.current) === null || _manageViewsRef$curre === void 0 ? void 0 : _manageViewsRef$curre.close();
    };
  }, []);

  var _useState5 = useState(Children.map(children, function (child) {
    return child.props;
  })),
      _useState6 = _slicedToArray(_useState5, 2),
      childrenProps = _useState6[0],
      setChildrenProps = _useState6[1];

  useEffect(function () {
    setChildrenProps(Children.map(children, function (child) {
      return child.props;
    }));
  }, [children]);

  var _useState7 = useState(),
      _useState8 = _slicedToArray(_useState7, 2),
      defaultView = _useState8[0],
      setDefaultView = _useState8[1];

  var changedTableRows = useRef({});

  var handleTableRowChange = function handleTableRowChange(e, payload) {
    if (payload) {
      var _changedTableRows$cur;

      changedTableRows.current[payload.currentVariant] = _objectSpread(_objectSpread({}, (_changedTableRows$cur = changedTableRows.current[payload.currentVariant]) !== null && _changedTableRows$cur !== void 0 ? _changedTableRows$cur : {}), payload);
    }
  };

  var deletedTableRows = useRef(new Set([]));

  var handleDelete = function handleDelete(e) {
    deletedTableRows.current.add(e.target.dataset.children);
    setChildrenProps(function (prev) {
      return prev.filter(function (item) {
        return item.children !== e.target.dataset.children;
      }).map(function (item) {
        if (changedTableRows.current.hasOwnProperty(item.children)) {
          return _objectSpread(_objectSpread({}, item), changedTableRows.current[item.children]);
        }

        return item;
      });
    });
  };

  var handleSave = function handleSave(e) {
    if (Object.keys(invalidVariants).length === 0) {
      handleSaveManageViews(e, {
        updatedRows: changedTableRows.current,
        defaultView: defaultView,
        deletedRows: deletedTableRows.current
      });
    } else {
      Object.values(invalidVariants)[0].focus();
    }
  };

  return /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(Dialog, {
    style: {
      width: isPhone() || isTablet() ? '100%' : '70vw'
    },
    "data-component-name": "VariantManagementManageViewsDialog",
    ref: manageViewsRef,
    onAfterClose: onAfterClose,
    headerText: "Manage Views",
    footer: /*#__PURE__*/React.createElement(Bar, {
      endContent: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {
        design: ButtonDesign.Emphasized,
        onClick: handleSave
      }, saveText), /*#__PURE__*/React.createElement(Button, {
        design: ButtonDesign.Transparent,
        onClick: onAfterClose
      }, cancelText))
    })
  }, /*#__PURE__*/React.createElement(Table, {
    columns: columns,
    stickyColumnHeader: true,
    role: "table"
  }, childrenProps.map(function (itemProps) {
    return /*#__PURE__*/React.createElement(ManageViewsTableRows, _extends({}, itemProps, {
      setInvalidVariants: setInvalidVariants,
      setChangedVariantNames: setChangedVariantNames,
      changedVariantNames: changedVariantNames,
      variantNames: variantNames,
      handleRowChange: handleTableRowChange,
      handleDelete: handleDelete,
      defaultView: defaultView,
      setDefaultView: setDefaultView,
      showShare: showShare,
      showApplyAutomatically: showApplyAutomatically,
      showSetAsDefault: showSetAsDefault,
      key: itemProps === null || itemProps === void 0 ? void 0 : itemProps.children
    }));
  }))), portalContainer);
};

var SaveViewDialog = function SaveViewDialog(props) {
  var onAfterClose = props.onAfterClose,
      handleSave = props.handleSave,
      selectedVariant = props.selectedVariant,
      showShare = props.showShare,
      showApplyAutomatically = props.showApplyAutomatically,
      showSetAsDefault = props.showSetAsDefault,
      variantNames = props.variantNames;
  var saveViewDialogRef = useRef(null);
  var inputRef = useRef(undefined);
  var i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  var cancelText = i18nBundle.getText(CANCEL);
  var saveText = i18nBundle.getText(SAVE);
  var headingText = i18nBundle.getText(SAVE_VIEW);
  var defaultCbLabel = i18nBundle.getText(SET_AS_DEFAULT);
  var publicCbLabel = i18nBundle.getText(PUBLIC);
  var applyAutomaticallyCbLabel = i18nBundle.getText(APPLY_AUTOMATICALLY);
  var inputLabelText = i18nBundle.getText(VIEW);
  var errorTextAlreadyExists = i18nBundle.getText(FILE_ALREADY_EXISTS);
  var errorTextEmpty = i18nBundle.getText(SPECIFY_VIEW_NAME);

  var _useState = useState(selectedVariant.isDefault),
      _useState2 = _slicedToArray(_useState, 2),
      isDefault = _useState2[0],
      setDefault = _useState2[1];

  var _useState3 = useState(selectedVariant.global),
      _useState4 = _slicedToArray(_useState3, 2),
      isPublic = _useState4[0],
      setPublic = _useState4[1];

  var _useState5 = useState(selectedVariant.applyAutomatically),
      _useState6 = _slicedToArray(_useState5, 2),
      applyAutomatically = _useState6[0],
      setApplyAutomatically = _useState6[1];

  var _useState7 = useState(selectedVariant.children),
      _useState8 = _slicedToArray(_useState7, 2),
      variantName = _useState8[0],
      setVariantName = _useState8[1];

  var _useState9 = useState(false),
      _useState10 = _slicedToArray(_useState9, 2),
      variantNameInvalid = _useState10[0],
      setVariantNameInvalid = _useState10[1];

  var handleInputChange = function handleInputChange(e) {
    setVariantName(e.target.value);
  };

  var onSave = function onSave(e) {
    if (variantNames.includes(variantName)) {
      var _inputRef$current;

      setVariantNameInvalid(errorTextAlreadyExists);
      (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();
    } else if (variantName.length === 0) {
      var _inputRef$current2;

      setVariantNameInvalid(errorTextEmpty);
      (_inputRef$current2 = inputRef.current) === null || _inputRef$current2 === void 0 ? void 0 : _inputRef$current2.focus();
    } else {
      setVariantNameInvalid(false);
      handleSave(e, _objectSpread(_objectSpread({}, selectedVariant), {}, {
        children: variantName,
        isDefault: isDefault,
        global: isPublic,
        applyAutomatically: applyAutomatically
      }));
    }
  };

  var handleCancel = function handleCancel() {
    saveViewDialogRef.current.close();
  };

  var handleChangeDefault = function handleChangeDefault(e) {
    setDefault(e.target.checked);
  };

  var handleChangePublic = function handleChangePublic(e) {
    setPublic(e.target.checked);
  };

  var handleChangeApplyAutomatically = function handleChangeApplyAutomatically(e) {
    setApplyAutomatically(e.target.checked);
  };

  useEffect(function () {
    saveViewDialogRef.current.show();
    return function () {
      var _saveViewDialogRef$cu;

      (_saveViewDialogRef$cu = saveViewDialogRef.current) === null || _saveViewDialogRef$cu === void 0 ? void 0 : _saveViewDialogRef$cu.close();
    };
  }, []);
  return /*#__PURE__*/React.createElement(Dialog, {
    ref: saveViewDialogRef,
    headerText: headingText,
    onAfterClose: onAfterClose,
    footer: /*#__PURE__*/React.createElement(Bar, {
      endContent: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {
        design: ButtonDesign.Emphasized,
        onClick: onSave
      }, saveText), /*#__PURE__*/React.createElement(Button, {
        design: ButtonDesign.Transparent,
        onClick: handleCancel
      }, cancelText))
    })
  }, /*#__PURE__*/React.createElement(FlexBox, {
    direction: FlexBoxDirection.Column,
    alignItems: FlexBoxAlignItems.Start
  }, /*#__PURE__*/React.createElement(Label, {
    for: "view",
    showColon: true
  }, inputLabelText), /*#__PURE__*/React.createElement(Input, {
    accessibleName: "view",
    ref: inputRef,
    style: {
      width: '100%',
      margin: '0.1875rem 0'
    },
    id: "view",
    value: variantName,
    valueState: !variantNameInvalid ? 'None' : 'Error',
    valueStateMessage: /*#__PURE__*/React.createElement("div", null, variantNameInvalid),
    onChange: handleInputChange
  }), /*#__PURE__*/React.createElement(FlexBox, {
    alignItems: FlexBoxAlignItems.Start,
    direction: FlexBoxDirection.Column,
    style: {
      padding: '0 0.5rem'
    }
  }, showSetAsDefault && /*#__PURE__*/React.createElement(CheckBox, {
    onChange: handleChangeDefault,
    text: defaultCbLabel,
    checked: isDefault
  }), showShare && /*#__PURE__*/React.createElement(CheckBox, {
    onChange: handleChangePublic,
    text: publicCbLabel,
    checked: isPublic
  }), showApplyAutomatically && /*#__PURE__*/React.createElement(CheckBox, {
    onChange: handleChangeApplyAutomatically,
    text: applyAutomaticallyCbLabel,
    checked: applyAutomatically
  }))));
};

var _excluded = ["titleText", "className", "style", "tooltip", "placement", "level", "onSelect", "closeOnItemSelect", "disabled", "onSaveAs", "onSaveManageViews", "showOnlyFavorites", "inErrorState", "hideShare", "children", "hideManageVariants", "hideApplyAutomatically", "hideSetAsDefault", "hideSaveAs", "dirtyStateText", "dirtyState", "showCancelButton", "onSave", "portalContainer"],
    _excluded2 = ["currentVariant"];
var styles = {
  container: {
    display: 'flex',
    alignItems: 'center',
    textAlign: 'center'
  },
  title: {
    cursor: 'pointer',
    color: ThemingParameters.sapButton_TextColor,
    '&:hover': {
      color: ThemingParameters.sapButton_Hover_TextColor
    }
  },
  disabled: {
    '& $title': {
      color: ThemingParameters.sapGroup_TitleTextColor,
      cursor: 'default',
      '&:hover': {
        color: 'ThemingParameters.sapGroup_TitleTextColor'
      }
    }
  },
  dirtyState: {
    color: ThemingParameters.sapGroup_TitleTextColor,
    padding: '0 0.125rem',
    fontWeight: 'bold',
    font: ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.sapFontSize,
    flexGrow: 1
  },
  dirtyStateText: {
    fontSize: ThemingParameters.sapFontSmallSize,
    fontWeight: 'normal'
  },
  footer: {
    margin: '0.4375rem 1rem 0.4325rem auto'
  },
  inputIcon: {
    cursor: 'pointer',
    color: ThemingParameters.sapContent_IconColor
  },
  searchInput: {
    padding: '0.25rem 0.5rem 0.25rem 0.25rem'
  },
  popover: {
    minWidth: '25rem'
  }
};
var useStyles = createUseStyles(styles, {
  name: 'VariantManagement'
});
/**
 * The `VariantManagement` component can be used to manage variants, such as FilterBar variants or AnalyticalTable variants.
 */

var VariantManagement = /*#__PURE__*/forwardRef(function (props, ref) {
  var i18nBundle = useI18nBundle('@ui5/webcomponents-react');

  var _props$titleText = props.titleText,
      titleText = _props$titleText === void 0 ? i18nBundle.getText(MY_VIEWS) : _props$titleText,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip,
      placement = props.placement,
      level = props.level,
      onSelect = props.onSelect,
      closeOnItemSelect = props.closeOnItemSelect,
      disabled = props.disabled,
      onSaveAs = props.onSaveAs,
      onSaveManageViews = props.onSaveManageViews,
      showOnlyFavorites = props.showOnlyFavorites,
      inErrorState = props.inErrorState,
      hideShare = props.hideShare,
      children = props.children,
      hideManageVariants = props.hideManageVariants,
      hideApplyAutomatically = props.hideApplyAutomatically,
      hideSetAsDefault = props.hideSetAsDefault,
      hideSaveAs = props.hideSaveAs,
      dirtyStateText = props.dirtyStateText,
      dirtyState = props.dirtyState,
      showCancelButton = props.showCancelButton,
      onSave = props.onSave,
      portalContainer = props.portalContainer,
      rest = _objectWithoutProperties(props, _excluded);

  useDeprecationNoticeForTooltip('VariantManagement', props.tooltip);
  var classes = useStyles();
  var popoverRef = useRef(null);

  var _useState = useState(Children.toArray(children)),
      _useState2 = _slicedToArray(_useState, 2),
      safeChildren = _useState2[0],
      setSafeChildren = _useState2[1];

  var _useState3 = useState(safeChildren.length > 9),
      _useState4 = _slicedToArray(_useState3, 2),
      showInput = _useState4[0],
      setShowInput = _useState4[1];

  useEffect(function () {
    setSafeChildren(Children.toArray(children));
  }, [children]);
  useEffect(function () {
    if (safeChildren.length > 9) {
      setShowInput(true);
    } else {
      setShowInput(false);
    }
  }, [safeChildren.length]);

  var _useState5 = useState(false),
      _useState6 = _slicedToArray(_useState5, 2),
      manageViewsDialogOpen = _useState6[0],
      setManageViewsDialogOpen = _useState6[1];

  var _useState7 = useState(false),
      _useState8 = _slicedToArray(_useState7, 2),
      saveAsDialogOpen = _useState8[0],
      setSaveAsDialogOpen = _useState8[1];

  var _useState9 = useState(function () {
    var currentSelectedVariant = safeChildren.find(function (item) {
      return /*#__PURE__*/isValidElement(item) && item.props.selected;
    });

    if (currentSelectedVariant) {
      return _objectSpread(_objectSpread({}, currentSelectedVariant.props), {}, {
        variantItem: currentSelectedVariant.ref
      });
    }
  }),
      _useState10 = _slicedToArray(_useState9, 2),
      selectedVariant = _useState10[0],
      setSelectedVariant = _useState10[1];

  var handleClose = function handleClose() {
    popoverRef.current.close();
  };

  var handleManageClick = function handleManageClick() {
    setManageViewsDialogOpen(true);
  };

  var handleManageClose = function handleManageClose() {
    setManageViewsDialogOpen(false);
  };

  var handleOpenSaveAsDialog = function handleOpenSaveAsDialog() {
    setSaveAsDialogOpen(true);
  };

  var handleSaveAsClose = function handleSaveAsClose() {
    setSaveAsDialogOpen(false);
  };

  var handleSave = function handleSave(e) {
    if (typeof onSave === 'function') {
      onSave(enrichEventWithDetails(e, selectedVariant));
    }
  };

  var handleSaveView = function handleSaveView(e, selectedVariant) {
    if (typeof onSaveAs === 'function') {
      onSaveAs(enrichEventWithDetails(e, selectedVariant));
    }

    handleSaveAsClose();
  };

  var handleSaveManageViews = function handleSaveManageViews(e, payload) {
    var defaultView = payload.defaultView,
        updatedRows = payload.updatedRows,
        deletedRows = payload.deletedRows;
    var callbackProperties = {
      deletedVariants: [],
      prevVariants: [],
      updatedVariants: [],
      variants: []
    };

    if (typeof onSaveManageViews === 'function') {
      onSaveManageViews(enrichEventWithDetails(e, callbackProperties));
    }

    setSafeChildren(function (prev) {
      return prev.map(function (child) {
        var updatedProps = {};
        var currentVariant = popoverRef.current.querySelector("ui5-li[data-text=\"".concat(child.props.children, "\"]"));
        callbackProperties.prevVariants.push(child.props);

        if (defaultView) {
          if (defaultView === child.props.children) {
            updatedProps.isDefault = true;
          } else if (child.props.isDefault) {
            updatedProps.isDefault = false;
          }
        }

        if (Object.keys(updatedRows).includes(child.props.children)) {
          var _updatedRows$child$pr = updatedRows[child.props.children];
              _updatedRows$child$pr.currentVariant;
              var _rest = _objectWithoutProperties(_updatedRows$child$pr, _excluded2);

          updatedProps = _objectSpread(_objectSpread({}, updatedProps), _rest);
        }

        if (deletedRows.has(child.props.children)) {
          callbackProperties.deletedVariants.push(child.props);
          return false;
        }

        if (Object.keys(updatedProps).length > 0) {
          callbackProperties.updatedVariants.push(_objectSpread(_objectSpread(_objectSpread({}, child.props), updatedProps), {}, {
            variantItem: currentVariant,
            prevVariant: _objectSpread({}, child.props)
          }));
        }

        callbackProperties.variants.push(_objectSpread(_objectSpread(_objectSpread({}, child.props), updatedProps), {}, {
          variantItem: currentVariant
        }));
        return /*#__PURE__*/cloneElement(child, updatedProps);
      }).filter(Boolean);
    });
    handleManageClose();
  };

  var handleOpenVariantManagement = useCallback(function (e) {
    popoverRef.current.showAt(e.target);
  }, [popoverRef]);
  var cancelText = i18nBundle.getText(CANCEL);
  var searchText = i18nBundle.getText(SEARCH);
  var saveAsText = i18nBundle.getText(SAVE_AS);
  var manageText = i18nBundle.getText(MANAGE);
  var saveText = i18nBundle.getText(SAVE);
  var a11ySearchText = i18nBundle.getText(SEARCH_VARIANT);
  var selectViewText = i18nBundle.getText(SELECT_VIEW);
  var resetIconTitleText = i18nBundle.getText(RESET);
  var variantManagementClasses = clsx(classes.container, disabled && classes.disabled, className);
  var dirtyStateClasses = clsx(classes.dirtyState, dirtyStateText !== '*' && classes.dirtyStateText);
  var selectVariantEventRef = useRef();
  useEffect(function () {
    if (selectVariantEventRef.current) {
      if (typeof onSelect === 'function') {
        onSelect(enrichEventWithDetails(selectVariantEventRef.current, {
          selectedVariant: selectedVariant
        }));
        selectVariantEventRef.current = undefined;
      }
    }
  }, [selectedVariant, onSelect]);

  var handleVariantItemSelect = function handleVariantItemSelect(e) {
    setSelectedVariant(_objectSpread(_objectSpread({}, e.detail.selectedItems[0].dataset), {}, {
      variantItem: e.detail.selectedItems[0]
    }));
    selectVariantEventRef.current = e;

    if (closeOnItemSelect) {
      handleClose();
    }
  };

  var variantNames = safeChildren.map(function (item) {
    var _item$props;

    return typeof ((_item$props = item.props) === null || _item$props === void 0 ? void 0 : _item$props.children) === 'string' ? item.props.children : '';
  });

  var _useState11 = useState(undefined),
      _useState12 = _slicedToArray(_useState11, 2),
      favoriteChildren = _useState12[0],
      setFavoriteChildren = _useState12[1];

  useEffect(function () {
    if (showOnlyFavorites) {
      setFavoriteChildren(safeChildren.filter(function (child) {
        return child.props.favorite || child.props.isDefault;
      }));
    }

    if (!showOnlyFavorites && (favoriteChildren === null || favoriteChildren === void 0 ? void 0 : favoriteChildren.length) > 0) {
      setFavoriteChildren(undefined);
    }
  }, [showOnlyFavorites, safeChildren]);
  var safeChildrenWithFavorites = favoriteChildren !== null && favoriteChildren !== void 0 ? favoriteChildren : safeChildren;

  var _useState13 = useState(undefined),
      _useState14 = _slicedToArray(_useState13, 2),
      filteredChildren = _useState14[0],
      setFilteredChildren = _useState14[1];

  var _useState15 = useState(''),
      _useState16 = _slicedToArray(_useState15, 2),
      searchValue = _useState16[0],
      setSearchValue = _useState16[1];

  var handleSearchInput = function handleSearchInput(e) {
    setSearchValue(e.target.value);
    setFilteredChildren(safeChildrenWithFavorites.filter(function (child) {
      var _child$props;

      return typeof (child === null || child === void 0 ? void 0 : (_child$props = child.props) === null || _child$props === void 0 ? void 0 : _child$props.children) === 'string' && child.props.children.toLowerCase().includes(e.target.value.toLowerCase());
    }));
  };

  useEffect(function () {
    if (filteredChildren) {
      setFilteredChildren(safeChildrenWithFavorites.filter(function (child) {
        var _child$props2;

        return typeof (child === null || child === void 0 ? void 0 : (_child$props2 = child.props) === null || _child$props2 === void 0 ? void 0 : _child$props2.children) === 'string' && child.props.children.toLowerCase().includes(searchValue);
      }));
    }
  }, [safeChildrenWithFavorites]);

  var handleSpaceInput = function handleSpaceInput(e) {
    if (e.code === 'Space') {
      setSearchValue(function (prev) {
        return prev + ' ';
      });
    }
  };

  var handleResetFilter = function handleResetFilter() {
    setSearchValue('');
    setFilteredChildren(undefined);
  };

  var showSaveBtn = dirtyState && !(selectedVariant !== null && selectedVariant !== void 0 && selectedVariant.readOnly);
  return /*#__PURE__*/React.createElement("div", _extends({
    className: variantManagementClasses,
    style: style,
    title: tooltip
  }, rest, {
    ref: ref
  }), /*#__PURE__*/React.createElement(VariantManagementContext.Provider, {
    value: {
      selectVariantItem: setSelectedVariant
    }
  }, /*#__PURE__*/React.createElement(FlexBox, {
    onClick: disabled ? undefined : handleOpenVariantManagement
  }, /*#__PURE__*/React.createElement(Title, {
    level: level,
    className: classes.title
  }, selectedVariant === null || selectedVariant === void 0 ? void 0 : selectedVariant.children), dirtyState && /*#__PURE__*/React.createElement("div", {
    className: dirtyStateClasses
  }, dirtyStateText)), /*#__PURE__*/React.createElement(Button, {
    title: selectViewText,
    "aria-label": selectViewText,
    onClick: handleOpenVariantManagement,
    design: ButtonDesign.Transparent,
    icon: "navigation-down-arrow",
    disabled: disabled
  }), /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(ResponsivePopover, {
    className: classes.popover,
    ref: popoverRef,
    headerText: titleText,
    placementType: placement,
    footer: (showSaveBtn || !hideSaveAs || !hideManageVariants || showCancelButton) && /*#__PURE__*/React.createElement(Bar, {
      endContent: /*#__PURE__*/React.createElement(React.Fragment, null, !inErrorState && showSaveBtn && /*#__PURE__*/React.createElement(Button, {
        onClick: handleSave,
        design: ButtonDesign.Emphasized
      }, saveText), !inErrorState && !hideSaveAs && /*#__PURE__*/React.createElement(Button, {
        onClick: handleOpenSaveAsDialog,
        design: showSaveBtn ? ButtonDesign.Transparent : ButtonDesign.Emphasized,
        disabled: !selectedVariant || Object.keys(selectedVariant).length === 0
      }, saveAsText), !inErrorState && !hideManageVariants && /*#__PURE__*/React.createElement(Button, {
        onClick: handleManageClick,
        design: showSaveBtn || !hideSaveAs ? ButtonDesign.Transparent : ButtonDesign.Emphasized
      }, manageText), showCancelButton && /*#__PURE__*/React.createElement(Button, {
        onClick: handleClose,
        design: !inErrorState && (showSaveBtn || !hideSaveAs || !hideManageVariants) ? ButtonDesign.Transparent : ButtonDesign.Emphasized
      }, cancelText))
    }),
    onAfterClose: stopPropagation
  }, inErrorState ? /*#__PURE__*/React.createElement(IllustratedMessage, {
    name: IllustrationMessageType.UnableToLoad
  }) : /*#__PURE__*/React.createElement(List, {
    onSelectionChange: handleVariantItemSelect,
    mode: ListMode.SingleSelect,
    header: showInput ? /*#__PURE__*/React.createElement("div", {
      className: classes.searchInput,
      tabIndex: -1
    }, /*#__PURE__*/React.createElement(Input, {
      accessibleName: a11ySearchText,
      value: searchValue,
      placeholder: searchText,
      onInput: handleSearchInput // todo remove when fixed
      ,
      onKeyDown: handleSpaceInput,
      icon: /*#__PURE__*/React.createElement(React.Fragment, null, filteredChildren && /*#__PURE__*/React.createElement(Icon, {
        accessibleName: resetIconTitleText,
        title: resetIconTitleText,
        name: "decline",
        interactive: true,
        onClick: handleResetFilter,
        className: classes.inputIcon
      }), /*#__PURE__*/React.createElement(Icon, {
        name: "search",
        className: classes.inputIcon
      }))
    })) : undefined
  }, filteredChildren !== null && filteredChildren !== void 0 ? filteredChildren : safeChildrenWithFavorites)), portalContainer), manageViewsDialogOpen && /*#__PURE__*/React.createElement(ManageViewsDialog, {
    onAfterClose: handleManageClose,
    handleSaveManageViews: handleSaveManageViews,
    showShare: !hideShare,
    showApplyAutomatically: !hideApplyAutomatically,
    showSetAsDefault: !hideSetAsDefault,
    variantNames: variantNames,
    portalContainer: portalContainer
  }, safeChildren), saveAsDialogOpen && /*#__PURE__*/React.createElement(SaveViewDialog, {
    showShare: !hideShare,
    showApplyAutomatically: !hideApplyAutomatically,
    showSetAsDefault: !hideSetAsDefault,
    onAfterClose: handleSaveAsClose,
    handleSave: handleSaveView,
    selectedVariant: selectedVariant,
    variantNames: variantNames
  })));
});
VariantManagement.defaultProps = {
  placement: PopoverPlacementType.Bottom,
  level: TitleLevel.H4,
  dirtyStateText: '*',
  portalContainer: document.body
};
VariantManagement.displayName = 'VariantManagement';

export { VariantManagement };
//# sourceMappingURL=VariantManagement.js.map
