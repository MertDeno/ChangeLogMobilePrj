import _extends from '@babel/runtime/helpers/extends';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';
import '@ui5/webcomponents-icons/dist/hint.js';
import '@ui5/webcomponents-icons/dist/message-error.js';
import '@ui5/webcomponents-icons/dist/message-information.js';
import '@ui5/webcomponents-icons/dist/message-success.js';
import '@ui5/webcomponents-icons/dist/message-warning.js';
import '@ui5/webcomponents-icons/dist/question-mark.js';
import { useSyncRef, useI18nBundle, useIsomorphicLayoutEffect } from '@ui5/webcomponents-react-base/dist/hooks';
import { deprecationNotice, enrichEventWithDetails } from '@ui5/webcomponents-react-base/dist/Utils';
import { ABORT, CANCEL, CLOSE, DELETE, IGNORE, NO, OK, RETRY, YES, HIGHLIGHT, WARNING, SUCCESS, INFORMATION, ERROR, CONFIRMATION } from '@ui5/webcomponents-react/dist/assets/i18n/i18n-defaults';
import { Button } from '@ui5/webcomponents-react/dist/Button';
import { ButtonDesign } from '@ui5/webcomponents-react/dist/ButtonDesign';
import { Dialog } from '@ui5/webcomponents-react/dist/Dialog';
import { Icon } from '@ui5/webcomponents-react/dist/Icon';
import { MessageBoxActions } from '@ui5/webcomponents-react/dist/MessageBoxActions';
import { MessageBoxTypes } from '@ui5/webcomponents-react/dist/MessageBoxTypes';
import { Text } from '@ui5/webcomponents-react/dist/Text';
import { Title } from '@ui5/webcomponents-react/dist/Title';
import { TitleLevel } from '@ui5/webcomponents-react/dist/TitleLevel';
import clsx from 'clsx';
import React, { useEffect, forwardRef, useState, isValidElement, cloneElement } from 'react';
import { createUseStyles } from 'react-jss';
import { CssSizeVariables } from '@ui5/webcomponents-react-base/dist/CssSizeVariables';
import { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';

var stopPropagation = function stopPropagation(e) {
  var _e$stopImmediatePropa;

  e.stopPropagation();
  (_e$stopImmediatePropa = e.stopImmediatePropagation) === null || _e$stopImmediatePropa === void 0 ? void 0 : _e$stopImmediatePropa.call(e);
};

var useDeprecationNoticeForTooltip = function useDeprecationNoticeForTooltip(component, tooltip) {
  useEffect(function () {
    if (tooltip) {
      deprecationNotice(component, '`tooltip` has been deprecated, please use the native `title` attribute instead.');
    }
  }, [tooltip]);
};

var style = {
  messageBox: {
    '--sapContent_Shadow0': 'none'
  },
  header: {
    display: 'flex',
    height: CssSizeVariables.sapWcrBarHeight,
    textAlign: 'center',
    width: '100%',
    alignItems: 'center',
    padding: '0.25rem 1rem',
    boxSizing: 'border-box',
    borderBottom: "1px solid var(--messageBoxBorderColor)",
    color: ThemingParameters.sapContent_LabelColor,
    fontSize: '1rem',
    '& ui5-icon:first-child': {
      width: '1rem',
      height: '1rem'
    },
    '& [ui5-title]': {
      fontSize: '1rem'
    },
    '&[data-type="Error"]': {
      '--sapPageFooter_BorderColor': ThemingParameters.sapErrorBorderColor,
      '--messageBoxBorderColor': ThemingParameters.sapErrorBorderColor,
      '--sapContent_NonInteractiveIconColor': ThemingParameters.sapNegativeElementColor
    },
    '&[data-type="Warning"]': {
      '--sapPageFooter_BorderColor': ThemingParameters.sapWarningBorderColor,
      '--messageBoxBorderColor': ThemingParameters.sapWarningBorderColor,
      '--sapContent_NonInteractiveIconColor': ThemingParameters.sapCriticalElementColor
    },
    '&[data-type="Success"]': {
      '--sapPageFooter_BorderColor': ThemingParameters.sapSuccessBorderColor,
      '--messageBoxBorderColor': ThemingParameters.sapSuccessBorderColor,
      '--sapContent_NonInteractiveIconColor': ThemingParameters.sapPositiveElementColor
    },
    '&[data-type="Confirm"]': {
      '--sapPageFooter_BorderColor': ThemingParameters.sapNeutralBorderColor,
      '--messageBoxBorderColor': ThemingParameters.sapNeutralBorderColor,
      '--sapContent_NonInteractiveIconColor': ThemingParameters.sapNeutralElementColor
    },
    '&[data-type="Information"]': {
      '--sapPageFooter_BorderColor': ThemingParameters.sapInformationBorderColor,
      '--messageBoxBorderColor': ThemingParameters.sapInformationBorderColor,
      '--sapContent_NonInteractiveIconColor': ThemingParameters.sapInformativeElementColor
    },
    '&[data-type="Highlight"]': {
      '--sapPageFooter_BorderColor': ThemingParameters.sapInformationBorderColor,
      '--messageBoxBorderColor': ThemingParameters.sapInformationBorderColor,
      '--sapContent_NonInteractiveIconColor': ThemingParameters.sapInformativeElementColor
    }
  },
  spacer: {
    width: '0.5rem'
  },
  content: {
    padding: '1rem'
  },
  footer: {
    height: CssSizeVariables.sapWcrBarHeight,
    width: '100%',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'flex-end',
    padding: '0 0.5rem',
    '& > *': {
      margin: '0 0.25rem'
    },
    '& > ui5-button': {
      display: 'flex',
      minWidth: '4rem'
    }
  }
};
var styles = style;

var _excluded = ["open", "type", "children", "className", "style", "tooltip", "slot", "titleText", "icon", "actions", "emphasizedAction", "onClose", "initialFocus", "accessibleName"],
    _excluded2 = ["footer", "headerText", "title", "onAfterClose"];
var useStyles = createUseStyles(styles, {
  name: 'MessageBox'
});

var createUniqueIds = function createUniqueIds(internalActions) {
  return internalActions.map(function (action) {
    if (typeof action === 'string') {
      return "".concat(performance.now() + Math.random()).split('.')[1];
    }

    return null;
  });
};

var getIcon = function getIcon(icon, type) {
  if ( /*#__PURE__*/isValidElement(icon)) return icon;

  switch (type) {
    case MessageBoxTypes.Confirm:
      return /*#__PURE__*/React.createElement(Icon, {
        name: "question-mark"
      });

    case MessageBoxTypes.Error:
      return /*#__PURE__*/React.createElement(Icon, {
        name: "message-error"
      });

    case MessageBoxTypes.Information:
      return /*#__PURE__*/React.createElement(Icon, {
        name: "message-information"
      });

    case MessageBoxTypes.Success:
      return /*#__PURE__*/React.createElement(Icon, {
        name: "message-success"
      });

    case MessageBoxTypes.Warning:
      return /*#__PURE__*/React.createElement(Icon, {
        name: "message-warning"
      });

    case MessageBoxTypes.Highlight:
      return /*#__PURE__*/React.createElement(Icon, {
        name: "hint"
      });

    default:
      return null;
  }
};

var getActions = function getActions(actions, type) {
  if (actions && actions.length > 0) {
    return actions;
  }

  if (type === MessageBoxTypes.Confirm) {
    return [MessageBoxActions.OK, MessageBoxActions.Cancel];
  }

  if (type === MessageBoxTypes.Error) {
    return [MessageBoxActions.Close];
  }

  return [MessageBoxActions.OK];
};
/**
 * The `MessageBox` component provides easier methods to create a `Dialog`, such as standard alerts, confirmation dialogs, or arbitrary message dialogs.
 * For convenience, it also provides an `open` prop, so it is not necessary to attach a `ref` to open the `MessageBox`.
 */


var MessageBox = /*#__PURE__*/forwardRef(function (props, ref) {
  var _actionTranslations, _titleToRender;

  var open = props.open,
      type = props.type,
      children = props.children,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip,
      slot = props.slot,
      titleText = props.titleText,
      icon = props.icon,
      actions = props.actions,
      emphasizedAction = props.emphasizedAction,
      onClose = props.onClose,
      initialFocus = props.initialFocus,
      accessibleName = props.accessibleName,
      rest = _objectWithoutProperties(props, _excluded);

  useDeprecationNoticeForTooltip('MessageBox', props.tooltip);

  var _useSyncRef = useSyncRef(ref),
      _useSyncRef2 = _slicedToArray(_useSyncRef, 2),
      componentRef = _useSyncRef2[0],
      dialogRef = _useSyncRef2[1];

  var classes = useStyles();
  var i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  var actionTranslations = (_actionTranslations = {}, _defineProperty(_actionTranslations, MessageBoxActions.Abort, i18nBundle.getText(ABORT)), _defineProperty(_actionTranslations, MessageBoxActions.Cancel, i18nBundle.getText(CANCEL)), _defineProperty(_actionTranslations, MessageBoxActions.Close, i18nBundle.getText(CLOSE)), _defineProperty(_actionTranslations, MessageBoxActions.Delete, i18nBundle.getText(DELETE)), _defineProperty(_actionTranslations, MessageBoxActions.Ignore, i18nBundle.getText(IGNORE)), _defineProperty(_actionTranslations, MessageBoxActions.No, i18nBundle.getText(NO)), _defineProperty(_actionTranslations, MessageBoxActions.OK, i18nBundle.getText(OK)), _defineProperty(_actionTranslations, MessageBoxActions.Retry, i18nBundle.getText(RETRY)), _defineProperty(_actionTranslations, MessageBoxActions.Yes, i18nBundle.getText(YES)), _actionTranslations);

  var titleToRender = function titleToRender() {
    if (titleText) {
      return titleText;
    }

    switch (type) {
      case MessageBoxTypes.Confirm:
        return i18nBundle.getText(CONFIRMATION);

      case MessageBoxTypes.Error:
        return i18nBundle.getText(ERROR);

      case MessageBoxTypes.Information:
        return i18nBundle.getText(INFORMATION);

      case MessageBoxTypes.Success:
        return i18nBundle.getText(SUCCESS);

      case MessageBoxTypes.Warning:
        return i18nBundle.getText(WARNING);

      case MessageBoxTypes.Highlight:
        return i18nBundle.getText(HIGHLIGHT);

      default:
        return null;
    }
  };

  var handleOnClose = function handleOnClose(e) {
    var action = e.target.dataset.action;
    stopPropagation(e);
    onClose(enrichEventWithDetails(e, {
      action: action
    }));
  };

  useEffect(function () {
    if (dialogRef.current) {
      if (open) {
        var _dialogRef$current$sh, _dialogRef$current;

        (_dialogRef$current$sh = (_dialogRef$current = dialogRef.current).show) === null || _dialogRef$current$sh === void 0 ? void 0 : _dialogRef$current$sh.call(_dialogRef$current);
      } else {
        var _dialogRef$current$cl, _dialogRef$current2;

        (_dialogRef$current$cl = (_dialogRef$current2 = dialogRef.current).close) === null || _dialogRef$current$cl === void 0 ? void 0 : _dialogRef$current$cl.call(_dialogRef$current2);
      }
    }
  }, [dialogRef.current, open]);
  var messageBoxClassNames = clsx(classes.messageBox, className);
  var internalActions = getActions(actions, type);

  var _useState = useState(function () {
    return createUniqueIds(internalActions);
  }),
      _useState2 = _slicedToArray(_useState, 2),
      uniqueIds = _useState2[0],
      setUniqueIds = _useState2[1];

  useIsomorphicLayoutEffect(function () {
    setUniqueIds(createUniqueIds(internalActions));
  }, [internalActions.length]);

  var getInitialFocus = function getInitialFocus() {
    var indexOfInitialFocus = internalActions.indexOf(initialFocus);

    if (~indexOfInitialFocus && typeof internalActions[indexOfInitialFocus] === 'string') {
      return "".concat(internalActions[indexOfInitialFocus], "-").concat(uniqueIds[indexOfInitialFocus]);
    }

    return initialFocus;
  };

  var iconToRender = getIcon(icon, type); // @ts-ignore

  rest.footer;
      rest.headerText;
      rest.title;
      rest.onAfterClose;
      var restWithoutOmitted = _objectWithoutProperties(rest, _excluded2);

  return /*#__PURE__*/React.createElement(Dialog, _extends({
    slot: slot,
    ref: componentRef,
    style: style,
    title: tooltip !== null && tooltip !== void 0 ? tooltip : props.title,
    className: messageBoxClassNames,
    onAfterClose: open ? handleOnClose : stopPropagation
  }, restWithoutOmitted, {
    accessibleName: accessibleName !== null && accessibleName !== void 0 ? accessibleName : "".concat((_titleToRender = titleToRender()) !== null && _titleToRender !== void 0 ? _titleToRender : '', " ").concat(typeof children === 'string' ? children : ''),
    initialFocus: getInitialFocus()
  }), !props.header && /*#__PURE__*/React.createElement("header", {
    slot: "header",
    className: classes.header,
    "data-type": type
  }, iconToRender, iconToRender && /*#__PURE__*/React.createElement("span", {
    className: classes.spacer
  }), /*#__PURE__*/React.createElement(Title, {
    level: TitleLevel.H2
  }, titleToRender())), /*#__PURE__*/React.createElement(Text, {
    className: classes.content
  }, children), /*#__PURE__*/React.createElement("footer", {
    slot: "footer",
    className: classes.footer
  }, internalActions.map(function (action, index) {
    var _actionTranslations$a;

    if (typeof action !== 'string' && /*#__PURE__*/isValidElement(action)) {
      var _props, _action$props$dataAc, _action$props;

      return /*#__PURE__*/cloneElement(action, {
        onClick: action !== null && action !== void 0 && (_props = action.props) !== null && _props !== void 0 && _props.onClick ? function (e) {
          var _props2;

          action === null || action === void 0 ? void 0 : (_props2 = action.props) === null || _props2 === void 0 ? void 0 : _props2.onClick(e);
          handleOnClose(e);
        } : handleOnClose,
        'data-action': (_action$props$dataAc = action === null || action === void 0 ? void 0 : (_action$props = action.props) === null || _action$props === void 0 ? void 0 : _action$props['data-action']) !== null && _action$props$dataAc !== void 0 ? _action$props$dataAc : "".concat(index, ": custom action")
      });
    }

    return /*#__PURE__*/React.createElement(Button, {
      id: "".concat(action, "-").concat(uniqueIds[index]),
      key: "".concat(action, "-").concat(index),
      design: emphasizedAction === action ? ButtonDesign.Emphasized : ButtonDesign.Transparent,
      onClick: handleOnClose,
      "data-action": action
    }, (_actionTranslations$a = actionTranslations[action]) !== null && _actionTranslations$a !== void 0 ? _actionTranslations$a : action);
  })));
});
MessageBox.displayName = 'MessageBox';
MessageBox.defaultProps = {
  open: false,
  type: MessageBoxTypes.Confirm,
  emphasizedAction: MessageBoxActions.OK,
  actions: []
};

export { MessageBox };
//# sourceMappingURL=MessageBox.js.map
