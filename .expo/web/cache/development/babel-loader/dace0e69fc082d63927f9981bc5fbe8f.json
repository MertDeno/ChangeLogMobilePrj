{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { CheckBox } from 'react-native-elements';\nimport SearchBarForCheckboxes from \"../components/SearchBarForCheckboxes\";\nimport SelectAllCheckbox from \"../components/SelectAllCheckbox\";\nimport style from \"../css/flatlistItem.component.style.js\";\nimport useChecked from \"../hooks/use-checked\";\nimport useSearch from \"../hooks/use-search\";\nimport useSelectAll from \"../hooks/use-select-all\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { changeLogActions } from \"../redux/change-log-reducers\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction MaterialType(props) {\n  var _ref = [useState([]), useState([])],\n      _ref$ = _slicedToArray(_ref[0], 2),\n      materialTypes = _ref$[0],\n      setMaterialTypes = _ref$[1],\n      _ref$2 = _slicedToArray(_ref[1], 2),\n      filteredMaterialTypes = _ref$2[0],\n      setFilteredMaterialTypes = _ref$2[1];\n\n  var timer;\n  var isCheckedAll = useSelector(function (state) {\n    return state.changeLog.isAllSelected;\n  });\n\n  var _useSelectAll = useSelectAll(materialTypes, filteredMaterialTypes, setFilteredMaterialTypes),\n      handleSelectAll = _useSelectAll.handleSelectAll;\n\n  var _useSearch = useSearch(materialTypes, setFilteredMaterialTypes),\n      materialSearchValue = _useSearch.searchValue,\n      materialSearchHandler = _useSearch.searchHandler;\n\n  var _useChecked = useChecked(materialTypes, setMaterialTypes, filteredMaterialTypes, setFilteredMaterialTypes),\n      handleOnChange = _useChecked.handleOnChange;\n\n  var dispatch = useDispatch();\n  var baseURL = Platform.OS === \"android\" ? \"http://10.0.2.2:8000/EtMtartSet\" : \"https://a2fd-24-133-107-93.eu.ngrok.io//EtMtartSet\";\n\n  var ListViewType = function ListViewType(_ref2) {\n    var item = _ref2.item,\n        index = _ref2.index;\n    return _jsx(CheckBox, {\n      containerStyle: style.flatListItem,\n      onPress: function onPress() {\n        handleOnChange(item.Mtart);\n      },\n      title: item.Mtart + \" - \" + item.Mtbez,\n      checked: item.checked\n    }, item.key);\n  };\n\n  var fetchApi = function fetchApi() {\n    var response, materialTypeResponse, fetchedMaterialType;\n    return _regeneratorRuntime.async(function fetchApi$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(baseURL));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            materialTypeResponse = _context.sent;\n\n            try {\n              fetchedMaterialType = materialTypeResponse.map(function (materialType) {\n                return _objectSpread(_objectSpread({}, materialType), {}, {\n                  mainAttribute: 'Mtart',\n                  checked: false,\n                  key: Math.random().toString()\n                });\n              });\n              dispatch(changeLogActions.setFetchedElements(fetchedMaterialType));\n              dispatch(changeLogActions.setCheckedAllAfterRendering(fetchedMaterialType));\n              setMaterialTypes(fetchedMaterialType);\n              setFilteredMaterialTypes(fetchedMaterialType);\n            } catch (error) {\n              console.log(error);\n            }\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    fetchApi();\n    timer = setTimeout(function () {}, 100);\n    return function () {\n      clearTimeout(timer);\n    };\n  }, [timer]);\n  return _jsxs(View, {\n    flex: 1,\n    children: [_jsx(SearchBarForCheckboxes, {\n      value: materialSearchValue,\n      onSearch: materialSearchHandler\n    }), _jsx(SelectAllCheckbox, {\n      onChecked: handleSelectAll,\n      isChecked: isCheckedAll\n    }), _jsx(FlatList, {\n      data: filteredMaterialTypes,\n      showsHorizontalScrollIndicator: false,\n      alwaysBounceHorizontal: false,\n      renderItem: ListViewType,\n      keyExtractor: function keyExtractor(item, index) {\n        return 'key' + index;\n      }\n    })]\n  });\n}\n\nexport default MaterialType;","map":{"version":3,"names":["React","useEffect","useState","CheckBox","SearchBarForCheckboxes","SelectAllCheckbox","style","useChecked","useSearch","useSelectAll","useDispatch","useSelector","changeLogActions","MaterialType","props","materialTypes","setMaterialTypes","filteredMaterialTypes","setFilteredMaterialTypes","timer","isCheckedAll","state","changeLog","isAllSelected","handleSelectAll","materialSearchValue","searchValue","materialSearchHandler","searchHandler","handleOnChange","dispatch","baseURL","Platform","OS","ListViewType","item","index","flatListItem","Mtart","Mtbez","checked","key","fetchApi","fetch","response","json","materialTypeResponse","fetchedMaterialType","map","materialType","mainAttribute","Math","random","toString","setFetchedElements","setCheckedAllAfterRendering","error","console","log","setTimeout","clearTimeout"],"sources":["C:/Users/T470/Desktop/Programming/MedepiaChangeLogMobileApp/assets/screens/MaterialType.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { FlatList, Platform, View } from 'react-native';\r\nimport { CheckBox} from 'react-native-elements';\r\nimport SearchBarForCheckboxes from '../components/SearchBarForCheckboxes';\r\nimport SelectAllCheckbox from '../components/SelectAllCheckbox';\r\nimport style from '../css/flatlistItem.component.style.js';\r\nimport useChecked from '../hooks/use-checked';\r\nimport useSearch from '../hooks/use-search';\r\nimport useSelectAll from '../hooks/use-select-all';\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { changeLogActions } from '../redux/change-log-reducers';\r\n\r\nfunction MaterialType(props) {\r\n    const [\r\n        [materialTypes, setMaterialTypes], \r\n        [filteredMaterialTypes, setFilteredMaterialTypes]\r\n    ] = [useState([]), useState([])]\r\n    let timer;\r\n\r\n    const isCheckedAll = useSelector(state => state.changeLog.isAllSelected)\r\n    const { handleSelectAll: handleSelectAll } = useSelectAll(materialTypes, filteredMaterialTypes, setFilteredMaterialTypes)\r\n    const { searchValue: materialSearchValue, searchHandler: materialSearchHandler } = useSearch(materialTypes, setFilteredMaterialTypes)\r\n    const { handleOnChange: handleOnChange } = useChecked(materialTypes, setMaterialTypes, filteredMaterialTypes, setFilteredMaterialTypes)\r\n    const dispatch = useDispatch()\r\n\r\n    let baseURL = Platform.OS === \"android\" ? (\"http://10.0.2.2:8000/EtMtartSet\") : (\"https://a2fd-24-133-107-93.eu.ngrok.io//EtMtartSet\")\r\n    \r\n    const ListViewType = ({item, index}) => {\r\n        return (\r\n          // Flat List Item\r\n            <CheckBox \r\n                key={item.key}\r\n                containerStyle={style.flatListItem} \r\n                onPress={() => {handleOnChange(item.Mtart)}} \r\n                title={item.Mtart+\" - \"+item.Mtbez}\r\n                checked={item.checked}/>\r\n        );\r\n    };\r\n\r\n    const fetchApi = async() => {\r\n        const response = await fetch(baseURL)\r\n        const materialTypeResponse = await response.json()\r\n        \r\n        try{\r\n            const fetchedMaterialType = materialTypeResponse.map(materialType => (\r\n                {\r\n                    ...materialType,\r\n                    mainAttribute: 'Mtart',\r\n                    checked: false, \r\n                    key:Math.random().toString()\r\n                }\r\n            ))\r\n            \r\n            dispatch(changeLogActions.setFetchedElements(fetchedMaterialType))\r\n            dispatch(changeLogActions.setCheckedAllAfterRendering(fetchedMaterialType))\r\n            setMaterialTypes(fetchedMaterialType)\r\n            setFilteredMaterialTypes(fetchedMaterialType)\r\n        }\r\n        catch(error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchApi()\r\n        timer = setTimeout(() => {\r\n        }, 100)\r\n\r\n        return () => {\r\n            clearTimeout(timer)\r\n        }\r\n    },[timer])\r\n\r\n    return (        \r\n        <View flex={1}>\r\n            <SearchBarForCheckboxes value={materialSearchValue} onSearch={materialSearchHandler}/>\r\n            <SelectAllCheckbox onChecked={handleSelectAll} isChecked={isCheckedAll}/>            \r\n                <FlatList \r\n                    data={filteredMaterialTypes}\r\n                    showsHorizontalScrollIndicator={false}\r\n                    alwaysBounceHorizontal={false}\r\n                    renderItem={ListViewType}\r\n                    keyExtractor={(item, index) => 'key'+index}>\r\n                </FlatList>\r\n        </View>\r\n    );\r\n}\r\n\r\nexport default MaterialType;"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;AAEA,SAASC,QAAT,QAAwB,uBAAxB;AACA,OAAOC,sBAAP;AACA,OAAOC,iBAAP;AACA,OAAOC,KAAP;AACA,OAAOC,UAAP;AACA,OAAOC,SAAP;AACA,OAAOC,YAAP;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,gBAAT;;;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;EACzB,WAGI,CAACZ,QAAQ,CAAC,EAAD,CAAT,EAAeA,QAAQ,CAAC,EAAD,CAAvB,CAHJ;EAAA;EAAA,IACKa,aADL;EAAA,IACoBC,gBADpB;EAAA;EAAA,IAEKC,qBAFL;EAAA,IAE4BC,wBAF5B;;EAIA,IAAIC,KAAJ;EAEA,IAAMC,YAAY,GAAGT,WAAW,CAAC,UAAAU,KAAK;IAAA,OAAIA,KAAK,CAACC,SAAN,CAAgBC,aAApB;EAAA,CAAN,CAAhC;;EACA,oBAA6Cd,YAAY,CAACM,aAAD,EAAgBE,qBAAhB,EAAuCC,wBAAvC,CAAzD;EAAA,IAAyBM,eAAzB,iBAAQA,eAAR;;EACA,iBAAmFhB,SAAS,CAACO,aAAD,EAAgBG,wBAAhB,CAA5F;EAAA,IAAqBO,mBAArB,cAAQC,WAAR;EAAA,IAAyDC,qBAAzD,cAA0CC,aAA1C;;EACA,kBAA2CrB,UAAU,CAACQ,aAAD,EAAgBC,gBAAhB,EAAkCC,qBAAlC,EAAyDC,wBAAzD,CAArD;EAAA,IAAwBW,cAAxB,eAAQA,cAAR;;EACA,IAAMC,QAAQ,GAAGpB,WAAW,EAA5B;EAEA,IAAIqB,OAAO,GAAGC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,GAA6B,iCAA7B,GAAmE,mDAAjF;;EAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,QAAmB;IAAA,IAAjBC,IAAiB,SAAjBA,IAAiB;IAAA,IAAXC,KAAW,SAAXA,KAAW;IACpC,OAEI,KAAC,QAAD;MAEI,cAAc,EAAE9B,KAAK,CAAC+B,YAF1B;MAGI,OAAO,EAAE,mBAAM;QAACR,cAAc,CAACM,IAAI,CAACG,KAAN,CAAd;MAA2B,CAH/C;MAII,KAAK,EAAEH,IAAI,CAACG,KAAL,GAAW,KAAX,GAAiBH,IAAI,CAACI,KAJjC;MAKI,OAAO,EAAEJ,IAAI,CAACK;IALlB,GACSL,IAAI,CAACM,GADd,CAFJ;EASH,CAVD;;EAYA,IAAMC,QAAQ,GAAG,SAAXA,QAAW;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,iCACUC,KAAK,CAACZ,OAAD,CADf;;UAAA;YACPa,QADO;YAAA;YAAA,iCAEsBA,QAAQ,CAACC,IAAT,EAFtB;;UAAA;YAEPC,oBAFO;;YAIb,IAAG;cACOC,mBADP,GAC6BD,oBAAoB,CAACE,GAArB,CAAyB,UAAAC,YAAY;gBAAA,uCAEtDA,YAFsD;kBAGzDC,aAAa,EAAE,OAH0C;kBAIzDV,OAAO,EAAE,KAJgD;kBAKzDC,GAAG,EAACU,IAAI,CAACC,MAAL,GAAcC,QAAd;gBALqD;cAAA,CAArC,CAD7B;cAUCvB,QAAQ,CAAClB,gBAAgB,CAAC0C,kBAAjB,CAAoCP,mBAApC,CAAD,CAAR;cACAjB,QAAQ,CAAClB,gBAAgB,CAAC2C,2BAAjB,CAA6CR,mBAA7C,CAAD,CAAR;cACA/B,gBAAgB,CAAC+B,mBAAD,CAAhB;cACA7B,wBAAwB,CAAC6B,mBAAD,CAAxB;YACH,CAdD,CAeA,OAAMS,KAAN,EAAa;cACTC,OAAO,CAACC,GAAR,CAAYF,KAAZ;YACH;;UArBY;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAjB;;EAwBAvD,SAAS,CAAC,YAAM;IACZyC,QAAQ;IACRvB,KAAK,GAAGwC,UAAU,CAAC,YAAM,CACxB,CADiB,EACf,GADe,CAAlB;IAGA,OAAO,YAAM;MACTC,YAAY,CAACzC,KAAD,CAAZ;IACH,CAFD;EAGH,CARQ,EAQP,CAACA,KAAD,CARO,CAAT;EAUA,OACI,MAAC,IAAD;IAAM,IAAI,EAAE,CAAZ;IAAA,WACI,KAAC,sBAAD;MAAwB,KAAK,EAAEM,mBAA/B;MAAoD,QAAQ,EAAEE;IAA9D,EADJ,EAEI,KAAC,iBAAD;MAAmB,SAAS,EAAEH,eAA9B;MAA+C,SAAS,EAAEJ;IAA1D,EAFJ,EAGQ,KAAC,QAAD;MACI,IAAI,EAAEH,qBADV;MAEI,8BAA8B,EAAE,KAFpC;MAGI,sBAAsB,EAAE,KAH5B;MAII,UAAU,EAAEiB,YAJhB;MAKI,YAAY,EAAE,sBAACC,IAAD,EAAOC,KAAP;QAAA,OAAiB,QAAMA,KAAvB;MAAA;IALlB,EAHR;EAAA,EADJ;AAaH;;AAED,eAAevB,YAAf"},"metadata":{},"sourceType":"module"}