{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport { CheckBox } from 'react-native-elements';\nimport BaseRow from \"../BaseRow\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function CheckRow(props) {\n  var checked = props.checked,\n      onValueChange = props.onValueChange,\n      checkboxProps = props.checkboxProps;\n\n  var _React$useState = React.useState(checked),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isChecked = _React$useState2[0],\n      setChecked = _React$useState2[1];\n\n  var onChange = function onChange() {\n    setChecked(!isChecked);\n    onValueChange == null ? void 0 : onValueChange(!isChecked);\n  };\n\n  return _jsx(BaseRow, _objectSpread(_objectSpread({}, props), {}, {\n    rightContent: _jsx(CheckBox, _objectSpread(_objectSpread({}, checkboxProps), {}, {\n      checked: isChecked,\n      onPress: onChange\n    }))\n  }));\n}\nexport default CheckRow;","map":{"version":3,"names":["React","CheckBox","BaseRow","CheckRow","props","checked","onValueChange","checkboxProps","useState","isChecked","setChecked","onChange"],"sources":["C:/Users/T470/Desktop/Programming/MedepiaChangeLogMobileApp/node_modules/react-native-settings-view/src/components/CheckRow/index.tsx"],"sourcesContent":["// Dependencies\nimport React from 'react';\nimport { CheckBox, CheckBoxProps } from 'react-native-elements';\n\n// Components\nimport BaseRow, { BaseRowProps } from '../BaseRow';\n\n/**\n * @interface CheckRowProps\n * @description The properties definition of check row.\n */\nexport interface CheckRowProps extends BaseRowProps {\n  /**\n   * Flag to checking the input.\n   * @default false\n   */\n  checked: boolean;\n\n  /**\n   * Callback to communicate when the value changed.\n   */\n  onValueChange?: (isChecked: boolean) => void;\n\n  /**\n   * The properties pass to checkbox.\n   */\n  checkboxProps: CheckBoxProps;\n}\n\n/**\n * @component CheckRow\n * @author Daniel Mejia\n * @description Row component for settings list with a checkbox.\n */\nexport function CheckRow(props: CheckRowProps): React.ReactElement {\n  const { checked, onValueChange, checkboxProps } = props;\n  const [isChecked, setChecked] = React.useState(checked);\n  const onChange = (): void => {\n    setChecked(!isChecked);\n    onValueChange?.(!isChecked);\n  };\n\n  return (\n    <BaseRow\n      {...props}\n      rightContent={(\n        <CheckBox\n          {...checkboxProps}\n          checked={isChecked}\n          onPress={onChange}\n        />\n      )}\n    />\n  );\n}\n\nexport default CheckRow;\n"],"mappings":";;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAwC,uBAAxC;AAGA,OAAOC,OAAP;;AA6BA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAA4D;EACjE,IAAQC,OAAR,GAAkDD,KAAlD,CAAQC,OAAR;EAAA,IAAiBC,aAAjB,GAAkDF,KAAlD,CAAiBE,aAAjB;EAAA,IAAgCC,aAAhC,GAAkDH,KAAlD,CAAgCG,aAAhC;;EACA,sBAAgCP,KAAK,CAACQ,QAAN,CAAeH,OAAf,CAAhC;EAAA;EAAA,IAAOI,SAAP;EAAA,IAAkBC,UAAlB;;EACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAY;IAC3BD,UAAU,CAAC,CAACD,SAAF,CAAV;IACAH,aAAa,QAAb,YAAAA,aAAa,CAAG,CAACG,SAAJ,CAAb;EACD,CAHD;;EAKA,OACE,KAAC,OAAD,kCACML,KADN;IAEE,YAAY,EACV,KAAC,QAAD,kCACMG,aADN;MAEE,OAAO,EAAEE,SAFX;MAGE,OAAO,EAAEE;IAHX;EAHJ,GADF;AAYD;AAED,eAAeR,QAAf"},"metadata":{},"sourceType":"module"}