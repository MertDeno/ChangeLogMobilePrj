{"ast":null,"code":"import React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport PropTypes from 'prop-types';\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function Year(props) {\n  var year = props.year,\n      currentMonth = props.currentMonth,\n      currentYear = props.currentYear,\n      styles = props.styles,\n      onSelectYear = props.onSelectYear,\n      textStyle = props.textStyle,\n      minDate = props.minDate,\n      maxDate = props.maxDate;\n  var yearOutOfRange;\n  var yearIsBeforeMin = false;\n  var yearIsAfterMax = false;\n  var yearIsDisabled = false;\n\n  if (maxDate) {\n    yearIsAfterMax = year > maxDate.year();\n  }\n\n  if (minDate) {\n    yearIsBeforeMin = year < minDate.year();\n  }\n\n  yearOutOfRange = yearIsAfterMax || yearIsBeforeMin || yearIsDisabled;\n\n  var onSelect = function onSelect() {\n    var month = currentMonth;\n    var currentMonthYear = moment({\n      year: currentYear,\n      month: month\n    });\n\n    if (maxDate && currentMonthYear.isAfter(maxDate, 'month')) {\n      month = maxDate.month();\n    }\n\n    if (minDate && currentMonthYear.isBefore(minDate, 'month')) {\n      month = minDate.month();\n    }\n\n    onSelectYear({\n      month: month,\n      year: year\n    });\n  };\n\n  return _jsx(View, {\n    style: [styles.yearContainer],\n    children: !yearOutOfRange ? _jsx(TouchableOpacity, {\n      onPress: onSelect,\n      children: _jsx(Text, {\n        style: [styles.yearText, textStyle],\n        children: year\n      })\n    }) : _jsx(Text, {\n      style: [textStyle, styles.disabledText],\n      children: year\n    })\n  });\n}\nYear.propTypes = {\n  styles: PropTypes.shape({}),\n  year: PropTypes.number,\n  onSelectYear: PropTypes.func\n};","map":{"version":3,"names":["React","PropTypes","moment","Year","props","year","currentMonth","currentYear","styles","onSelectYear","textStyle","minDate","maxDate","yearOutOfRange","yearIsBeforeMin","yearIsAfterMax","yearIsDisabled","onSelect","month","currentMonthYear","isAfter","isBefore","yearContainer","yearText","disabledText","propTypes","shape","number","func"],"sources":["C:/Users/T470/Desktop/Programming/MedepiaChangeLogMobileApp/node_modules/react-native-calendar-picker/CalendarPicker/Year.js"],"sourcesContent":["import React from 'react';\r\nimport {\r\n  View,\r\n  Text,\r\n  TouchableOpacity\r\n} from 'react-native';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport default function Year(props) {\r\n  const {\r\n    year,\r\n    currentMonth,\r\n    currentYear,\r\n    styles,\r\n    onSelectYear,\r\n    textStyle,\r\n    minDate,\r\n    maxDate,\r\n  } = props;\r\n\r\n  let yearOutOfRange;\r\n  let yearIsBeforeMin = false;\r\n  let yearIsAfterMax = false;\r\n  let yearIsDisabled = false;\r\n\r\n  // Check whether year is outside of min/max range.\r\n  if (maxDate) {\r\n    yearIsAfterMax = year > maxDate.year();\r\n  }\r\n  if (minDate) {\r\n    yearIsBeforeMin = year < minDate.year();\r\n  }\r\n\r\n  // ToDo: disabledYears props to disable years separate from disabledDates\r\n\r\n  yearOutOfRange = yearIsAfterMax || yearIsBeforeMin || yearIsDisabled;\r\n\r\n  const onSelect = () => {\r\n    // Guard against navigating to months beyond min/max dates.\r\n    let month = currentMonth;\r\n    let currentMonthYear = moment({year: currentYear, month});\r\n    if (maxDate && currentMonthYear.isAfter(maxDate, 'month')) {\r\n      month = maxDate.month();\r\n    }\r\n    if (minDate && currentMonthYear.isBefore(minDate, 'month')) {\r\n      month = minDate.month();\r\n    }\r\n    onSelectYear({month, year});\r\n  };\r\n\r\n  return (\r\n    <View style={[styles.yearContainer]}>\r\n      { !yearOutOfRange ?\r\n        <TouchableOpacity\r\n          onPress={onSelect}>\r\n          <Text style={[styles.yearText, textStyle]}>\r\n            { year }\r\n          </Text>\r\n        </TouchableOpacity>\r\n        :\r\n        <Text style={[textStyle, styles.disabledText]}>\r\n          { year }\r\n        </Text>\r\n      }\r\n    </View>\r\n  );\r\n}\r\n\r\nYear.propTypes = {\r\n  styles: PropTypes.shape({}),\r\n  year: PropTypes.number,\r\n  onSelectYear: PropTypes.func,\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAMA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;EAClC,IACEC,IADF,GASID,KATJ,CACEC,IADF;EAAA,IAEEC,YAFF,GASIF,KATJ,CAEEE,YAFF;EAAA,IAGEC,WAHF,GASIH,KATJ,CAGEG,WAHF;EAAA,IAIEC,MAJF,GASIJ,KATJ,CAIEI,MAJF;EAAA,IAKEC,YALF,GASIL,KATJ,CAKEK,YALF;EAAA,IAMEC,SANF,GASIN,KATJ,CAMEM,SANF;EAAA,IAOEC,OAPF,GASIP,KATJ,CAOEO,OAPF;EAAA,IAQEC,OARF,GASIR,KATJ,CAQEQ,OARF;EAWA,IAAIC,cAAJ;EACA,IAAIC,eAAe,GAAG,KAAtB;EACA,IAAIC,cAAc,GAAG,KAArB;EACA,IAAIC,cAAc,GAAG,KAArB;;EAGA,IAAIJ,OAAJ,EAAa;IACXG,cAAc,GAAGV,IAAI,GAAGO,OAAO,CAACP,IAAR,EAAxB;EACD;;EACD,IAAIM,OAAJ,EAAa;IACXG,eAAe,GAAGT,IAAI,GAAGM,OAAO,CAACN,IAAR,EAAzB;EACD;;EAIDQ,cAAc,GAAGE,cAAc,IAAID,eAAlB,IAAqCE,cAAtD;;EAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;IAErB,IAAIC,KAAK,GAAGZ,YAAZ;IACA,IAAIa,gBAAgB,GAAGjB,MAAM,CAAC;MAACG,IAAI,EAAEE,WAAP;MAAoBW,KAAK,EAALA;IAApB,CAAD,CAA7B;;IACA,IAAIN,OAAO,IAAIO,gBAAgB,CAACC,OAAjB,CAAyBR,OAAzB,EAAkC,OAAlC,CAAf,EAA2D;MACzDM,KAAK,GAAGN,OAAO,CAACM,KAAR,EAAR;IACD;;IACD,IAAIP,OAAO,IAAIQ,gBAAgB,CAACE,QAAjB,CAA0BV,OAA1B,EAAmC,OAAnC,CAAf,EAA4D;MAC1DO,KAAK,GAAGP,OAAO,CAACO,KAAR,EAAR;IACD;;IACDT,YAAY,CAAC;MAACS,KAAK,EAALA,KAAD;MAAQb,IAAI,EAAJA;IAAR,CAAD,CAAZ;EACD,CAXD;;EAaA,OACE,KAAC,IAAD;IAAM,KAAK,EAAE,CAACG,MAAM,CAACc,aAAR,CAAb;IAAA,UACI,CAACT,cAAD,GACA,KAAC,gBAAD;MACE,OAAO,EAAEI,QADX;MAAA,UAEE,KAAC,IAAD;QAAM,KAAK,EAAE,CAACT,MAAM,CAACe,QAAR,EAAkBb,SAAlB,CAAb;QAAA,UACIL;MADJ;IAFF,EADA,GAQA,KAAC,IAAD;MAAM,KAAK,EAAE,CAACK,SAAD,EAAYF,MAAM,CAACgB,YAAnB,CAAb;MAAA,UACInB;IADJ;EATJ,EADF;AAgBD;AAEDF,IAAI,CAACsB,SAAL,GAAiB;EACfjB,MAAM,EAAEP,SAAS,CAACyB,KAAV,CAAgB,EAAhB,CADO;EAEfrB,IAAI,EAAEJ,SAAS,CAAC0B,MAFD;EAGflB,YAAY,EAAER,SAAS,CAAC2B;AAHT,CAAjB"},"metadata":{},"sourceType":"module"}