{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { CheckBox, SearchBar } from \"react-native-elements\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction PlantsPage() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      filteredData = _useState2[0],\n      setFilteredData = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      plantData = _useState4[0],\n      setPlantData = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      selectData = _useState6[0],\n      setSelectData = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      checkedPlant = _useState8[0],\n      setCheckedPlant = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      isCheckedAll = _useState10[0],\n      setIsCheckedAll = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      isLoading = _useState12[0],\n      setIsLoading = _useState12[1];\n\n  var _useState13 = useState(\"\"),\n      _useState14 = _slicedToArray(_useState13, 2),\n      search = _useState14[0],\n      setSearch = _useState14[1];\n\n  var baseURL = Platform.OS === \"android\" ? \"http://10.0.2.2:8000/EtWerksSet\" : process.env.LINK + \"/EtWerksSet\";\n\n  var handleOnChange = function handleOnChange(plant) {\n    plantData.forEach(function (item) {\n      if (plant === item.Werks) {\n        item.checked = !item.checked;\n      } else {\n        return item.checked;\n      }\n    });\n    setCheckedPlant(plantData.filter(function (item) {\n      return item.checked;\n    }));\n    setSelectData(plantData.filter(function (item) {\n      return item.checked;\n    }));\n    setFilteredData(plantData);\n  };\n\n  var ListViewType = function ListViewType(_ref) {\n    var item = _ref.item,\n        index = _ref.index;\n    return _jsx(CheckBox, {\n      containerStyle: styles.flatListItem,\n      onPress: function onPress() {\n        handleOnChange(item.Werks);\n      },\n      title: item.Werks + \" - \" + item.Name1,\n      checked: item.checked\n    });\n  };\n\n  var fetchApi = function fetchApi() {\n    var plantRes;\n    return _regeneratorRuntime.async(function fetchApi$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.get(baseURL));\n\n          case 3:\n            plantRes = _context.sent;\n            setFilteredData(plantRes.data.map(function (data) {\n              return _objectSpread(_objectSpread({}, data), {}, {\n                checked: false\n              });\n            }));\n            setPlantData(plantRes.data.map(function (data) {\n              return _objectSpread(_objectSpread({}, data), {}, {\n                checked: false\n              });\n            }));\n            setSelectData(plantData);\n            _context.next = 12;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 9]], Promise);\n  };\n\n  useEffect(function () {\n    fetchApi();\n  }, []);\n\n  var updateSearch = function updateSearch(search) {\n    if (search === \"\") {\n      console.log(\"null\");\n      setIsCheckedAll(false);\n      setFilteredData(plantData);\n      setSelectData(filteredData);\n    } else {\n      setSearch(search);\n      var newData = plantData.filter(function (item) {\n        return item.Werks.includes(search.toUpperCase()) || item.Name1.includes(search.toUpperCase());\n      });\n      setFilteredData(newData);\n      setSelectData(filteredData);\n    }\n  };\n\n  var handleSelectAll = function handleSelectAll() {\n    isCheckedAll === false ? filteredData.map(function (item) {\n      if (isCheckedAll === true) {\n        if (item.checked === true) {\n          item.checked = !item.checked;\n          setIsCheckedAll(false);\n        }\n      } else {\n        if (item.checked === false) {\n          item.checked = !item.checked;\n          setIsCheckedAll(true);\n        }\n      }\n    }) : filteredData.map(function (item) {\n      if (isCheckedAll === true) {\n        if (item.checked === true) {\n          item.checked = !item.checked;\n          setIsCheckedAll(false);\n        }\n      } else {\n        if (item.checked === false) {\n          item.checked = !item.checked;\n          setIsCheckedAll(true);\n        }\n      }\n    });\n    setCheckedPlant(plantData.filter(function (item) {\n      return item.checked;\n    }));\n    setSelectData(filteredData);\n  };\n\n  return _jsxs(View, {\n    flex: 1,\n    children: [_jsx(SearchBar, {\n      value: search,\n      placeholder: \" Search...\",\n      lightTheme: true,\n      round: true,\n      onChangeText: updateSearch,\n      inputStyle: {\n        backgroundColor: \"#fff\",\n        borderRadius: 15\n      },\n      containerStyle: {\n        backgroundColor: \"rgb(247,247,247)\"\n      },\n      inputContainerStyle: {\n        backgroundColor: \"rgb(247,247,247)\"\n      }\n    }), _jsx(CheckBox, {\n      title: \"Select All\",\n      onPress: handleSelectAll,\n      checked: isCheckedAll,\n      containerStyle: styles.flatListItem\n    }), isLoading ? _jsx(View, {\n      style: {\n        flex: 3,\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      children: _jsx(ActivityIndicator, {\n        size: \"large\"\n      })\n    }) : _jsx(FlatList, {\n      data: filteredData,\n      showsHorizontalScrollIndicator: false,\n      keyExtractor: function keyExtractor(item, index) {\n        return \"key\" + index;\n      },\n      renderItem: ListViewType\n    })]\n  });\n}\n\nexport default PlantsPage;\nvar styles = StyleSheet.create({\n  flatListItem: {\n    backgroundColor: \"#fff\",\n    borderRadius: 20,\n    padding: 20,\n    margin: 5\n  }\n});","map":{"version":3,"sources":["C:/Users/medepia/Desktop/React Native Projects/CR App/ChangeLogMobilePrj/assets/screens/PlantsPage.js"],"names":["axios","React","useEffect","useState","CheckBox","SearchBar","PlantsPage","filteredData","setFilteredData","plantData","setPlantData","selectData","setSelectData","checkedPlant","setCheckedPlant","isCheckedAll","setIsCheckedAll","isLoading","setIsLoading","search","setSearch","baseURL","Platform","OS","process","env","LINK","handleOnChange","plant","forEach","item","Werks","checked","filter","ListViewType","index","styles","flatListItem","Name1","fetchApi","get","plantRes","data","map","console","log","updateSearch","newData","includes","toUpperCase","handleSelectAll","backgroundColor","borderRadius","flex","justifyContent","alignItems","StyleSheet","create","padding","margin"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {\r\n  View,\r\n  ActivityIndicator,\r\n  StyleSheet,\r\n  Platform,\r\n  FlatList,\r\n} from \"react-native\";\r\nimport { CheckBox, SearchBar } from \"react-native-elements\";\r\nfunction PlantsPage() {\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [plantData, setPlantData] = useState([]);\r\n  const [selectData, setSelectData] = useState([]);\r\n\r\n  const [checkedPlant, setCheckedPlant] = useState();\r\n  const [isCheckedAll, setIsCheckedAll] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  var baseURL =\r\n    Platform.OS === \"android\"\r\n      ? \"http://10.0.2.2:8000/EtWerksSet\"\r\n      : process.env.LINK + \"/EtWerksSet\";\r\n\r\n  const handleOnChange = (plant) => {\r\n    plantData.forEach((item) => {\r\n      if (plant === item.Werks) {\r\n        item.checked = !item.checked;\r\n      } else {\r\n        return item.checked;\r\n      }\r\n    });\r\n    setCheckedPlant(plantData.filter((item) => item.checked));\r\n    setSelectData(plantData.filter((item) => item.checked));\r\n    setFilteredData(plantData);\r\n  };\r\n  const ListViewType = ({ item, index }) => {\r\n    return (\r\n      // Flat List Item\r\n      <CheckBox\r\n        containerStyle={styles.flatListItem}\r\n        onPress={() => {\r\n          handleOnChange(item.Werks);\r\n        }}\r\n        title={item.Werks + \" - \" + item.Name1}\r\n        checked={item.checked}\r\n      />\r\n    );\r\n  };\r\n  const fetchApi = async () => {\r\n    try {\r\n      const plantRes = await axios.get(baseURL);\r\n      setFilteredData(\r\n        plantRes.data.map((data) => ({ ...data, checked: false }))\r\n      );\r\n      setPlantData(plantRes.data.map((data) => ({ ...data, checked: false })));\r\n      setSelectData(plantData);\r\n      /*setIsLoading(true)\r\n            setTimeout(() => {\r\n                setIsLoading(false)\r\n            }, 1000)*/\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchApi();\r\n  }, []);\r\n  const updateSearch = (search) => {\r\n    if (search === \"\") {\r\n      console.log(\"null\");\r\n      setIsCheckedAll(false);\r\n      setFilteredData(plantData);\r\n      setSelectData(filteredData);\r\n    } else {\r\n      setSearch(search);\r\n      const newData = plantData.filter((item) => {\r\n        return (\r\n          item.Werks.includes(search.toUpperCase()) ||\r\n          item.Name1.includes(search.toUpperCase())\r\n        );\r\n      });\r\n      setFilteredData(newData);\r\n      setSelectData(filteredData);\r\n    }\r\n  };\r\n  const handleSelectAll = () => {\r\n    isCheckedAll === false\r\n      ? filteredData.map((item) => {\r\n          if (isCheckedAll === true) {\r\n            if (item.checked === true) {\r\n              item.checked = !item.checked;\r\n              setIsCheckedAll(false);\r\n            }\r\n          } else {\r\n            if (item.checked === false) {\r\n              item.checked = !item.checked;\r\n              setIsCheckedAll(true);\r\n            }\r\n          }\r\n        })\r\n      : filteredData.map((item) => {\r\n          if (isCheckedAll === true) {\r\n            if (item.checked === true) {\r\n              item.checked = !item.checked;\r\n              setIsCheckedAll(false);\r\n            }\r\n          } else {\r\n            if (item.checked === false) {\r\n              item.checked = !item.checked;\r\n              setIsCheckedAll(true);\r\n            }\r\n          }\r\n        });\r\n\r\n    setCheckedPlant(plantData.filter((item) => item.checked));\r\n    setSelectData(filteredData);\r\n  };\r\n  return (\r\n    <View flex={1}>\r\n      <SearchBar\r\n        value={search}\r\n        placeholder=\" Search...\"\r\n        lightTheme\r\n        round\r\n        onChangeText={updateSearch}\r\n        inputStyle={{ backgroundColor: \"#fff\", borderRadius: 15 }}\r\n        containerStyle={{ backgroundColor: \"rgb(247,247,247)\" }}\r\n        inputContainerStyle={{ backgroundColor: \"rgb(247,247,247)\" }}\r\n      />\r\n      <CheckBox\r\n        title={\"Select All\"}\r\n        onPress={handleSelectAll}\r\n        checked={isCheckedAll}\r\n        containerStyle={styles.flatListItem}\r\n      />\r\n      {isLoading ? (\r\n        <View\r\n          style={{ flex: 3, justifyContent: \"center\", alignItems: \"center\" }}\r\n        >\r\n          <ActivityIndicator size={\"large\"} />\r\n        </View>\r\n      ) : (\r\n        <FlatList\r\n          data={filteredData}\r\n          showsHorizontalScrollIndicator={false}\r\n          keyExtractor={(item, index) => \"key\" + index}\r\n          renderItem={ListViewType}\r\n        ></FlatList>\r\n      )}\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default PlantsPage;\r\nconst styles = StyleSheet.create({\r\n  flatListItem: {\r\n    backgroundColor: \"#fff\",\r\n    borderRadius: 20,\r\n    padding: 20,\r\n    margin: 5,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}