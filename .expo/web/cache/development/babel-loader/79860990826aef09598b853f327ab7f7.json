{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport { Slider } from 'react-native-elements';\nimport BaseRow from \"../BaseRow\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function SliderRow(props) {\n  var value = props.value,\n      onValueChange = props.onValueChange,\n      sliderProps = props.sliderProps;\n\n  var _React$useState = React.useState(value),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      sliderValue = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  var onChange = function onChange(newValue) {\n    setValue(newValue);\n    onValueChange == null ? void 0 : onValueChange(newValue);\n  };\n\n  return _jsx(BaseRow, _objectSpread(_objectSpread({}, props), {}, {\n    children: _jsx(Slider, _objectSpread(_objectSpread({}, sliderProps), {}, {\n      value: sliderValue,\n      onValueChange: onChange\n    }))\n  }));\n}\nexport default SliderRow;","map":{"version":3,"names":["React","Slider","BaseRow","SliderRow","props","value","onValueChange","sliderProps","useState","sliderValue","setValue","onChange","newValue"],"sources":["C:/Users/T470/Desktop/Programming/MedepiaChangeLogMobileApp/node_modules/react-native-settings-view/src/components/SliderRow/index.tsx"],"sourcesContent":["// Dependencies\nimport React from 'react';\nimport { Slider, SliderProps } from 'react-native-elements';\n\n// Components\nimport BaseRow, { BaseRowProps } from '../BaseRow';\n\n/**\n * @interface SliderRowProps\n * @description The properties definition of slider row.\n */\nexport interface SliderRowProps extends BaseRowProps {\n  /**\n   * Flag to checking the input.\n   */\n  value: number;\n\n  /**\n   * Callback to communicate when the value changed.\n   */\n  onValueChange?: (newValue: number) => void;\n\n  /**\n   * The properties pass to slider.\n   */\n  sliderProps: SliderProps;\n}\n\n/**\n * @component SliderRow\n * @author Daniel Mejia\n * @description Row component for settings list with a slider.\n */\nexport function SliderRow(props: SliderRowProps): React.ReactElement {\n  const { value, onValueChange, sliderProps } = props;\n  const [sliderValue, setValue] = React.useState(value);\n  const onChange = (newValue: number): void => {\n    setValue(newValue);\n    onValueChange?.(newValue);\n  };\n\n  return (\n    <BaseRow {...props}>\n      <Slider\n        {...sliderProps}\n        value={sliderValue}\n        onValueChange={onChange}\n      />\n    </BaseRow>\n  );\n}\n\nexport default SliderRow;\n"],"mappings":";;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAoC,uBAApC;AAGA,OAAOC,OAAP;;AA4BA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA8D;EACnE,IAAQC,KAAR,GAA8CD,KAA9C,CAAQC,KAAR;EAAA,IAAeC,aAAf,GAA8CF,KAA9C,CAAeE,aAAf;EAAA,IAA8BC,WAA9B,GAA8CH,KAA9C,CAA8BG,WAA9B;;EACA,sBAAgCP,KAAK,CAACQ,QAAN,CAAeH,KAAf,CAAhC;EAAA;EAAA,IAAOI,WAAP;EAAA,IAAoBC,QAApB;;EACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,QAAD,EAA4B;IAC3CF,QAAQ,CAACE,QAAD,CAAR;IACAN,aAAa,QAAb,YAAAA,aAAa,CAAGM,QAAH,CAAb;EACD,CAHD;;EAKA,OACE,KAAC,OAAD,kCAAaR,KAAb;IAAA,UACE,KAAC,MAAD,kCACMG,WADN;MAEE,KAAK,EAAEE,WAFT;MAGE,aAAa,EAAEE;IAHjB;EADF,GADF;AASD;AAED,eAAeR,SAAf"},"metadata":{},"sourceType":"module"}