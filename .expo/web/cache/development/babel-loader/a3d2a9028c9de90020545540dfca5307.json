{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport axios from \"axios\";\nimport React, { Component, useEffect, useState } from \"react\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { CheckBox, SearchBar } from \"react-native-elements\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction MaterialType(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      matTypeData = _useState2[0],\n      setMatTypeData = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      filteredData = _useState4[0],\n      setFilteredData = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      checkedMatType = _useState6[0],\n      setCheckedMatType = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isLoading = _useState8[0],\n      setIsLoading = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      search = _useState10[0],\n      setSearch = _useState10[1];\n\n  var baseURL = Platform.OS === \"android\" ? \"http://10.0.2.2:8000/EtMtartSet\" : process.env.LINK + \"/EtMtartSet\";\n\n  var handleOnChange = function handleOnChange(matType) {\n    matTypeData.forEach(function (item) {\n      if (matType === item.Mtart) {\n        item.checked = !item.checked;\n        return item.checked;\n      } else {\n        item.checked = item.checked;\n        return item.checked;\n      }\n    });\n    setCheckedMatType(matTypeData.filter(function (item) {\n      return item.checked;\n    }));\n    setFilteredData(matTypeData);\n  };\n\n  var ListViewType = function ListViewType(_ref) {\n    var item = _ref.item,\n        index = _ref.index;\n    return _jsx(CheckBox, {\n      containerStyle: styles.flatListItem,\n      onPress: function onPress() {\n        handleOnChange(item.Mtart);\n      },\n      title: item.Mtart + \" - \" + item.Mtbez,\n      checked: item.checked\n    });\n  };\n\n  var fetchApi = function fetchApi() {\n    var matTypeRes;\n    return _regeneratorRuntime.async(function fetchApi$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(axios.get(baseURL));\n\n          case 3:\n            matTypeRes = _context.sent;\n            setMatTypeData(matTypeRes.data.map(function (data) {\n              return _objectSpread(_objectSpread({}, data), {}, {\n                checked: false\n              });\n            }));\n            setFilteredData(matTypeRes.data.map(function (data) {\n              return _objectSpread(_objectSpread({}, data), {}, {\n                checked: false\n              });\n            }));\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  useEffect(function () {\n    fetchApi();\n  }, []);\n\n  var updateSearch = function updateSearch(search) {\n    setSearch(search);\n    var newData = matTypeData.filter(function (item) {\n      return item.Mtart.includes(search.toUpperCase()) || item.Mtbez.includes(search.toUpperCase());\n    });\n    setFilteredData(newData);\n  };\n\n  var handleSelectAll = function handleSelectAll() {\n    matTypeData.map(function (item) {\n      item.checked = !item.checked;\n    });\n    setCheckedMatType(matTypeData.filter(function (item) {\n      return item.checked;\n    }));\n    setFilteredData(matTypeData);\n  };\n\n  return _jsxs(View, {\n    flex: 1,\n    children: [_jsx(SearchBar, {\n      value: search,\n      inputStyle: {\n        backgroundColor: \"#fff\",\n        borderRadius: 15\n      },\n      containerStyle: {\n        backgroundColor: \"rgb(247,247,247)\"\n      },\n      onChangeText: updateSearch,\n      placeholder: \"Search..\",\n      lightTheme: true,\n      round: true,\n      inputContainerStyle: {\n        backgroundColor: \"rgb(247,247,247)\"\n      }\n    }), _jsx(CheckBox, {\n      containerStyle: styles.flatListItem,\n      title: \"Select All\",\n      onPress: handleSelectAll,\n      checked: checkedMatType\n    }), isLoading ? _jsx(View, {\n      style: {\n        flex: 3,\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      children: _jsx(ActivityIndicator, {\n        size: \"large\"\n      })\n    }) : _jsx(FlatList, {\n      data: filteredData,\n      showsHorizontalScrollIndicator: false,\n      keyExtractor: function keyExtractor(item, index) {\n        return \"key\" + index;\n      },\n      renderItem: ListViewType\n    })]\n  });\n}\n\nexport default MaterialType;\nvar styles = StyleSheet.create({\n  flatListItem: {\n    backgroundColor: \"#fff\",\n    borderRadius: 20,\n    padding: 20,\n    margin: 5\n  }\n});","map":{"version":3,"sources":["C:/Users/medepia/Desktop/React Native Projects/CR App/ChangeLogMobilePrj/assets/screens/MaterialType.js"],"names":["axios","React","Component","useEffect","useState","CheckBox","SearchBar","MaterialType","props","matTypeData","setMatTypeData","filteredData","setFilteredData","checkedMatType","setCheckedMatType","isLoading","setIsLoading","search","setSearch","baseURL","Platform","OS","process","env","LINK","handleOnChange","matType","forEach","item","Mtart","checked","filter","ListViewType","index","styles","flatListItem","Mtbez","fetchApi","get","matTypeRes","data","map","console","log","updateSearch","newData","includes","toUpperCase","handleSelectAll","backgroundColor","borderRadius","flex","justifyContent","alignItems","StyleSheet","create","padding","margin"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport React, { Component, useEffect, useState } from \"react\";\r\nimport {\r\n  ActivityIndicator,\r\n  FlatList,\r\n  Platform,\r\n  StyleSheet,\r\n  View,\r\n} from \"react-native\";\r\nimport { CheckBox, SearchBar } from \"react-native-elements\";\r\n\r\nfunction MaterialType(props) {\r\n  const [matTypeData, setMatTypeData] = useState([]);\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [checkedMatType, setCheckedMatType] = useState();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [search, setSearch] = useState(\"\");\r\n  var baseURL =\r\n    Platform.OS === \"android\"\r\n      ? \"http://10.0.2.2:8000/EtMtartSet\"\r\n      : process.env.LINK + \"/EtMtartSet\";\r\n\r\n  const handleOnChange = (matType) => {\r\n    matTypeData.forEach((item) => {\r\n      if (matType === item.Mtart) {\r\n        item.checked = !item.checked;\r\n        return item.checked;\r\n      } else {\r\n        item.checked = item.checked;\r\n        return item.checked;\r\n      }\r\n    });\r\n\r\n    setCheckedMatType(matTypeData.filter((item) => item.checked));\r\n    setFilteredData(matTypeData);\r\n  };\r\n\r\n  const ListViewType = ({ item, index }) => {\r\n    return (\r\n      // Flat List Item\r\n      <CheckBox\r\n        containerStyle={styles.flatListItem}\r\n        onPress={() => {\r\n          handleOnChange(item.Mtart);\r\n        }}\r\n        title={item.Mtart + \" - \" + item.Mtbez}\r\n        checked={item.checked}\r\n      />\r\n    );\r\n  };\r\n\r\n  const fetchApi = async () => {\r\n    try {\r\n      const matTypeRes = await axios.get(baseURL);\r\n      setMatTypeData(\r\n        matTypeRes.data.map((data) => ({ ...data, checked: false }))\r\n      );\r\n      //            setMatTypeData(matTypeRes.data)\r\n      setFilteredData(\r\n        matTypeRes.data.map((data) => ({ ...data, checked: false }))\r\n      );\r\n      /*setIsLoading(true)\r\n            setTimeout(() => {\r\n                setIsLoading(false)\r\n            }, 1000)*/\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchApi();\r\n  }, []);\r\n\r\n  const updateSearch = (search) => {\r\n    setSearch(search);\r\n    const newData = matTypeData.filter((item) => {\r\n      return (\r\n        item.Mtart.includes(search.toUpperCase()) ||\r\n        item.Mtbez.includes(search.toUpperCase())\r\n      );\r\n    });\r\n    setFilteredData(newData);\r\n  };\r\n\r\n  const handleSelectAll = () => {\r\n    matTypeData.map((item) => {\r\n      item.checked = !item.checked;\r\n    });\r\n\r\n    setCheckedMatType(matTypeData.filter((item) => item.checked));\r\n    setFilteredData(matTypeData);\r\n  };\r\n\r\n  return (\r\n    <View flex={1}>\r\n      <SearchBar\r\n        value={search}\r\n        inputStyle={{ backgroundColor: \"#fff\", borderRadius: 15 }}\r\n        containerStyle={{ backgroundColor: \"rgb(247,247,247)\" }}\r\n        onChangeText={updateSearch}\r\n        placeholder=\"Search..\"\r\n        lightTheme\r\n        round\r\n        inputContainerStyle={{ backgroundColor: \"rgb(247,247,247)\" }}\r\n      />\r\n      <CheckBox\r\n        containerStyle={styles.flatListItem}\r\n        title=\"Select All\"\r\n        onPress={handleSelectAll}\r\n        checked={checkedMatType}\r\n      ></CheckBox>\r\n      {isLoading ? (\r\n        <View\r\n          style={{ flex: 3, justifyContent: \"center\", alignItems: \"center\" }}\r\n        >\r\n          <ActivityIndicator size={\"large\"} />\r\n        </View>\r\n      ) : (\r\n        <FlatList\r\n          data={filteredData}\r\n          showsHorizontalScrollIndicator={false}\r\n          keyExtractor={(item, index) => \"key\" + index}\r\n          renderItem={ListViewType}\r\n        ></FlatList>\r\n      )}\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default MaterialType;\r\n\r\nconst styles = StyleSheet.create({\r\n  flatListItem: {\r\n    backgroundColor: \"#fff\",\r\n    borderRadius: 20,\r\n    padding: 20,\r\n    margin: 5,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}