{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { CheckBox } from \"react-native-elements\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport SearchBarForCheckboxes from \"../components/SearchBarForCheckboxes\";\nimport SelectAllCheckbox from \"../components/SelectAllCheckbox\";\nimport useChecked from \"../hooks/use-checked\";\nimport useSearch from \"../hooks/use-search\";\nimport useSelectAll from \"../hooks/use-select-all\";\nimport style from \"../css/flatlistItem.component.style.js\";\nimport { changeLogActions } from \"../redux/change-log-reducers\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nfunction PlantsPage() {\n  var _ref = [useState([]), useState([])],\n      _ref$ = _slicedToArray(_ref[0], 2),\n      filteredPlants = _ref$[0],\n      setFilteredPlants = _ref$[1],\n      _ref$2 = _slicedToArray(_ref[1], 2),\n      plants = _ref$2[0],\n      setPlants = _ref$2[1];\n\n  var isCheckedAll = useSelector(function (state) {\n    return state.changeLog.isAllSelected;\n  });\n\n  var _useChecked = useChecked(plants, setPlants, filteredPlants, setFilteredPlants),\n      handleOnChange = _useChecked.handleOnChange;\n\n  var _useSelectAll = useSelectAll(plants, filteredPlants, setFilteredPlants),\n      handleSelectAll = _useSelectAll.handleSelectAll;\n\n  var _useSearch = useSearch(plants, setFilteredPlants),\n      plantSearchHandler = _useSearch.searchHandler,\n      plantSearchValue = _useSearch.searchValue;\n\n  var dispatch = useDispatch();\n  var baseURL = Platform.OS === \"android\" ? \"http://10.0.2.2:8000/EtWerksSet\" : \"https://93c3-24-133-107-93.eu.ngrok.io//EtWerksSet\";\n\n  var ListViewType = function ListViewType(_ref2) {\n    var item = _ref2.item,\n        index = _ref2.index;\n    return _jsx(CheckBox, {\n      containerStyle: style.flatListItem,\n      onPress: function onPress() {\n        handleOnChange(item.Werks);\n      },\n      title: item.Werks + \" - \" + item.Name1,\n      checked: item.checked\n    });\n  };\n\n  var fetchApi = function fetchApi() {\n    var response, plantsResponse, fetchedPlants;\n    return _regeneratorRuntime.async(function fetchApi$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(baseURL));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            plantsResponse = _context.sent;\n\n            try {\n              fetchedPlants = plantsResponse.map(function (plantItem) {\n                return _objectSpread(_objectSpread({}, plantItem), {}, {\n                  mainAttribute: 'Werks',\n                  checked: false,\n                  key: Math.random().toString()\n                });\n              });\n              dispatch(changeLogActions.setFetchedElements(fetchedPlants));\n              dispatch(changeLogActions.setCheckedAllAfterRendering(fetchedPlants));\n              setFilteredPlants(fetchedPlants);\n              setPlants(fetchedPlants);\n            } catch (error) {\n              console.log(error);\n            }\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    fetchApi();\n    var timer = setTimeout(function () {}, 100);\n    return function () {\n      clearTimeout(timer);\n    };\n  }, []);\n  return _jsxs(View, {\n    flex: 1,\n    children: [_jsx(SearchBarForCheckboxes, {\n      value: plantSearchValue,\n      onSearch: plantSearchHandler\n    }), _jsx(SelectAllCheckbox, {\n      onChecked: handleSelectAll,\n      isChecked: isCheckedAll\n    }), _jsx(FlatList, {\n      data: filteredPlants,\n      showsHorizontalScrollIndicator: false,\n      keyExtractor: function keyExtractor(item, index) {\n        return \"key\" + index;\n      },\n      renderItem: ListViewType\n    })]\n  });\n}\n\nexport default PlantsPage;","map":{"version":3,"names":["React","useEffect","useState","CheckBox","useDispatch","useSelector","SearchBarForCheckboxes","SelectAllCheckbox","useChecked","useSearch","useSelectAll","style","changeLogActions","PlantsPage","filteredPlants","setFilteredPlants","plants","setPlants","isCheckedAll","state","changeLog","isAllSelected","handleOnChange","handleSelectAll","plantSearchHandler","searchHandler","plantSearchValue","searchValue","dispatch","baseURL","Platform","OS","ListViewType","item","index","flatListItem","Werks","Name1","checked","fetchApi","fetch","response","json","plantsResponse","fetchedPlants","map","plantItem","mainAttribute","key","Math","random","toString","setFetchedElements","setCheckedAllAfterRendering","error","console","log","timer","setTimeout","clearTimeout"],"sources":["C:/Users/T470/Desktop/Programming/MedepiaChangeLogMobileApp/assets/screens/PlantsPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { View, Platform, FlatList } from \"react-native\";\r\nimport { CheckBox } from \"react-native-elements\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport SearchBarForCheckboxes from \"../components/SearchBarForCheckboxes\";\r\nimport SelectAllCheckbox from \"../components/SelectAllCheckbox\";\r\nimport useChecked from \"../hooks/use-checked\";\r\nimport useSearch from \"../hooks/use-search\";\r\nimport useSelectAll from \"../hooks/use-select-all\"; \r\nimport style from '../css/flatlistItem.component.style.js';\r\nimport { changeLogActions } from '../redux/change-log-reducers';\r\n\r\nfunction PlantsPage() {\r\n  const[\r\n    [filteredPlants, setFilteredPlants],\r\n    [plants, setPlants]\r\n  ] = [useState([]), useState([])]\r\n\r\n  const isCheckedAll = useSelector(state => state.changeLog.isAllSelected)\r\n  const { handleOnChange: handleOnChange } = useChecked(plants, setPlants, filteredPlants, setFilteredPlants)\r\n  const { handleSelectAll: handleSelectAll } = useSelectAll(plants, filteredPlants, setFilteredPlants)\r\n  const { searchHandler: plantSearchHandler, searchValue: plantSearchValue } = useSearch(plants, setFilteredPlants)\r\n  const dispatch = useDispatch()\r\n\r\n  var baseURL = Platform.OS === \"android\" ? \"http://10.0.2.2:8000/EtWerksSet\" : \"https://93c3-24-133-107-93.eu.ngrok.io//EtWerksSet\";\r\n\r\n  const ListViewType = ({ item, index }) => {\r\n    return (\r\n      // Flat List Item\r\n      <CheckBox\r\n        containerStyle={style.flatListItem}\r\n        onPress={() => {handleOnChange(item.Werks)}}\r\n        title={item.Werks + \" - \" + item.Name1}\r\n        checked={item.checked}\r\n      />\r\n    );\r\n  };\r\n\r\n  const fetchApi = async () => {\r\n    const response = await fetch(baseURL);\r\n    const plantsResponse = await response.json()\r\n    \r\n    try {\r\n      const fetchedPlants = plantsResponse.map((plantItem) => (\r\n        {\r\n          ...plantItem,\r\n          mainAttribute: 'Werks',\r\n          checked: false,\r\n          key:Math.random().toString()\r\n        }\r\n      ))\r\n      \r\n      dispatch(changeLogActions.setFetchedElements(fetchedPlants))\r\n      dispatch(changeLogActions.setCheckedAllAfterRendering(fetchedPlants))\r\n      setFilteredPlants(fetchedPlants);\r\n      setPlants(fetchedPlants);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchApi();\r\n    const timer = setTimeout(() => {\r\n    }, 100)\r\n\r\n    return () => {\r\n      clearTimeout(timer)\r\n    }    \r\n  }, []);\r\n\r\n  return (\r\n    <View flex={1}>\r\n      <SearchBarForCheckboxes value={plantSearchValue} onSearch={plantSearchHandler} />\r\n      <SelectAllCheckbox onChecked={handleSelectAll} isChecked={isCheckedAll}/>\r\n        <FlatList\r\n          data={filteredPlants}\r\n          showsHorizontalScrollIndicator={false}\r\n          keyExtractor={(item, index) => \"key\" + index}\r\n          renderItem={ListViewType} />\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default PlantsPage"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;AAEA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,sBAAP;AACA,OAAOC,iBAAP;AACA,OAAOC,UAAP;AACA,OAAOC,SAAP;AACA,OAAOC,YAAP;AACA,OAAOC,KAAP;AACA,SAASC,gBAAT;;;;AAEA,SAASC,UAAT,GAAsB;EACpB,WAGI,CAACX,QAAQ,CAAC,EAAD,CAAT,EAAeA,QAAQ,CAAC,EAAD,CAAvB,CAHJ;EAAA;EAAA,IACGY,cADH;EAAA,IACmBC,iBADnB;EAAA;EAAA,IAEGC,MAFH;EAAA,IAEWC,SAFX;;EAKA,IAAMC,YAAY,GAAGb,WAAW,CAAC,UAAAc,KAAK;IAAA,OAAIA,KAAK,CAACC,SAAN,CAAgBC,aAApB;EAAA,CAAN,CAAhC;;EACA,kBAA2Cb,UAAU,CAACQ,MAAD,EAASC,SAAT,EAAoBH,cAApB,EAAoCC,iBAApC,CAArD;EAAA,IAAwBO,cAAxB,eAAQA,cAAR;;EACA,oBAA6CZ,YAAY,CAACM,MAAD,EAASF,cAAT,EAAyBC,iBAAzB,CAAzD;EAAA,IAAyBQ,eAAzB,iBAAQA,eAAR;;EACA,iBAA6Ed,SAAS,CAACO,MAAD,EAASD,iBAAT,CAAtF;EAAA,IAAuBS,kBAAvB,cAAQC,aAAR;EAAA,IAAwDC,gBAAxD,cAA2CC,WAA3C;;EACA,IAAMC,QAAQ,GAAGxB,WAAW,EAA5B;EAEA,IAAIyB,OAAO,GAAGC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,GAA4B,iCAA5B,GAAgE,mDAA9E;;EAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,QAAqB;IAAA,IAAlBC,IAAkB,SAAlBA,IAAkB;IAAA,IAAZC,KAAY,SAAZA,KAAY;IACxC,OAEE,KAAC,QAAD;MACE,cAAc,EAAEvB,KAAK,CAACwB,YADxB;MAEE,OAAO,EAAE,mBAAM;QAACb,cAAc,CAACW,IAAI,CAACG,KAAN,CAAd;MAA2B,CAF7C;MAGE,KAAK,EAAEH,IAAI,CAACG,KAAL,GAAa,KAAb,GAAqBH,IAAI,CAACI,KAHnC;MAIE,OAAO,EAAEJ,IAAI,CAACK;IAJhB,EAFF;EASD,CAVD;;EAYA,IAAMC,QAAQ,GAAG,SAAXA,QAAW;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,iCACQC,KAAK,CAACX,OAAD,CADb;;UAAA;YACTY,QADS;YAAA;YAAA,iCAEcA,QAAQ,CAACC,IAAT,EAFd;;UAAA;YAETC,cAFS;;YAIf,IAAI;cACIC,aADJ,GACoBD,cAAc,CAACE,GAAf,CAAmB,UAACC,SAAD;gBAAA,uCAElCA,SAFkC;kBAGrCC,aAAa,EAAE,OAHsB;kBAIrCT,OAAO,EAAE,KAJ4B;kBAKrCU,GAAG,EAACC,IAAI,CAACC,MAAL,GAAcC,QAAd;gBALiC;cAAA,CAAnB,CADpB;cAUFvB,QAAQ,CAAChB,gBAAgB,CAACwC,kBAAjB,CAAoCR,aAApC,CAAD,CAAR;cACAhB,QAAQ,CAAChB,gBAAgB,CAACyC,2BAAjB,CAA6CT,aAA7C,CAAD,CAAR;cACA7B,iBAAiB,CAAC6B,aAAD,CAAjB;cACA3B,SAAS,CAAC2B,aAAD,CAAT;YACD,CAdD,CAcE,OAAOU,KAAP,EAAc;cACdC,OAAO,CAACC,GAAR,CAAYF,KAAZ;YACD;;UApBc;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAjB;;EAuBArD,SAAS,CAAC,YAAM;IACdsC,QAAQ;IACR,IAAMkB,KAAK,GAAGC,UAAU,CAAC,YAAM,CAC9B,CADuB,EACrB,GADqB,CAAxB;IAGA,OAAO,YAAM;MACXC,YAAY,CAACF,KAAD,CAAZ;IACD,CAFD;EAGD,CARQ,EAQN,EARM,CAAT;EAUA,OACE,MAAC,IAAD;IAAM,IAAI,EAAE,CAAZ;IAAA,WACE,KAAC,sBAAD;MAAwB,KAAK,EAAE/B,gBAA/B;MAAiD,QAAQ,EAAEF;IAA3D,EADF,EAEE,KAAC,iBAAD;MAAmB,SAAS,EAAED,eAA9B;MAA+C,SAAS,EAAEL;IAA1D,EAFF,EAGI,KAAC,QAAD;MACE,IAAI,EAAEJ,cADR;MAEE,8BAA8B,EAAE,KAFlC;MAGE,YAAY,EAAE,sBAACmB,IAAD,EAAOC,KAAP;QAAA,OAAiB,QAAQA,KAAzB;MAAA,CAHhB;MAIE,UAAU,EAAEF;IAJd,EAHJ;EAAA,EADF;AAWD;;AAED,eAAenB,UAAf"},"metadata":{},"sourceType":"module"}