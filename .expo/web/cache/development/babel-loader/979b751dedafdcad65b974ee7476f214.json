{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport BaseRow from \"../BaseRow\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function SwitchRow(props) {\n  var enabled = props.enabled,\n      onValueChange = props.onValueChange,\n      switchProps = props.switchProps;\n\n  var _React$useState = React.useState(enabled),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isEnabled = _React$useState2[0],\n      setEnabled = _React$useState2[1];\n\n  var onChange = function onChange() {\n    setEnabled(!isEnabled);\n    onValueChange == null ? void 0 : onValueChange(!isEnabled);\n  };\n\n  return _jsx(BaseRow, _objectSpread(_objectSpread({}, props), {}, {\n    rightContent: _jsx(Switch, _objectSpread(_objectSpread({}, switchProps), {}, {\n      onValueChange: onChange,\n      value: isEnabled\n    }))\n  }));\n}\nexport default SwitchRow;","map":{"version":3,"names":["React","BaseRow","SwitchRow","props","enabled","onValueChange","switchProps","useState","isEnabled","setEnabled","onChange"],"sources":["C:/Users/T470/Desktop/Programming/MedepiaChangeLogMobileApp/node_modules/react-native-settings-view/src/components/SwitchRow/index.tsx"],"sourcesContent":["// Dependencies\nimport React from 'react';\nimport { Switch, SwitchProps } from 'react-native';\n\n// Components\nimport BaseRow, { BaseRowProps } from '../BaseRow';\n\n/**\n * @interface SwitchRowProps\n * @description The properties definition of switch row.\n */\nexport interface SwitchRowProps extends BaseRowProps {\n  /**\n   * Flag to checking the input.\n   * @default false\n   */\n  enabled: boolean;\n\n  /**\n   * Callback to communicate when the value changed.\n   */\n  onValueChange?: (isEnabled: boolean) => void;\n\n  /**\n   * The properties pass to checkbox.\n   */\n  switchProps: SwitchProps;\n}\n\n/**\n * @component SwitchRow\n * @author Daniel Mejia\n * @description Row component for settings list with a switch.\n */\nexport function SwitchRow(props: SwitchRowProps): React.ReactElement {\n  const { enabled, onValueChange, switchProps } = props;\n  const [isEnabled, setEnabled] = React.useState(enabled);\n  const onChange = (): void => {\n    setEnabled(!isEnabled);\n    onValueChange?.(!isEnabled);\n  };\n\n  return (\n    <BaseRow\n      {...props}\n      rightContent={(\n        <Switch\n          {...switchProps}\n          onValueChange={onChange}\n          value={isEnabled}\n        />\n      )}\n    />\n  );\n}\n\nexport default SwitchRow;\n"],"mappings":";;;;;;;AACA,OAAOA,KAAP,MAAkB,OAAlB;;AAIA,OAAOC,OAAP;;AA6BA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA8D;EACnE,IAAQC,OAAR,GAAgDD,KAAhD,CAAQC,OAAR;EAAA,IAAiBC,aAAjB,GAAgDF,KAAhD,CAAiBE,aAAjB;EAAA,IAAgCC,WAAhC,GAAgDH,KAAhD,CAAgCG,WAAhC;;EACA,sBAAgCN,KAAK,CAACO,QAAN,CAAeH,OAAf,CAAhC;EAAA;EAAA,IAAOI,SAAP;EAAA,IAAkBC,UAAlB;;EACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAY;IAC3BD,UAAU,CAAC,CAACD,SAAF,CAAV;IACAH,aAAa,QAAb,YAAAA,aAAa,CAAG,CAACG,SAAJ,CAAb;EACD,CAHD;;EAKA,OACE,KAAC,OAAD,kCACML,KADN;IAEE,YAAY,EACV,KAAC,MAAD,kCACMG,WADN;MAEE,aAAa,EAAEI,QAFjB;MAGE,KAAK,EAAEF;IAHT;EAHJ,GADF;AAYD;AAED,eAAeN,SAAf"},"metadata":{},"sourceType":"module"}