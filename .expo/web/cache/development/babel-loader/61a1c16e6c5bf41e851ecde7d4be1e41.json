{"ast":null,"code":"\"use strict\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar RNNetworkInfo = NativeModules.RNNetworkInfo;\nvar NetworkInfo = {\n  getSSID: function getSSID() {\n    return function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(RNNetworkInfo.getSSID());\n\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getBSSID: function getBSSID() {\n    return function _callee2() {\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(RNNetworkInfo.getBSSID());\n\n            case 2:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getBroadcast: function getBroadcast() {\n    return function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(RNNetworkInfo.getBroadcast());\n\n            case 2:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getIPAddress: function getIPAddress() {\n    return function _callee4() {\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(RNNetworkInfo.getIPAddress());\n\n            case 2:\n              return _context4.abrupt(\"return\", _context4.sent);\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getIPV4Address: function getIPV4Address() {\n    return function _callee5() {\n      var wifiIP;\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _regeneratorRuntime.awrap(RNNetworkInfo.getWIFIIPV4Address());\n\n            case 2:\n              wifiIP = _context5.sent;\n\n              if (!(wifiIP && wifiIP !== '0.0.0.0')) {\n                _context5.next = 5;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", wifiIP);\n\n            case 5:\n              _context5.next = 7;\n              return _regeneratorRuntime.awrap(RNNetworkInfo.getIPV4Address());\n\n            case 7:\n              return _context5.abrupt(\"return\", _context5.sent);\n\n            case 8:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getGatewayIPAddress: function getGatewayIPAddress() {\n    return function _callee6() {\n      return _regeneratorRuntime.async(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return _regeneratorRuntime.awrap(RNNetworkInfo.getGatewayIPAddress());\n\n            case 2:\n              return _context6.abrupt(\"return\", _context6.sent);\n\n            case 3:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getSubnet: function getSubnet() {\n    return function _callee7() {\n      return _regeneratorRuntime.async(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return _regeneratorRuntime.awrap(RNNetworkInfo.getSubnet());\n\n            case 2:\n              return _context7.abrupt(\"return\", _context7.sent);\n\n            case 3:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getFrequency: function getFrequency() {\n    return function _callee8() {\n      return _regeneratorRuntime.async(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              if (!(Platform.OS !== 'android')) {\n                _context8.next = 2;\n                break;\n              }\n\n              return _context8.abrupt(\"return\", null);\n\n            case 2:\n              _context8.next = 4;\n              return _regeneratorRuntime.awrap(RNNetworkInfo.getFrequency());\n\n            case 4:\n              return _context8.abrupt(\"return\", _context8.sent);\n\n            case 5:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  }\n};\nmodule.exports = {\n  NetworkInfo: NetworkInfo\n};","map":{"version":3,"sources":["C:/Users/T470/Desktop/MedepiaChangeLogMobileApp/node_modules/react-native-network-info/NetworkInfo.js"],"names":["RNNetworkInfo","NativeModules","NetworkInfo","getSSID","getBSSID","getBroadcast","getIPAddress","getIPV4Address","getWIFIIPV4Address","wifiIP","getGatewayIPAddress","getSubnet","getFrequency","Platform","OS","module","exports"],"mappings":"AAAA;;;;;AAGA,IAAQA,aAAR,GAA0BC,aAA1B,CAAQD,aAAR;AAEA,IAAME,WAAW,GAAG;AACZC,EAAAA,OADY,qBACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACDH,aAAa,CAACG,OAAd,EADC;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEf,GAHiB;AAKZC,EAAAA,QALY,sBAKD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACFJ,aAAa,CAACI,QAAd,EADE;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEhB,GAPiB;AASZC,EAAAA,YATY,0BASG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACNL,aAAa,CAACK,YAAd,EADM;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEpB,GAXiB;AAaZC,EAAAA,YAbY,0BAaG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACNN,aAAa,CAACM,YAAd,EADM;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEpB,GAfiB;AAiBZC,EAAAA,cAjBY,4BAiBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACAP,aAAa,CAACQ,kBAAd,EADA;;AAAA;AACfC,cAAAA,MADe;;AAAA,oBAEjBA,MAAM,IAAIA,MAAM,KAAK,SAFJ;AAAA;AAAA;AAAA;;AAAA,gDAGZA,MAHY;;AAAA;AAAA;AAAA,+CAMRT,aAAa,CAACO,cAAd,EANQ;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOtB,GAxBiB;AA0BZG,EAAAA,mBA1BY,iCA0BU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACbV,aAAa,CAACU,mBAAd,EADa;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE3B,GA5BiB;AA8BZC,EAAAA,SA9BY,uBA8BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACHX,aAAa,CAACW,SAAd,EADG;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEjB,GAhCiB;AAkCZC,EAAAA,YAlCY,0BAkCG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACfC,QAAQ,CAACC,EAAT,KAAgB,SADD;AAAA;AAAA;AAAA;;AAAA,gDAEV,IAFU;;AAAA;AAAA;AAAA,+CAINd,aAAa,CAACY,YAAd,EAJM;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKpB;AAvCiB,CAApB;AA0CAG,MAAM,CAACC,OAAP,GAAiB;AAAEd,EAAAA,WAAW,EAAXA;AAAF,CAAjB","sourcesContent":["\"use strict\";\n\nimport { NativeModules, Platform } from \"react-native\";\nconst { RNNetworkInfo } = NativeModules;\n\nconst NetworkInfo = {\n  async getSSID() {\n    return await RNNetworkInfo.getSSID();\n  },\n\n  async getBSSID() {\n    return await RNNetworkInfo.getBSSID();\n  },\n\n  async getBroadcast() {\n    return await RNNetworkInfo.getBroadcast();\n  },\n\n  async getIPAddress() {\n    return await RNNetworkInfo.getIPAddress();\n  },\n\n  async getIPV4Address() {\n    const wifiIP = await RNNetworkInfo.getWIFIIPV4Address();\n    if (wifiIP && wifiIP !== '0.0.0.0') {\n      return wifiIP;\n    }\n    \n    return await RNNetworkInfo.getIPV4Address();\n  },\n\n  async getGatewayIPAddress() {\n    return await RNNetworkInfo.getGatewayIPAddress();\n  },\n\n  async getSubnet() {\n    return await RNNetworkInfo.getSubnet();\n  },\n\n  async getFrequency() {\n    if (Platform.OS !== 'android') {\n      return null;\n    }\n    return await RNNetworkInfo.getFrequency();\n  }\n};\n\nmodule.exports = { NetworkInfo };\n"]},"metadata":{},"sourceType":"module"}